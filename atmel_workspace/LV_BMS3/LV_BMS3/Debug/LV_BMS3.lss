
LV_BMS3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000640c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000160  20000000  0000640c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000248  20000160  0000656c  00020160  2**2
                  ALLOC
  3 .stack        00002000  200003a8  000067b4  00020160  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002f8ff  00000000  00000000  000201e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000041a9  00000000  00000000  0004fae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00011603  00000000  00000000  00053c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f08  00000000  00000000  0006528c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000014d8  00000000  00000000  00066194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002282c  00000000  00000000  0006766c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018503  00000000  00000000  00089e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a00fa  00000000  00000000  000a239b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000302c  00000000  00000000  00142498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 23 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .#. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 29 01 00 00 39 15 00 00 29 01 00 00     )...)...9...)...
      7c:	e5 10 00 00 29 01 00 00 29 01 00 00 29 01 00 00     ....)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000160 	.word	0x20000160
      dc:	00000000 	.word	0x00000000
      e0:	0000640c 	.word	0x0000640c

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000164 	.word	0x20000164
     110:	0000640c 	.word	0x0000640c
     114:	0000640c 	.word	0x0000640c
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b01      	ldr	r3, [pc, #4]	; (124 <atmel_start_init+0x8>)
     120:	4798      	blx	r3
}
     122:	bd10      	pop	{r4, pc}
     124:	00000495 	.word	0x00000495

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     12e:	4a17      	ldr	r2, [pc, #92]	; (18c <Reset_Handler+0x60>)
     130:	4b17      	ldr	r3, [pc, #92]	; (190 <Reset_Handler+0x64>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b16      	ldr	r3, [pc, #88]	; (194 <Reset_Handler+0x68>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a16      	ldr	r2, [pc, #88]	; (198 <Reset_Handler+0x6c>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4810      	ldr	r0, [pc, #64]	; (190 <Reset_Handler+0x64>)
     14e:	490f      	ldr	r1, [pc, #60]	; (18c <Reset_Handler+0x60>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a10      	ldr	r2, [pc, #64]	; (19c <Reset_Handler+0x70>)
     15c:	4b10      	ldr	r3, [pc, #64]	; (1a0 <Reset_Handler+0x74>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	490e      	ldr	r1, [pc, #56]	; (1a0 <Reset_Handler+0x74>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a0a      	ldr	r2, [pc, #40]	; (1a4 <Reset_Handler+0x78>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b0a      	ldr	r3, [pc, #40]	; (1a8 <Reset_Handler+0x7c>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     182:	4b0a      	ldr	r3, [pc, #40]	; (1ac <Reset_Handler+0x80>)
     184:	4798      	blx	r3
        main();
     186:	4b0a      	ldr	r3, [pc, #40]	; (1b0 <Reset_Handler+0x84>)
     188:	4798      	blx	r3
     18a:	e7fe      	b.n	18a <Reset_Handler+0x5e>
     18c:	0000640c 	.word	0x0000640c
     190:	20000000 	.word	0x20000000
     194:	20000160 	.word	0x20000160
     198:	20000004 	.word	0x20000004
     19c:	20000160 	.word	0x20000160
     1a0:	200003a8 	.word	0x200003a8
     1a4:	e000ed00 	.word	0xe000ed00
     1a8:	00000000 	.word	0x00000000
     1ac:	000040cd 	.word	0x000040cd
     1b0:	00001895 	.word	0x00001895

000001b4 <ADC_0_PORT_init>:
struct adc_sync_descriptor ADC_0;

struct temp_sync_descriptor TEMPERATURE_SENSOR_0;

void ADC_0_PORT_init(void)
{
     1b4:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     1b6:	2204      	movs	r2, #4
     1b8:	23c0      	movs	r3, #192	; 0xc0
     1ba:	05db      	lsls	r3, r3, #23
     1bc:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     1be:	2182      	movs	r1, #130	; 0x82
     1c0:	05c9      	lsls	r1, r1, #23
     1c2:	4b0a      	ldr	r3, [pc, #40]	; (1ec <ADC_0_PORT_init+0x38>)
     1c4:	628b      	str	r3, [r1, #40]	; 0x28
     1c6:	23c0      	movs	r3, #192	; 0xc0
     1c8:	061b      	lsls	r3, r3, #24
     1ca:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1cc:	2342      	movs	r3, #66	; 0x42
     1ce:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1d0:	2001      	movs	r0, #1
     1d2:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1d4:	4302      	orrs	r2, r0
     1d6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1d8:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1da:	2231      	movs	r2, #49	; 0x31
     1dc:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     1de:	240f      	movs	r4, #15
     1e0:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
     1e2:	4303      	orrs	r3, r0
     1e4:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1e6:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(v_sense, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(v_sense, PINMUX_PA02B_ADC0_AIN0);
}
     1e8:	bd10      	pop	{r4, pc}
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	40000004 	.word	0x40000004

000001f0 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC0;
     1f0:	4a05      	ldr	r2, [pc, #20]	; (208 <ADC_0_CLOCK_init+0x18>)
     1f2:	69d1      	ldr	r1, [r2, #28]
     1f4:	2380      	movs	r3, #128	; 0x80
     1f6:	029b      	lsls	r3, r3, #10
     1f8:	430b      	orrs	r3, r1
     1fa:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1fc:	2141      	movs	r1, #65	; 0x41
     1fe:	2382      	movs	r3, #130	; 0x82
     200:	005b      	lsls	r3, r3, #1
     202:	4a02      	ldr	r2, [pc, #8]	; (20c <ADC_0_CLOCK_init+0x1c>)
     204:	50d1      	str	r1, [r2, r3]

void ADC_0_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     206:	4770      	bx	lr
     208:	40000800 	.word	0x40000800
     20c:	40001c00 	.word	0x40001c00

00000210 <ADC_0_init>:

void ADC_0_init(void)
{
     210:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     212:	4b06      	ldr	r3, [pc, #24]	; (22c <ADC_0_init+0x1c>)
     214:	4798      	blx	r3
	ADC_0_PORT_init();
     216:	4b06      	ldr	r3, [pc, #24]	; (230 <ADC_0_init+0x20>)
     218:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, _adc_get_adc_sync());
     21a:	4b06      	ldr	r3, [pc, #24]	; (234 <ADC_0_init+0x24>)
     21c:	4798      	blx	r3
     21e:	0002      	movs	r2, r0
     220:	4905      	ldr	r1, [pc, #20]	; (238 <ADC_0_init+0x28>)
     222:	4806      	ldr	r0, [pc, #24]	; (23c <ADC_0_init+0x2c>)
     224:	4b06      	ldr	r3, [pc, #24]	; (240 <ADC_0_init+0x30>)
     226:	4798      	blx	r3
}
     228:	bd10      	pop	{r4, pc}
     22a:	46c0      	nop			; (mov r8, r8)
     22c:	000001f1 	.word	0x000001f1
     230:	000001b5 	.word	0x000001b5
     234:	00000fcf 	.word	0x00000fcf
     238:	42004400 	.word	0x42004400
     23c:	200002f4 	.word	0x200002f4
     240:	000005d5 	.word	0x000005d5

00000244 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     244:	b5f0      	push	{r4, r5, r6, r7, lr}
     246:	46c6      	mov	lr, r8
     248:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     24a:	24c0      	movs	r4, #192	; 0xc0
     24c:	05e4      	lsls	r4, r4, #23
     24e:	2380      	movs	r3, #128	; 0x80
     250:	005b      	lsls	r3, r3, #1
     252:	6063      	str	r3, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     254:	2382      	movs	r3, #130	; 0x82
     256:	05db      	lsls	r3, r3, #23
     258:	4a23      	ldr	r2, [pc, #140]	; (2e8 <SPI_0_PORT_init+0xa4>)
     25a:	629a      	str	r2, [r3, #40]	; 0x28
     25c:	4a23      	ldr	r2, [pc, #140]	; (2ec <SPI_0_PORT_init+0xa8>)
     25e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     260:	2148      	movs	r1, #72	; 0x48
     262:	5c5a      	ldrb	r2, [r3, r1]
     264:	2004      	movs	r0, #4
     266:	4382      	bics	r2, r0
     268:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     26a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     26c:	2601      	movs	r6, #1
     26e:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     270:	2501      	movs	r5, #1
     272:	432a      	orrs	r2, r5
     274:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     276:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     278:	3914      	subs	r1, #20
     27a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     27c:	300b      	adds	r0, #11
     27e:	4684      	mov	ip, r0
     280:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     282:	2703      	movs	r7, #3
     284:	433a      	orrs	r2, r7
     286:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     288:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     28a:	2280      	movs	r2, #128	; 0x80
     28c:	00d2      	lsls	r2, r2, #3
     28e:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     290:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     292:	4a17      	ldr	r2, [pc, #92]	; (2f0 <SPI_0_PORT_init+0xac>)
     294:	629a      	str	r2, [r3, #40]	; 0x28
     296:	22c0      	movs	r2, #192	; 0xc0
     298:	0612      	lsls	r2, r2, #24
     29a:	4690      	mov	r8, r2
     29c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29e:	3116      	adds	r1, #22
     2a0:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a2:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2a4:	4328      	orrs	r0, r5
     2a6:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a8:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2aa:	2035      	movs	r0, #53	; 0x35
     2ac:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2ae:	4662      	mov	r2, ip
     2b0:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     2b2:	4339      	orrs	r1, r7
     2b4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2b6:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2b8:	2180      	movs	r1, #128	; 0x80
     2ba:	0109      	lsls	r1, r1, #4
     2bc:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2be:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2c0:	490c      	ldr	r1, [pc, #48]	; (2f4 <SPI_0_PORT_init+0xb0>)
     2c2:	6299      	str	r1, [r3, #40]	; 0x28
     2c4:	4642      	mov	r2, r8
     2c6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2c8:	214b      	movs	r1, #75	; 0x4b
     2ca:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2cc:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2ce:	432a      	orrs	r2, r5
     2d0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2d2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2d4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2d6:	393c      	subs	r1, #60	; 0x3c
     2d8:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2da:	3121      	adds	r1, #33	; 0x21
     2dc:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2de:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(spi_sck, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(spi_sck, PINMUX_PA11D_SERCOM2_PAD3);
}
     2e0:	bc04      	pop	{r2}
     2e2:	4690      	mov	r8, r2
     2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	40020100 	.word	0x40020100
     2ec:	c0020000 	.word	0xc0020000
     2f0:	40000400 	.word	0x40000400
     2f4:	40000800 	.word	0x40000800

000002f8 <SPI_0_CLOCK_init>:
     2f8:	4b05      	ldr	r3, [pc, #20]	; (310 <SPI_0_CLOCK_init+0x18>)
     2fa:	2241      	movs	r2, #65	; 0x41
     2fc:	21d4      	movs	r1, #212	; 0xd4
     2fe:	505a      	str	r2, [r3, r1]
     300:	390c      	subs	r1, #12
     302:	505a      	str	r2, [r3, r1]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM2;
     304:	4a03      	ldr	r2, [pc, #12]	; (314 <SPI_0_CLOCK_init+0x1c>)
     306:	69d3      	ldr	r3, [r2, #28]
     308:	39c0      	subs	r1, #192	; 0xc0
     30a:	430b      	orrs	r3, r1
     30c:	61d3      	str	r3, [r2, #28]
void SPI_0_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM2_bit(MCLK);
}
     30e:	4770      	bx	lr
     310:	40001c00 	.word	0x40001c00
     314:	40000800 	.word	0x40000800

00000318 <SPI_0_init>:

void SPI_0_init(void)
{
     318:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     31a:	4b04      	ldr	r3, [pc, #16]	; (32c <SPI_0_init+0x14>)
     31c:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM2);
     31e:	4904      	ldr	r1, [pc, #16]	; (330 <SPI_0_init+0x18>)
     320:	4804      	ldr	r0, [pc, #16]	; (334 <SPI_0_init+0x1c>)
     322:	4b05      	ldr	r3, [pc, #20]	; (338 <SPI_0_init+0x20>)
     324:	4798      	blx	r3
	SPI_0_PORT_init();
     326:	4b05      	ldr	r3, [pc, #20]	; (33c <SPI_0_init+0x24>)
     328:	4798      	blx	r3
}
     32a:	bd10      	pop	{r4, pc}
     32c:	000002f9 	.word	0x000002f9
     330:	42000c00 	.word	0x42000c00
     334:	200002f8 	.word	0x200002f8
     338:	0000082d 	.word	0x0000082d
     33c:	00000245 	.word	0x00000245

00000340 <USART_0_CLOCK_init>:
     340:	4b05      	ldr	r3, [pc, #20]	; (358 <USART_0_CLOCK_init+0x18>)
     342:	2241      	movs	r2, #65	; 0x41
     344:	21dc      	movs	r1, #220	; 0xdc
     346:	505a      	str	r2, [r3, r1]
     348:	3914      	subs	r1, #20
     34a:	505a      	str	r2, [r3, r1]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
     34c:	4a03      	ldr	r2, [pc, #12]	; (35c <USART_0_CLOCK_init+0x1c>)
     34e:	69d3      	ldr	r3, [r2, #28]
     350:	39a8      	subs	r1, #168	; 0xa8
     352:	430b      	orrs	r3, r1
     354:	61d3      	str	r3, [r2, #28]
{

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
     356:	4770      	bx	lr
     358:	40001c00 	.word	0x40001c00
     35c:	40000800 	.word	0x40000800

00000360 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     360:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     362:	2382      	movs	r3, #130	; 0x82
     364:	05db      	lsls	r3, r3, #23
     366:	22c8      	movs	r2, #200	; 0xc8
     368:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     36a:	2501      	movs	r5, #1
     36c:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     36e:	2401      	movs	r4, #1
     370:	4321      	orrs	r1, r4
     372:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     374:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     376:	20b4      	movs	r0, #180	; 0xb4
     378:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     37a:	3ab9      	subs	r2, #185	; 0xb9
     37c:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     37e:	3a0c      	subs	r2, #12
     380:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     382:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     384:	21c9      	movs	r1, #201	; 0xc9
     386:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     388:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     38a:	4322      	orrs	r2, r4
     38c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     38e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     390:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     392:	39ba      	subs	r1, #186	; 0xba
     394:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     396:	3121      	adds	r1, #33	; 0x21
     398:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     39a:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(usb_tx, PINMUX_PB08D_SERCOM4_PAD0);

	gpio_set_pin_function(usb_rx, PINMUX_PB09D_SERCOM4_PAD1);
}
     39c:	bd30      	pop	{r4, r5, pc}
	...

000003a0 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     3a0:	b510      	push	{r4, lr}
     3a2:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     3a4:	4b06      	ldr	r3, [pc, #24]	; (3c0 <USART_0_init+0x20>)
     3a6:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM4, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     3a8:	2300      	movs	r3, #0
     3aa:	9300      	str	r3, [sp, #0]
     3ac:	3310      	adds	r3, #16
     3ae:	4a05      	ldr	r2, [pc, #20]	; (3c4 <USART_0_init+0x24>)
     3b0:	4905      	ldr	r1, [pc, #20]	; (3c8 <USART_0_init+0x28>)
     3b2:	4806      	ldr	r0, [pc, #24]	; (3cc <USART_0_init+0x2c>)
     3b4:	4c06      	ldr	r4, [pc, #24]	; (3d0 <USART_0_init+0x30>)
     3b6:	47a0      	blx	r4
	USART_0_PORT_init();
     3b8:	4b06      	ldr	r3, [pc, #24]	; (3d4 <USART_0_init+0x34>)
     3ba:	4798      	blx	r3
}
     3bc:	b002      	add	sp, #8
     3be:	bd10      	pop	{r4, pc}
     3c0:	00000341 	.word	0x00000341
     3c4:	2000017c 	.word	0x2000017c
     3c8:	42001400 	.word	0x42001400
     3cc:	20000310 	.word	0x20000310
     3d0:	00000b91 	.word	0x00000b91
     3d4:	00000361 	.word	0x00000361

000003d8 <CAN_0_PORT_init>:

void CAN_0_PORT_init(void)
{
     3d8:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3da:	2382      	movs	r3, #130	; 0x82
     3dc:	05db      	lsls	r3, r3, #23
     3de:	2259      	movs	r2, #89	; 0x59
     3e0:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3e2:	2501      	movs	r5, #1
     3e4:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e6:	2401      	movs	r4, #1
     3e8:	4321      	orrs	r1, r4
     3ea:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ec:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ee:	203c      	movs	r0, #60	; 0x3c
     3f0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3f2:	3a4a      	subs	r2, #74	; 0x4a
     3f4:	4011      	ands	r1, r2
	tmp |= PORT_PMUX_PMUXO(data);
     3f6:	3251      	adds	r2, #81	; 0x51
     3f8:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3fa:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3fc:	2158      	movs	r1, #88	; 0x58
     3fe:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     400:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     402:	4322      	orrs	r2, r4
     404:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     406:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     408:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     40a:	3949      	subs	r1, #73	; 0x49
     40c:	438a      	bics	r2, r1
	tmp |= PORT_PMUX_PMUXE(data);
     40e:	3909      	subs	r1, #9
     410:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     412:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(can_rx, PINMUX_PA25G_CAN0_RX);

	gpio_set_pin_function(can_tx, PINMUX_PA24G_CAN0_TX);
}
     414:	bd30      	pop	{r4, r5, pc}
	...

00000418 <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
     418:	b510      	push	{r4, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN0;
     41a:	4a08      	ldr	r2, [pc, #32]	; (43c <CAN_0_init+0x24>)
     41c:	6911      	ldr	r1, [r2, #16]
     41e:	2380      	movs	r3, #128	; 0x80
     420:	005b      	lsls	r3, r3, #1
     422:	430b      	orrs	r3, r1
     424:	6113      	str	r3, [r2, #16]
     426:	2141      	movs	r1, #65	; 0x41
     428:	23e8      	movs	r3, #232	; 0xe8
     42a:	4a05      	ldr	r2, [pc, #20]	; (440 <CAN_0_init+0x28>)
     42c:	50d1      	str	r1, [r2, r3]
	hri_mclk_set_AHBMASK_CAN0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN0_GCLK_ID, CONF_GCLK_CAN0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_0, CAN0);
     42e:	4905      	ldr	r1, [pc, #20]	; (444 <CAN_0_init+0x2c>)
     430:	4805      	ldr	r0, [pc, #20]	; (448 <CAN_0_init+0x30>)
     432:	4b06      	ldr	r3, [pc, #24]	; (44c <CAN_0_init+0x34>)
     434:	4798      	blx	r3
	CAN_0_PORT_init();
     436:	4b06      	ldr	r3, [pc, #24]	; (450 <CAN_0_init+0x38>)
     438:	4798      	blx	r3
}
     43a:	bd10      	pop	{r4, pc}
     43c:	40000800 	.word	0x40000800
     440:	40001c00 	.word	0x40001c00
     444:	42001c00 	.word	0x42001c00
     448:	200002c8 	.word	0x200002c8
     44c:	00000735 	.word	0x00000735
     450:	000003d9 	.word	0x000003d9

00000454 <TEMPERATURE_SENSOR_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TSENS;
     454:	4a05      	ldr	r2, [pc, #20]	; (46c <TEMPERATURE_SENSOR_0_CLOCK_init+0x18>)
     456:	6951      	ldr	r1, [r2, #20]
     458:	2380      	movs	r3, #128	; 0x80
     45a:	015b      	lsls	r3, r3, #5
     45c:	430b      	orrs	r3, r1
     45e:	6153      	str	r3, [r2, #20]
     460:	2141      	movs	r1, #65	; 0x41
     462:	2394      	movs	r3, #148	; 0x94
     464:	4a02      	ldr	r2, [pc, #8]	; (470 <TEMPERATURE_SENSOR_0_CLOCK_init+0x1c>)
     466:	50d1      	str	r1, [r2, r3]
void TEMPERATURE_SENSOR_0_CLOCK_init(void)
{
	hri_mclk_set_APBAMASK_TSENS_bit(MCLK);

	hri_gclk_write_PCHCTRL_reg(GCLK, TSENS_GCLK_ID, CONF_GCLK_TSENS_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     468:	4770      	bx	lr
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	40000800 	.word	0x40000800
     470:	40001c00 	.word	0x40001c00

00000474 <TEMPERATURE_SENSOR_0_init>:

void TEMPERATURE_SENSOR_0_init(void)
{
     474:	b510      	push	{r4, lr}
	TEMPERATURE_SENSOR_0_CLOCK_init();
     476:	4b03      	ldr	r3, [pc, #12]	; (484 <TEMPERATURE_SENSOR_0_init+0x10>)
     478:	4798      	blx	r3
	temp_sync_init(&TEMPERATURE_SENSOR_0, TSENS);
     47a:	4903      	ldr	r1, [pc, #12]	; (488 <TEMPERATURE_SENSOR_0_init+0x14>)
     47c:	4803      	ldr	r0, [pc, #12]	; (48c <TEMPERATURE_SENSOR_0_init+0x18>)
     47e:	4b04      	ldr	r3, [pc, #16]	; (490 <TEMPERATURE_SENSOR_0_init+0x1c>)
     480:	4798      	blx	r3
}
     482:	bd10      	pop	{r4, pc}
     484:	00000455 	.word	0x00000455
     488:	40003000 	.word	0x40003000
     48c:	200002f0 	.word	0x200002f0
     490:	00000999 	.word	0x00000999

00000494 <system_init>:

void system_init(void)
{
     494:	b5f0      	push	{r4, r5, r6, r7, lr}
     496:	46c6      	mov	lr, r8
     498:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     49a:	4b3f      	ldr	r3, [pc, #252]	; (598 <system_init+0x104>)
     49c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     49e:	22c0      	movs	r2, #192	; 0xc0
     4a0:	05d2      	lsls	r2, r2, #23
     4a2:	2320      	movs	r3, #32
     4a4:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4a6:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a8:	2382      	movs	r3, #130	; 0x82
     4aa:	05db      	lsls	r3, r3, #23
     4ac:	493b      	ldr	r1, [pc, #236]	; (59c <system_init+0x108>)
     4ae:	6299      	str	r1, [r3, #40]	; 0x28
     4b0:	24c0      	movs	r4, #192	; 0xc0
     4b2:	0624      	lsls	r4, r4, #24
     4b4:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4b6:	2545      	movs	r5, #69	; 0x45
     4b8:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ba:	2101      	movs	r1, #1
     4bc:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4be:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4c0:	2080      	movs	r0, #128	; 0x80
     4c2:	0080      	lsls	r0, r0, #2
     4c4:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4c6:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4c8:	4835      	ldr	r0, [pc, #212]	; (5a0 <system_init+0x10c>)
     4ca:	6298      	str	r0, [r3, #40]	; 0x28
     4cc:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ce:	2449      	movs	r4, #73	; 0x49
     4d0:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d2:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d4:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4d6:	2080      	movs	r0, #128	; 0x80
     4d8:	0500      	lsls	r0, r0, #20
     4da:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4dc:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4de:	2480      	movs	r4, #128	; 0x80
     4e0:	05e4      	lsls	r4, r4, #23
     4e2:	629c      	str	r4, [r3, #40]	; 0x28
     4e4:	482f      	ldr	r0, [pc, #188]	; (5a4 <system_init+0x110>)
     4e6:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4e8:	3516      	adds	r5, #22
     4ea:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ec:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ee:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4f0:	2080      	movs	r0, #128	; 0x80
     4f2:	0540      	lsls	r0, r0, #21
     4f4:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4f6:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4f8:	629c      	str	r4, [r3, #40]	; 0x28
     4fa:	482b      	ldr	r0, [pc, #172]	; (5a8 <system_init+0x114>)
     4fc:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4fe:	3501      	adds	r5, #1
     500:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     502:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     504:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     506:	2084      	movs	r0, #132	; 0x84
     508:	4680      	mov	r8, r0
     50a:	2704      	movs	r7, #4
     50c:	5017      	str	r7, [r2, r0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     50e:	3024      	adds	r0, #36	; 0x24
     510:	4d26      	ldr	r5, [pc, #152]	; (5ac <system_init+0x118>)
     512:	501d      	str	r5, [r3, r0]
     514:	4d26      	ldr	r5, [pc, #152]	; (5b0 <system_init+0x11c>)
     516:	46ac      	mov	ip, r5
     518:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     51a:	25c2      	movs	r5, #194	; 0xc2
     51c:	5d5e      	ldrb	r6, [r3, r5]
     51e:	43be      	bics	r6, r7
     520:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     522:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     524:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     526:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     528:	3dba      	subs	r5, #186	; 0xba
     52a:	4646      	mov	r6, r8
     52c:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     52e:	4d21      	ldr	r5, [pc, #132]	; (5b4 <system_init+0x120>)
     530:	501d      	str	r5, [r3, r0]
     532:	4665      	mov	r5, ip
     534:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     536:	25c3      	movs	r5, #195	; 0xc3
     538:	5d5e      	ldrb	r6, [r3, r5]
     53a:	43be      	bics	r6, r7
     53c:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     53e:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     540:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     542:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     544:	3790      	adds	r7, #144	; 0x90
     546:	2580      	movs	r5, #128	; 0x80
     548:	03ed      	lsls	r5, r5, #15
     54a:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     54c:	2688      	movs	r6, #136	; 0x88
     54e:	46b0      	mov	r8, r6
     550:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     552:	501c      	str	r4, [r3, r0]
     554:	4d18      	ldr	r5, [pc, #96]	; (5b8 <system_init+0x124>)
     556:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     558:	25d6      	movs	r5, #214	; 0xd6
     55a:	46ac      	mov	ip, r5
     55c:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     55e:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     560:	4666      	mov	r6, ip
     562:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     564:	2580      	movs	r5, #128	; 0x80
     566:	042d      	lsls	r5, r5, #16
     568:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     56a:	4646      	mov	r6, r8
     56c:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     56e:	501c      	str	r4, [r3, r0]
     570:	4a12      	ldr	r2, [pc, #72]	; (5bc <system_init+0x128>)
     572:	501a      	str	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	302f      	adds	r0, #47	; 0x2f
     576:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(led_2, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(led_2, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     57c:	4b10      	ldr	r3, [pc, #64]	; (5c0 <system_init+0x12c>)
     57e:	4798      	blx	r3

	SPI_0_init();
     580:	4b10      	ldr	r3, [pc, #64]	; (5c4 <system_init+0x130>)
     582:	4798      	blx	r3
	USART_0_init();
     584:	4b10      	ldr	r3, [pc, #64]	; (5c8 <system_init+0x134>)
     586:	4798      	blx	r3
	CAN_0_init();
     588:	4b10      	ldr	r3, [pc, #64]	; (5cc <system_init+0x138>)
     58a:	4798      	blx	r3

	TEMPERATURE_SENSOR_0_init();
     58c:	4b10      	ldr	r3, [pc, #64]	; (5d0 <system_init+0x13c>)
     58e:	4798      	blx	r3
}
     590:	bc04      	pop	{r2}
     592:	4690      	mov	r8, r2
     594:	bdf0      	pop	{r4, r5, r6, r7, pc}
     596:	46c0      	nop			; (mov r8, r8)
     598:	00001195 	.word	0x00001195
     59c:	40000020 	.word	0x40000020
     5a0:	40000200 	.word	0x40000200
     5a4:	c0000800 	.word	0xc0000800
     5a8:	c0001000 	.word	0xc0001000
     5ac:	40020004 	.word	0x40020004
     5b0:	c0020000 	.word	0xc0020000
     5b4:	40020008 	.word	0x40020008
     5b8:	c0000040 	.word	0xc0000040
     5bc:	c0000080 	.word	0xc0000080
     5c0:	00000211 	.word	0x00000211
     5c4:	00000319 	.word	0x00000319
     5c8:	000003a1 	.word	0x000003a1
     5cc:	00000419 	.word	0x00000419
     5d0:	00000475 	.word	0x00000475

000005d4 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     5d4:	b570      	push	{r4, r5, r6, lr}
     5d6:	0004      	movs	r4, r0
     5d8:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     5da:	2800      	cmp	r0, #0
     5dc:	d00c      	beq.n	5f8 <adc_sync_init+0x24>
     5de:	0008      	movs	r0, r1
     5e0:	1e43      	subs	r3, r0, #1
     5e2:	4198      	sbcs	r0, r3
     5e4:	b2c0      	uxtb	r0, r0
     5e6:	2239      	movs	r2, #57	; 0x39
     5e8:	4904      	ldr	r1, [pc, #16]	; (5fc <adc_sync_init+0x28>)
     5ea:	4b05      	ldr	r3, [pc, #20]	; (600 <adc_sync_init+0x2c>)
     5ec:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     5ee:	0029      	movs	r1, r5
     5f0:	0020      	movs	r0, r4
     5f2:	4b04      	ldr	r3, [pc, #16]	; (604 <adc_sync_init+0x30>)
     5f4:	4798      	blx	r3
}
     5f6:	bd70      	pop	{r4, r5, r6, pc}
     5f8:	2000      	movs	r0, #0
     5fa:	e7f4      	b.n	5e6 <adc_sync_init+0x12>
     5fc:	00005e00 	.word	0x00005e00
     600:	00000ccd 	.word	0x00000ccd
     604:	00000f4d 	.word	0x00000f4d

00000608 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     608:	b570      	push	{r4, r5, r6, lr}
     60a:	0004      	movs	r4, r0
     60c:	000d      	movs	r5, r1
	ASSERT(descr);
     60e:	1e43      	subs	r3, r0, #1
     610:	4198      	sbcs	r0, r3
     612:	b2c0      	uxtb	r0, r0
     614:	224e      	movs	r2, #78	; 0x4e
     616:	4904      	ldr	r1, [pc, #16]	; (628 <adc_sync_enable_channel+0x20>)
     618:	4b04      	ldr	r3, [pc, #16]	; (62c <adc_sync_enable_channel+0x24>)
     61a:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     61c:	0029      	movs	r1, r5
     61e:	0020      	movs	r0, r4
     620:	4b03      	ldr	r3, [pc, #12]	; (630 <adc_sync_enable_channel+0x28>)
     622:	4798      	blx	r3

	return ERR_NONE;
}
     624:	2000      	movs	r0, #0
     626:	bd70      	pop	{r4, r5, r6, pc}
     628:	00005e00 	.word	0x00005e00
     62c:	00000ccd 	.word	0x00000ccd
     630:	00000f85 	.word	0x00000f85

00000634 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     634:	b5f0      	push	{r4, r5, r6, r7, lr}
     636:	46de      	mov	lr, fp
     638:	4657      	mov	r7, sl
     63a:	464e      	mov	r6, r9
     63c:	4645      	mov	r5, r8
     63e:	b5e0      	push	{r5, r6, r7, lr}
     640:	b083      	sub	sp, #12
     642:	0006      	movs	r6, r0
     644:	000d      	movs	r5, r1
     646:	4691      	mov	r9, r2
     648:	9301      	str	r3, [sp, #4]
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     64a:	2800      	cmp	r0, #0
     64c:	d01e      	beq.n	68c <adc_sync_read_channel+0x58>
     64e:	2a00      	cmp	r2, #0
     650:	d01e      	beq.n	690 <adc_sync_read_channel+0x5c>
     652:	0018      	movs	r0, r3
     654:	1e43      	subs	r3, r0, #1
     656:	4198      	sbcs	r0, r3
     658:	2267      	movs	r2, #103	; 0x67
     65a:	491f      	ldr	r1, [pc, #124]	; (6d8 <adc_sync_read_channel+0xa4>)
     65c:	4f1f      	ldr	r7, [pc, #124]	; (6dc <adc_sync_read_channel+0xa8>)
     65e:	47b8      	blx	r7
	data_size = _adc_sync_get_data_size(&descr->device);
     660:	0034      	movs	r4, r6
     662:	0030      	movs	r0, r6
     664:	4b1e      	ldr	r3, [pc, #120]	; (6e0 <adc_sync_read_channel+0xac>)
     666:	4798      	blx	r3
     668:	0001      	movs	r1, r0
     66a:	4680      	mov	r8, r0
	ASSERT(!(length % data_size));
     66c:	9801      	ldr	r0, [sp, #4]
     66e:	4b1d      	ldr	r3, [pc, #116]	; (6e4 <adc_sync_read_channel+0xb0>)
     670:	4798      	blx	r3
     672:	4248      	negs	r0, r1
     674:	4148      	adcs	r0, r1
     676:	b2c0      	uxtb	r0, r0
     678:	2269      	movs	r2, #105	; 0x69
     67a:	4917      	ldr	r1, [pc, #92]	; (6d8 <adc_sync_read_channel+0xa4>)
     67c:	47b8      	blx	r7
	uint16_t offset = 0;
     67e:	2700      	movs	r7, #0

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
     680:	4b19      	ldr	r3, [pc, #100]	; (6e8 <adc_sync_read_channel+0xb4>)
     682:	469b      	mov	fp, r3

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     684:	4e19      	ldr	r6, [pc, #100]	; (6ec <adc_sync_read_channel+0xb8>)
			;

		result         = _adc_sync_read_channel_data(&descr->device, channel);
     686:	4b1a      	ldr	r3, [pc, #104]	; (6f0 <adc_sync_read_channel+0xbc>)
     688:	469a      	mov	sl, r3
     68a:	e008      	b.n	69e <adc_sync_read_channel+0x6a>
	ASSERT(descr && buffer && length);
     68c:	2000      	movs	r0, #0
     68e:	e7e3      	b.n	658 <adc_sync_read_channel+0x24>
     690:	2000      	movs	r0, #0
     692:	e7e1      	b.n	658 <adc_sync_read_channel+0x24>
     694:	4447      	add	r7, r8
     696:	b2bf      	uxth	r7, r7
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
	} while (offset < length);
     698:	9b01      	ldr	r3, [sp, #4]
     69a:	42bb      	cmp	r3, r7
     69c:	d913      	bls.n	6c6 <adc_sync_read_channel+0x92>
		_adc_sync_convert(&descr->device);
     69e:	0020      	movs	r0, r4
     6a0:	47d8      	blx	fp
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     6a2:	0029      	movs	r1, r5
     6a4:	0020      	movs	r0, r4
     6a6:	47b0      	blx	r6
     6a8:	2800      	cmp	r0, #0
     6aa:	d0fa      	beq.n	6a2 <adc_sync_read_channel+0x6e>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     6ac:	0029      	movs	r1, r5
     6ae:	0020      	movs	r0, r4
     6b0:	47d0      	blx	sl
		buffer[offset] = result;
     6b2:	464b      	mov	r3, r9
     6b4:	55d8      	strb	r0, [r3, r7]
		if (1 < data_size) {
     6b6:	4643      	mov	r3, r8
     6b8:	2b01      	cmp	r3, #1
     6ba:	d9eb      	bls.n	694 <adc_sync_read_channel+0x60>
			buffer[offset + 1] = result >> 8;
     6bc:	464b      	mov	r3, r9
     6be:	19db      	adds	r3, r3, r7
     6c0:	0a00      	lsrs	r0, r0, #8
     6c2:	7058      	strb	r0, [r3, #1]
     6c4:	e7e6      	b.n	694 <adc_sync_read_channel+0x60>

	return offset;
}
     6c6:	0038      	movs	r0, r7
     6c8:	b003      	add	sp, #12
     6ca:	bc3c      	pop	{r2, r3, r4, r5}
     6cc:	4690      	mov	r8, r2
     6ce:	4699      	mov	r9, r3
     6d0:	46a2      	mov	sl, r4
     6d2:	46ab      	mov	fp, r5
     6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6d6:	46c0      	nop			; (mov r8, r8)
     6d8:	00005e00 	.word	0x00005e00
     6dc:	00000ccd 	.word	0x00000ccd
     6e0:	00000f99 	.word	0x00000f99
     6e4:	0000124d 	.word	0x0000124d
     6e8:	00000fb5 	.word	0x00000fb5
     6ec:	00000fab 	.word	0x00000fab
     6f0:	00000fc7 	.word	0x00000fc7

000006f4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     6f4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     6f8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     6fa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     6fc:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     700:	4770      	bx	lr

00000702 <atomic_leave_critical>:
     702:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     706:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     708:	f383 8810 	msr	PRIMASK, r3
}
     70c:	4770      	bx	lr

0000070e <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
     70e:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
     710:	69c3      	ldr	r3, [r0, #28]
     712:	2b00      	cmp	r3, #0
     714:	d000      	beq.n	718 <can_tx_done+0xa>
		descr->cb.tx_done(descr);
     716:	4798      	blx	r3
	}
}
     718:	bd10      	pop	{r4, pc}

0000071a <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
     71a:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
     71c:	6a03      	ldr	r3, [r0, #32]
     71e:	2b00      	cmp	r3, #0
     720:	d000      	beq.n	724 <can_rx_done+0xa>
		descr->cb.rx_done(descr);
     722:	4798      	blx	r3
	}
}
     724:	bd10      	pop	{r4, pc}

00000726 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
     726:	b510      	push	{r4, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
     728:	6a43      	ldr	r3, [r0, #36]	; 0x24
     72a:	2b00      	cmp	r3, #0
     72c:	d000      	beq.n	730 <can_irq_handler+0xa>
		descr->cb.irq_handler(descr, type);
     72e:	4798      	blx	r3
	}
}
     730:	bd10      	pop	{r4, pc}
	...

00000734 <can_async_init>:
{
     734:	b570      	push	{r4, r5, r6, lr}
     736:	0005      	movs	r5, r0
     738:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     73a:	2800      	cmp	r0, #0
     73c:	d014      	beq.n	768 <can_async_init+0x34>
     73e:	0008      	movs	r0, r1
     740:	1e43      	subs	r3, r0, #1
     742:	4198      	sbcs	r0, r3
     744:	b2c0      	uxtb	r0, r0
     746:	2241      	movs	r2, #65	; 0x41
     748:	4908      	ldr	r1, [pc, #32]	; (76c <can_async_init+0x38>)
     74a:	4b09      	ldr	r3, [pc, #36]	; (770 <can_async_init+0x3c>)
     74c:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
     74e:	0021      	movs	r1, r4
     750:	0028      	movs	r0, r5
     752:	4b08      	ldr	r3, [pc, #32]	; (774 <can_async_init+0x40>)
     754:	4798      	blx	r3
	if (rc) {
     756:	2800      	cmp	r0, #0
     758:	d105      	bne.n	766 <can_async_init+0x32>
	descr->dev.cb.tx_done     = can_tx_done;
     75a:	4b07      	ldr	r3, [pc, #28]	; (778 <can_async_init+0x44>)
     75c:	606b      	str	r3, [r5, #4]
	descr->dev.cb.rx_done     = can_rx_done;
     75e:	4b07      	ldr	r3, [pc, #28]	; (77c <can_async_init+0x48>)
     760:	60ab      	str	r3, [r5, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
     762:	4b07      	ldr	r3, [pc, #28]	; (780 <can_async_init+0x4c>)
     764:	60eb      	str	r3, [r5, #12]
}
     766:	bd70      	pop	{r4, r5, r6, pc}
     768:	2000      	movs	r0, #0
     76a:	e7ec      	b.n	746 <can_async_init+0x12>
     76c:	00005e1c 	.word	0x00005e1c
     770:	00000ccd 	.word	0x00000ccd
     774:	00000fd5 	.word	0x00000fd5
     778:	0000070f 	.word	0x0000070f
     77c:	0000071b 	.word	0x0000071b
     780:	00000727 	.word	0x00000727

00000784 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     784:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     786:	4b04      	ldr	r3, [pc, #16]	; (798 <delay_us+0x14>)
     788:	681c      	ldr	r4, [r3, #0]
     78a:	4b04      	ldr	r3, [pc, #16]	; (79c <delay_us+0x18>)
     78c:	4798      	blx	r3
     78e:	0001      	movs	r1, r0
     790:	0020      	movs	r0, r4
     792:	4b03      	ldr	r3, [pc, #12]	; (7a0 <delay_us+0x1c>)
     794:	4798      	blx	r3
}
     796:	bd10      	pop	{r4, pc}
     798:	2000018c 	.word	0x2000018c
     79c:	00001151 	.word	0x00001151
     7a0:	0000118d 	.word	0x0000118d

000007a4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     7a4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     7a6:	4b04      	ldr	r3, [pc, #16]	; (7b8 <delay_ms+0x14>)
     7a8:	681c      	ldr	r4, [r3, #0]
     7aa:	4b04      	ldr	r3, [pc, #16]	; (7bc <delay_ms+0x18>)
     7ac:	4798      	blx	r3
     7ae:	0001      	movs	r1, r0
     7b0:	0020      	movs	r0, r4
     7b2:	4b03      	ldr	r3, [pc, #12]	; (7c0 <delay_ms+0x1c>)
     7b4:	4798      	blx	r3
}
     7b6:	bd10      	pop	{r4, pc}
     7b8:	2000018c 	.word	0x2000018c
     7bc:	0000116d 	.word	0x0000116d
     7c0:	0000118d 	.word	0x0000118d

000007c4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     7c4:	b570      	push	{r4, r5, r6, lr}
     7c6:	0006      	movs	r6, r0
     7c8:	000c      	movs	r4, r1
     7ca:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     7cc:	2800      	cmp	r0, #0
     7ce:	d00d      	beq.n	7ec <io_write+0x28>
     7d0:	0008      	movs	r0, r1
     7d2:	1e43      	subs	r3, r0, #1
     7d4:	4198      	sbcs	r0, r3
     7d6:	b2c0      	uxtb	r0, r0
     7d8:	2234      	movs	r2, #52	; 0x34
     7da:	4905      	ldr	r1, [pc, #20]	; (7f0 <io_write+0x2c>)
     7dc:	4b05      	ldr	r3, [pc, #20]	; (7f4 <io_write+0x30>)
     7de:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     7e0:	6833      	ldr	r3, [r6, #0]
     7e2:	002a      	movs	r2, r5
     7e4:	0021      	movs	r1, r4
     7e6:	0030      	movs	r0, r6
     7e8:	4798      	blx	r3
}
     7ea:	bd70      	pop	{r4, r5, r6, pc}
     7ec:	2000      	movs	r0, #0
     7ee:	e7f3      	b.n	7d8 <io_write+0x14>
     7f0:	00005e38 	.word	0x00005e38
     7f4:	00000ccd 	.word	0x00000ccd

000007f8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     7f8:	b570      	push	{r4, r5, r6, lr}
     7fa:	0006      	movs	r6, r0
     7fc:	000c      	movs	r4, r1
     7fe:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     800:	2800      	cmp	r0, #0
     802:	d00d      	beq.n	820 <io_read+0x28>
     804:	0008      	movs	r0, r1
     806:	1e43      	subs	r3, r0, #1
     808:	4198      	sbcs	r0, r3
     80a:	b2c0      	uxtb	r0, r0
     80c:	223d      	movs	r2, #61	; 0x3d
     80e:	4905      	ldr	r1, [pc, #20]	; (824 <io_read+0x2c>)
     810:	4b05      	ldr	r3, [pc, #20]	; (828 <io_read+0x30>)
     812:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     814:	6873      	ldr	r3, [r6, #4]
     816:	002a      	movs	r2, r5
     818:	0021      	movs	r1, r4
     81a:	0030      	movs	r0, r6
     81c:	4798      	blx	r3
}
     81e:	bd70      	pop	{r4, r5, r6, pc}
     820:	2000      	movs	r0, #0
     822:	e7f3      	b.n	80c <io_read+0x14>
     824:	00005e38 	.word	0x00005e38
     828:	00000ccd 	.word	0x00000ccd

0000082c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     82c:	b570      	push	{r4, r5, r6, lr}
     82e:	0004      	movs	r4, r0
     830:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     832:	2800      	cmp	r0, #0
     834:	d016      	beq.n	864 <spi_m_sync_init+0x38>
     836:	0008      	movs	r0, r1
     838:	1e43      	subs	r3, r0, #1
     83a:	4198      	sbcs	r0, r3
     83c:	b2c0      	uxtb	r0, r0
     83e:	2240      	movs	r2, #64	; 0x40
     840:	4909      	ldr	r1, [pc, #36]	; (868 <spi_m_sync_init+0x3c>)
     842:	4b0a      	ldr	r3, [pc, #40]	; (86c <spi_m_sync_init+0x40>)
     844:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     846:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     848:	1d20      	adds	r0, r4, #4
     84a:	0029      	movs	r1, r5
     84c:	4b08      	ldr	r3, [pc, #32]	; (870 <spi_m_sync_init+0x44>)
     84e:	4798      	blx	r3

	if (rc < 0) {
     850:	2800      	cmp	r0, #0
     852:	db06      	blt.n	862 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     854:	4b07      	ldr	r3, [pc, #28]	; (874 <spi_m_sync_init+0x48>)
     856:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     858:	4b07      	ldr	r3, [pc, #28]	; (878 <spi_m_sync_init+0x4c>)
     85a:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     85c:	4b07      	ldr	r3, [pc, #28]	; (87c <spi_m_sync_init+0x50>)
     85e:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     860:	2000      	movs	r0, #0
}
     862:	bd70      	pop	{r4, r5, r6, pc}
     864:	2000      	movs	r0, #0
     866:	e7ea      	b.n	83e <spi_m_sync_init+0x12>
     868:	00005e4c 	.word	0x00005e4c
     86c:	00000ccd 	.word	0x00000ccd
     870:	000015a5 	.word	0x000015a5
     874:	ffff8000 	.word	0xffff8000
     878:	0000092d 	.word	0x0000092d
     87c:	000008f1 	.word	0x000008f1

00000880 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     880:	b510      	push	{r4, lr}
     882:	0004      	movs	r4, r0
	ASSERT(spi);
     884:	1e43      	subs	r3, r0, #1
     886:	4198      	sbcs	r0, r3
     888:	b2c0      	uxtb	r0, r0
     88a:	2257      	movs	r2, #87	; 0x57
     88c:	4903      	ldr	r1, [pc, #12]	; (89c <spi_m_sync_enable+0x1c>)
     88e:	4b04      	ldr	r3, [pc, #16]	; (8a0 <spi_m_sync_enable+0x20>)
     890:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     892:	1d20      	adds	r0, r4, #4
     894:	4b03      	ldr	r3, [pc, #12]	; (8a4 <spi_m_sync_enable+0x24>)
     896:	4798      	blx	r3
}
     898:	bd10      	pop	{r4, pc}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	00005e4c 	.word	0x00005e4c
     8a0:	00000ccd 	.word	0x00000ccd
     8a4:	0000169d 	.word	0x0000169d

000008a8 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     8a8:	b530      	push	{r4, r5, lr}
     8aa:	b087      	sub	sp, #28
     8ac:	0004      	movs	r4, r0
     8ae:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     8b0:	2800      	cmp	r0, #0
     8b2:	d014      	beq.n	8de <spi_m_sync_transfer+0x36>
     8b4:	0008      	movs	r0, r1
     8b6:	1e43      	subs	r3, r0, #1
     8b8:	4198      	sbcs	r0, r3
     8ba:	b2c0      	uxtb	r0, r0
     8bc:	22b3      	movs	r2, #179	; 0xb3
     8be:	4909      	ldr	r1, [pc, #36]	; (8e4 <spi_m_sync_transfer+0x3c>)
     8c0:	4b09      	ldr	r3, [pc, #36]	; (8e8 <spi_m_sync_transfer+0x40>)
     8c2:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     8c4:	682b      	ldr	r3, [r5, #0]
     8c6:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     8c8:	686b      	ldr	r3, [r5, #4]
     8ca:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     8cc:	68ab      	ldr	r3, [r5, #8]
     8ce:	9301      	str	r3, [sp, #4]
     8d0:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     8d2:	1d20      	adds	r0, r4, #4
     8d4:	a903      	add	r1, sp, #12
     8d6:	4b05      	ldr	r3, [pc, #20]	; (8ec <spi_m_sync_transfer+0x44>)
     8d8:	4798      	blx	r3
}
     8da:	b007      	add	sp, #28
     8dc:	bd30      	pop	{r4, r5, pc}
     8de:	2000      	movs	r0, #0
     8e0:	e7ec      	b.n	8bc <spi_m_sync_transfer+0x14>
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	00005e4c 	.word	0x00005e4c
     8e8:	00000ccd 	.word	0x00000ccd
     8ec:	000016d1 	.word	0x000016d1

000008f0 <_spi_m_sync_io_write>:
{
     8f0:	b570      	push	{r4, r5, r6, lr}
     8f2:	b084      	sub	sp, #16
     8f4:	0004      	movs	r4, r0
     8f6:	000e      	movs	r6, r1
     8f8:	0015      	movs	r5, r2
	ASSERT(io);
     8fa:	1e43      	subs	r3, r0, #1
     8fc:	4198      	sbcs	r0, r3
     8fe:	b2c0      	uxtb	r0, r0
     900:	22a3      	movs	r2, #163	; 0xa3
     902:	4907      	ldr	r1, [pc, #28]	; (920 <_spi_m_sync_io_write+0x30>)
     904:	4b07      	ldr	r3, [pc, #28]	; (924 <_spi_m_sync_io_write+0x34>)
     906:	4798      	blx	r3
	xfer.rxbuf = 0;
     908:	2300      	movs	r3, #0
     90a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     90c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     90e:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     910:	0020      	movs	r0, r4
     912:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     914:	a901      	add	r1, sp, #4
     916:	4b04      	ldr	r3, [pc, #16]	; (928 <_spi_m_sync_io_write+0x38>)
     918:	4798      	blx	r3
}
     91a:	b004      	add	sp, #16
     91c:	bd70      	pop	{r4, r5, r6, pc}
     91e:	46c0      	nop			; (mov r8, r8)
     920:	00005e4c 	.word	0x00005e4c
     924:	00000ccd 	.word	0x00000ccd
     928:	000008a9 	.word	0x000008a9

0000092c <_spi_m_sync_io_read>:
{
     92c:	b570      	push	{r4, r5, r6, lr}
     92e:	b084      	sub	sp, #16
     930:	0004      	movs	r4, r0
     932:	000e      	movs	r6, r1
     934:	0015      	movs	r5, r2
	ASSERT(io);
     936:	1e43      	subs	r3, r0, #1
     938:	4198      	sbcs	r0, r3
     93a:	b2c0      	uxtb	r0, r0
     93c:	2287      	movs	r2, #135	; 0x87
     93e:	4907      	ldr	r1, [pc, #28]	; (95c <_spi_m_sync_io_read+0x30>)
     940:	4b07      	ldr	r3, [pc, #28]	; (960 <_spi_m_sync_io_read+0x34>)
     942:	4798      	blx	r3
	xfer.rxbuf = buf;
     944:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     946:	2300      	movs	r3, #0
     948:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     94a:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     94c:	0020      	movs	r0, r4
     94e:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
     950:	a901      	add	r1, sp, #4
     952:	4b04      	ldr	r3, [pc, #16]	; (964 <_spi_m_sync_io_read+0x38>)
     954:	4798      	blx	r3
}
     956:	b004      	add	sp, #16
     958:	bd70      	pop	{r4, r5, r6, pc}
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	00005e4c 	.word	0x00005e4c
     960:	00000ccd 	.word	0x00000ccd
     964:	000008a9 	.word	0x000008a9

00000968 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     968:	b570      	push	{r4, r5, r6, lr}
     96a:	0004      	movs	r4, r0
     96c:	000d      	movs	r5, r1
	ASSERT(spi && io);
     96e:	2800      	cmp	r0, #0
     970:	d00b      	beq.n	98a <spi_m_sync_get_io_descriptor+0x22>
     972:	0008      	movs	r0, r1
     974:	1e43      	subs	r3, r0, #1
     976:	4198      	sbcs	r0, r3
     978:	b2c0      	uxtb	r0, r0
     97a:	22bd      	movs	r2, #189	; 0xbd
     97c:	4904      	ldr	r1, [pc, #16]	; (990 <spi_m_sync_get_io_descriptor+0x28>)
     97e:	4b05      	ldr	r3, [pc, #20]	; (994 <spi_m_sync_get_io_descriptor+0x2c>)
     980:	4798      	blx	r3
	*io = &spi->io;
     982:	340c      	adds	r4, #12
     984:	602c      	str	r4, [r5, #0]
	return 0;
}
     986:	2000      	movs	r0, #0
     988:	bd70      	pop	{r4, r5, r6, pc}
     98a:	2000      	movs	r0, #0
     98c:	e7f5      	b.n	97a <spi_m_sync_get_io_descriptor+0x12>
     98e:	46c0      	nop			; (mov r8, r8)
     990:	00005e4c 	.word	0x00005e4c
     994:	00000ccd 	.word	0x00000ccd

00000998 <temp_sync_init>:

/**
 * \brief              Initialize Temperature Descriptor
 */
int32_t temp_sync_init(struct temp_sync_descriptor *const descr, void *const hw)
{
     998:	b570      	push	{r4, r5, r6, lr}
     99a:	0004      	movs	r4, r0
     99c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     99e:	2800      	cmp	r0, #0
     9a0:	d00c      	beq.n	9bc <temp_sync_init+0x24>
     9a2:	0008      	movs	r0, r1
     9a4:	1e43      	subs	r3, r0, #1
     9a6:	4198      	sbcs	r0, r3
     9a8:	b2c0      	uxtb	r0, r0
     9aa:	222b      	movs	r2, #43	; 0x2b
     9ac:	4904      	ldr	r1, [pc, #16]	; (9c0 <temp_sync_init+0x28>)
     9ae:	4b05      	ldr	r3, [pc, #20]	; (9c4 <temp_sync_init+0x2c>)
     9b0:	4798      	blx	r3
	return _temp_sync_init(&descr->dev, hw);
     9b2:	0029      	movs	r1, r5
     9b4:	0020      	movs	r0, r4
     9b6:	4b04      	ldr	r3, [pc, #16]	; (9c8 <temp_sync_init+0x30>)
     9b8:	4798      	blx	r3
}
     9ba:	bd70      	pop	{r4, r5, r6, pc}
     9bc:	2000      	movs	r0, #0
     9be:	e7f4      	b.n	9aa <temp_sync_init+0x12>
     9c0:	00005e68 	.word	0x00005e68
     9c4:	00000ccd 	.word	0x00000ccd
     9c8:	000017e1 	.word	0x000017e1

000009cc <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     9cc:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     9ce:	3808      	subs	r0, #8

	descr->stat = 0;
     9d0:	2300      	movs	r3, #0
     9d2:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     9d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
     9d6:	2b00      	cmp	r3, #0
     9d8:	d000      	beq.n	9dc <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     9da:	4798      	blx	r3
	}
}
     9dc:	bd10      	pop	{r4, pc}

000009de <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     9de:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     9e0:	3808      	subs	r0, #8

	descr->stat = 0;
     9e2:	2300      	movs	r3, #0
     9e4:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     9e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     9e8:	2b00      	cmp	r3, #0
     9ea:	d000      	beq.n	9ee <usart_error+0x10>
		descr->usart_cb.error(descr);
     9ec:	4798      	blx	r3
	}
}
     9ee:	bd10      	pop	{r4, pc}

000009f0 <usart_fill_rx_buffer>:
{
     9f0:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     9f2:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     9f4:	302c      	adds	r0, #44	; 0x2c
     9f6:	4b04      	ldr	r3, [pc, #16]	; (a08 <usart_fill_rx_buffer+0x18>)
     9f8:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     9fa:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     9fc:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     9fe:	2b00      	cmp	r3, #0
     a00:	d001      	beq.n	a06 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     a02:	0020      	movs	r0, r4
     a04:	4798      	blx	r3
}
     a06:	bd10      	pop	{r4, pc}
     a08:	00000d71 	.word	0x00000d71

00000a0c <usart_async_write>:
{
     a0c:	b570      	push	{r4, r5, r6, lr}
     a0e:	0004      	movs	r4, r0
     a10:	000e      	movs	r6, r1
     a12:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     a14:	2800      	cmp	r0, #0
     a16:	d01d      	beq.n	a54 <usart_async_write+0x48>
     a18:	2900      	cmp	r1, #0
     a1a:	d01d      	beq.n	a58 <usart_async_write+0x4c>
     a1c:	0010      	movs	r0, r2
     a1e:	1e43      	subs	r3, r0, #1
     a20:	4198      	sbcs	r0, r3
     a22:	223c      	movs	r2, #60	; 0x3c
     a24:	32ff      	adds	r2, #255	; 0xff
     a26:	490f      	ldr	r1, [pc, #60]	; (a64 <usart_async_write+0x58>)
     a28:	4b0f      	ldr	r3, [pc, #60]	; (a68 <usart_async_write+0x5c>)
     a2a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     a2c:	2344      	movs	r3, #68	; 0x44
     a2e:	5ae2      	ldrh	r2, [r4, r3]
     a30:	3308      	adds	r3, #8
     a32:	5ae3      	ldrh	r3, [r4, r3]
     a34:	429a      	cmp	r2, r3
     a36:	d111      	bne.n	a5c <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     a38:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     a3a:	234c      	movs	r3, #76	; 0x4c
     a3c:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     a3e:	2200      	movs	r2, #0
     a40:	3b08      	subs	r3, #8
     a42:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     a44:	3b43      	subs	r3, #67	; 0x43
     a46:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     a48:	0020      	movs	r0, r4
     a4a:	3008      	adds	r0, #8
     a4c:	4b07      	ldr	r3, [pc, #28]	; (a6c <usart_async_write+0x60>)
     a4e:	4798      	blx	r3
	return (int32_t)length;
     a50:	0028      	movs	r0, r5
}
     a52:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     a54:	2000      	movs	r0, #0
     a56:	e7e4      	b.n	a22 <usart_async_write+0x16>
     a58:	2000      	movs	r0, #0
     a5a:	e7e2      	b.n	a22 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     a5c:	201c      	movs	r0, #28
     a5e:	4240      	negs	r0, r0
     a60:	e7f7      	b.n	a52 <usart_async_write+0x46>
     a62:	46c0      	nop			; (mov r8, r8)
     a64:	00005e84 	.word	0x00005e84
     a68:	00000ccd 	.word	0x00000ccd
     a6c:	000014b5 	.word	0x000014b5

00000a70 <usart_process_byte_sent>:
{
     a70:	b570      	push	{r4, r5, r6, lr}
     a72:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     a74:	0001      	movs	r1, r0
     a76:	3908      	subs	r1, #8
     a78:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     a7a:	224c      	movs	r2, #76	; 0x4c
     a7c:	5a8a      	ldrh	r2, [r1, r2]
     a7e:	429a      	cmp	r2, r3
     a80:	d00c      	beq.n	a9c <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     a82:	000a      	movs	r2, r1
     a84:	6c89      	ldr	r1, [r1, #72]	; 0x48
     a86:	1c5d      	adds	r5, r3, #1
     a88:	2044      	movs	r0, #68	; 0x44
     a8a:	5215      	strh	r5, [r2, r0]
     a8c:	5cc9      	ldrb	r1, [r1, r3]
     a8e:	0020      	movs	r0, r4
     a90:	4b04      	ldr	r3, [pc, #16]	; (aa4 <usart_process_byte_sent+0x34>)
     a92:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     a94:	0020      	movs	r0, r4
     a96:	4b04      	ldr	r3, [pc, #16]	; (aa8 <usart_process_byte_sent+0x38>)
     a98:	4798      	blx	r3
}
     a9a:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     a9c:	4b03      	ldr	r3, [pc, #12]	; (aac <usart_process_byte_sent+0x3c>)
     a9e:	4798      	blx	r3
}
     aa0:	e7fb      	b.n	a9a <usart_process_byte_sent+0x2a>
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	000014ad 	.word	0x000014ad
     aa8:	000014b5 	.word	0x000014b5
     aac:	000014bd 	.word	0x000014bd

00000ab0 <usart_async_read>:
{
     ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ab2:	46ce      	mov	lr, r9
     ab4:	4647      	mov	r7, r8
     ab6:	b580      	push	{r7, lr}
     ab8:	b085      	sub	sp, #20
     aba:	0005      	movs	r5, r0
     abc:	000e      	movs	r6, r1
     abe:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     ac0:	2800      	cmp	r0, #0
     ac2:	d015      	beq.n	af0 <usart_async_read+0x40>
     ac4:	2900      	cmp	r1, #0
     ac6:	d013      	beq.n	af0 <usart_async_read+0x40>
     ac8:	2a00      	cmp	r2, #0
     aca:	d12a      	bne.n	b22 <usart_async_read+0x72>
     acc:	22ac      	movs	r2, #172	; 0xac
     ace:	0052      	lsls	r2, r2, #1
     ad0:	4929      	ldr	r1, [pc, #164]	; (b78 <usart_async_read+0xc8>)
     ad2:	2000      	movs	r0, #0
     ad4:	4b29      	ldr	r3, [pc, #164]	; (b7c <usart_async_read+0xcc>)
     ad6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     ad8:	a803      	add	r0, sp, #12
     ada:	4b29      	ldr	r3, [pc, #164]	; (b80 <usart_async_read+0xd0>)
     adc:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     ade:	0028      	movs	r0, r5
     ae0:	3034      	adds	r0, #52	; 0x34
     ae2:	4b28      	ldr	r3, [pc, #160]	; (b84 <usart_async_read+0xd4>)
     ae4:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     ae6:	a803      	add	r0, sp, #12
     ae8:	4b27      	ldr	r3, [pc, #156]	; (b88 <usart_async_read+0xd8>)
     aea:	4798      	blx	r3
	uint16_t                       was_read = 0;
     aec:	2500      	movs	r5, #0
	return (int32_t)was_read;
     aee:	e03c      	b.n	b6a <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     af0:	22ac      	movs	r2, #172	; 0xac
     af2:	0052      	lsls	r2, r2, #1
     af4:	4920      	ldr	r1, [pc, #128]	; (b78 <usart_async_read+0xc8>)
     af6:	2000      	movs	r0, #0
     af8:	4b20      	ldr	r3, [pc, #128]	; (b7c <usart_async_read+0xcc>)
     afa:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     afc:	a803      	add	r0, sp, #12
     afe:	4b20      	ldr	r3, [pc, #128]	; (b80 <usart_async_read+0xd0>)
     b00:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     b02:	3534      	adds	r5, #52	; 0x34
     b04:	0028      	movs	r0, r5
     b06:	9501      	str	r5, [sp, #4]
     b08:	4b1e      	ldr	r3, [pc, #120]	; (b84 <usart_async_read+0xd4>)
     b0a:	4798      	blx	r3
     b0c:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     b0e:	a803      	add	r0, sp, #12
     b10:	4b1d      	ldr	r3, [pc, #116]	; (b88 <usart_async_read+0xd8>)
     b12:	4798      	blx	r3
	uint16_t                       was_read = 0;
     b14:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     b16:	4643      	mov	r3, r8
     b18:	2b00      	cmp	r3, #0
     b1a:	d026      	beq.n	b6a <usart_async_read+0xba>
     b1c:	2f00      	cmp	r7, #0
     b1e:	d116      	bne.n	b4e <usart_async_read+0x9e>
     b20:	e023      	b.n	b6a <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     b22:	22ac      	movs	r2, #172	; 0xac
     b24:	0052      	lsls	r2, r2, #1
     b26:	4914      	ldr	r1, [pc, #80]	; (b78 <usart_async_read+0xc8>)
     b28:	2001      	movs	r0, #1
     b2a:	4b14      	ldr	r3, [pc, #80]	; (b7c <usart_async_read+0xcc>)
     b2c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     b2e:	a803      	add	r0, sp, #12
     b30:	4b13      	ldr	r3, [pc, #76]	; (b80 <usart_async_read+0xd0>)
     b32:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     b34:	3534      	adds	r5, #52	; 0x34
     b36:	0028      	movs	r0, r5
     b38:	9501      	str	r5, [sp, #4]
     b3a:	4b12      	ldr	r3, [pc, #72]	; (b84 <usart_async_read+0xd4>)
     b3c:	4798      	blx	r3
     b3e:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     b40:	a803      	add	r0, sp, #12
     b42:	4b11      	ldr	r3, [pc, #68]	; (b88 <usart_async_read+0xd8>)
     b44:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     b46:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     b48:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     b4a:	2b00      	cmp	r3, #0
     b4c:	d00d      	beq.n	b6a <usart_async_read+0xba>
{
     b4e:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     b50:	4b0e      	ldr	r3, [pc, #56]	; (b8c <usart_async_read+0xdc>)
     b52:	4699      	mov	r9, r3
     b54:	1c65      	adds	r5, r4, #1
     b56:	b2ad      	uxth	r5, r5
     b58:	1931      	adds	r1, r6, r4
     b5a:	9801      	ldr	r0, [sp, #4]
     b5c:	47c8      	blx	r9
     b5e:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     b60:	4544      	cmp	r4, r8
     b62:	d202      	bcs.n	b6a <usart_async_read+0xba>
     b64:	b2a3      	uxth	r3, r4
     b66:	429f      	cmp	r7, r3
     b68:	d8f4      	bhi.n	b54 <usart_async_read+0xa4>
}
     b6a:	0028      	movs	r0, r5
     b6c:	b005      	add	sp, #20
     b6e:	bc0c      	pop	{r2, r3}
     b70:	4690      	mov	r8, r2
     b72:	4699      	mov	r9, r3
     b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	00005e84 	.word	0x00005e84
     b7c:	00000ccd 	.word	0x00000ccd
     b80:	000006f5 	.word	0x000006f5
     b84:	00000db1 	.word	0x00000db1
     b88:	00000703 	.word	0x00000703
     b8c:	00000d29 	.word	0x00000d29

00000b90 <usart_async_init>:
{
     b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b92:	0004      	movs	r4, r0
     b94:	000d      	movs	r5, r1
     b96:	0016      	movs	r6, r2
     b98:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     b9a:	2800      	cmp	r0, #0
     b9c:	d026      	beq.n	bec <usart_async_init+0x5c>
     b9e:	2900      	cmp	r1, #0
     ba0:	d026      	beq.n	bf0 <usart_async_init+0x60>
     ba2:	2a00      	cmp	r2, #0
     ba4:	d026      	beq.n	bf4 <usart_async_init+0x64>
     ba6:	0018      	movs	r0, r3
     ba8:	1e43      	subs	r3, r0, #1
     baa:	4198      	sbcs	r0, r3
     bac:	223a      	movs	r2, #58	; 0x3a
     bae:	4914      	ldr	r1, [pc, #80]	; (c00 <usart_async_init+0x70>)
     bb0:	4b14      	ldr	r3, [pc, #80]	; (c04 <usart_async_init+0x74>)
     bb2:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     bb4:	0020      	movs	r0, r4
     bb6:	3034      	adds	r0, #52	; 0x34
     bb8:	003a      	movs	r2, r7
     bba:	0031      	movs	r1, r6
     bbc:	4b12      	ldr	r3, [pc, #72]	; (c08 <usart_async_init+0x78>)
     bbe:	4798      	blx	r3
     bc0:	2800      	cmp	r0, #0
     bc2:	d119      	bne.n	bf8 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     bc4:	0020      	movs	r0, r4
     bc6:	3008      	adds	r0, #8
     bc8:	0029      	movs	r1, r5
     bca:	4b10      	ldr	r3, [pc, #64]	; (c0c <usart_async_init+0x7c>)
     bcc:	4798      	blx	r3
	if (init_status) {
     bce:	2800      	cmp	r0, #0
     bd0:	d10b      	bne.n	bea <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     bd2:	4b0f      	ldr	r3, [pc, #60]	; (c10 <usart_async_init+0x80>)
     bd4:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     bd6:	4b0f      	ldr	r3, [pc, #60]	; (c14 <usart_async_init+0x84>)
     bd8:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     bda:	4b0f      	ldr	r3, [pc, #60]	; (c18 <usart_async_init+0x88>)
     bdc:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     bde:	4b0f      	ldr	r3, [pc, #60]	; (c1c <usart_async_init+0x8c>)
     be0:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     be2:	4b0f      	ldr	r3, [pc, #60]	; (c20 <usart_async_init+0x90>)
     be4:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     be6:	4b0f      	ldr	r3, [pc, #60]	; (c24 <usart_async_init+0x94>)
     be8:	6163      	str	r3, [r4, #20]
}
     bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     bec:	2000      	movs	r0, #0
     bee:	e7dd      	b.n	bac <usart_async_init+0x1c>
     bf0:	2000      	movs	r0, #0
     bf2:	e7db      	b.n	bac <usart_async_init+0x1c>
     bf4:	2000      	movs	r0, #0
     bf6:	e7d9      	b.n	bac <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     bf8:	200d      	movs	r0, #13
     bfa:	4240      	negs	r0, r0
     bfc:	e7f5      	b.n	bea <usart_async_init+0x5a>
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	00005e84 	.word	0x00005e84
     c04:	00000ccd 	.word	0x00000ccd
     c08:	00000cd5 	.word	0x00000cd5
     c0c:	0000141d 	.word	0x0000141d
     c10:	00000ab1 	.word	0x00000ab1
     c14:	00000a0d 	.word	0x00000a0d
     c18:	00000a71 	.word	0x00000a71
     c1c:	000009f1 	.word	0x000009f1
     c20:	000009cd 	.word	0x000009cd
     c24:	000009df 	.word	0x000009df

00000c28 <usart_async_enable>:
{
     c28:	b510      	push	{r4, lr}
     c2a:	0004      	movs	r4, r0
	ASSERT(descr);
     c2c:	1e43      	subs	r3, r0, #1
     c2e:	4198      	sbcs	r0, r3
     c30:	b2c0      	uxtb	r0, r0
     c32:	2261      	movs	r2, #97	; 0x61
     c34:	4904      	ldr	r1, [pc, #16]	; (c48 <usart_async_enable+0x20>)
     c36:	4b05      	ldr	r3, [pc, #20]	; (c4c <usart_async_enable+0x24>)
     c38:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     c3a:	0020      	movs	r0, r4
     c3c:	3008      	adds	r0, #8
     c3e:	4b04      	ldr	r3, [pc, #16]	; (c50 <usart_async_enable+0x28>)
     c40:	4798      	blx	r3
}
     c42:	2000      	movs	r0, #0
     c44:	bd10      	pop	{r4, pc}
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	00005e84 	.word	0x00005e84
     c4c:	00000ccd 	.word	0x00000ccd
     c50:	00001499 	.word	0x00001499

00000c54 <usart_async_register_callback>:
{
     c54:	b570      	push	{r4, r5, r6, lr}
     c56:	0005      	movs	r5, r0
     c58:	000e      	movs	r6, r1
     c5a:	0014      	movs	r4, r2
	ASSERT(descr);
     c5c:	1e43      	subs	r3, r0, #1
     c5e:	4198      	sbcs	r0, r3
     c60:	b2c0      	uxtb	r0, r0
     c62:	2283      	movs	r2, #131	; 0x83
     c64:	4916      	ldr	r1, [pc, #88]	; (cc0 <usart_async_register_callback+0x6c>)
     c66:	4b17      	ldr	r3, [pc, #92]	; (cc4 <usart_async_register_callback+0x70>)
     c68:	4798      	blx	r3
	switch (type) {
     c6a:	2e01      	cmp	r6, #1
     c6c:	d011      	beq.n	c92 <usart_async_register_callback+0x3e>
     c6e:	2e00      	cmp	r6, #0
     c70:	d004      	beq.n	c7c <usart_async_register_callback+0x28>
     c72:	2e02      	cmp	r6, #2
     c74:	d018      	beq.n	ca8 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     c76:	200d      	movs	r0, #13
     c78:	4240      	negs	r0, r0
     c7a:	e009      	b.n	c90 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     c7c:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     c7e:	1e62      	subs	r2, r4, #1
     c80:	4194      	sbcs	r4, r2
     c82:	b2e2      	uxtb	r2, r4
     c84:	0028      	movs	r0, r5
     c86:	3008      	adds	r0, #8
     c88:	2101      	movs	r1, #1
     c8a:	4b0f      	ldr	r3, [pc, #60]	; (cc8 <usart_async_register_callback+0x74>)
     c8c:	4798      	blx	r3
	return ERR_NONE;
     c8e:	2000      	movs	r0, #0
}
     c90:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     c92:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     c94:	1e62      	subs	r2, r4, #1
     c96:	4194      	sbcs	r4, r2
     c98:	b2e2      	uxtb	r2, r4
     c9a:	0028      	movs	r0, r5
     c9c:	3008      	adds	r0, #8
     c9e:	2102      	movs	r1, #2
     ca0:	4b09      	ldr	r3, [pc, #36]	; (cc8 <usart_async_register_callback+0x74>)
     ca2:	4798      	blx	r3
	return ERR_NONE;
     ca4:	2000      	movs	r0, #0
		break;
     ca6:	e7f3      	b.n	c90 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     ca8:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     caa:	1e62      	subs	r2, r4, #1
     cac:	4194      	sbcs	r4, r2
     cae:	b2e2      	uxtb	r2, r4
     cb0:	0028      	movs	r0, r5
     cb2:	3008      	adds	r0, #8
     cb4:	2103      	movs	r1, #3
     cb6:	4b04      	ldr	r3, [pc, #16]	; (cc8 <usart_async_register_callback+0x74>)
     cb8:	4798      	blx	r3
	return ERR_NONE;
     cba:	2000      	movs	r0, #0
		break;
     cbc:	e7e8      	b.n	c90 <usart_async_register_callback+0x3c>
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	00005e84 	.word	0x00005e84
     cc4:	00000ccd 	.word	0x00000ccd
     cc8:	000014c5 	.word	0x000014c5

00000ccc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ccc:	2800      	cmp	r0, #0
     cce:	d100      	bne.n	cd2 <assert+0x6>
		__asm("BKPT #0");
     cd0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     cd2:	4770      	bx	lr

00000cd4 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     cd4:	b570      	push	{r4, r5, r6, lr}
     cd6:	0004      	movs	r4, r0
     cd8:	000e      	movs	r6, r1
     cda:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     cdc:	2800      	cmp	r0, #0
     cde:	d00b      	beq.n	cf8 <ringbuffer_init+0x24>
     ce0:	2900      	cmp	r1, #0
     ce2:	d018      	beq.n	d16 <ringbuffer_init+0x42>
     ce4:	2001      	movs	r0, #1
     ce6:	2a00      	cmp	r2, #0
     ce8:	d107      	bne.n	cfa <ringbuffer_init+0x26>
     cea:	2228      	movs	r2, #40	; 0x28
     cec:	490c      	ldr	r1, [pc, #48]	; (d20 <ringbuffer_init+0x4c>)
     cee:	2000      	movs	r0, #0
     cf0:	4b0c      	ldr	r3, [pc, #48]	; (d24 <ringbuffer_init+0x50>)
     cf2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     cf4:	1e6b      	subs	r3, r5, #1
     cf6:	e007      	b.n	d08 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
     cf8:	2000      	movs	r0, #0
     cfa:	2228      	movs	r2, #40	; 0x28
     cfc:	4908      	ldr	r1, [pc, #32]	; (d20 <ringbuffer_init+0x4c>)
     cfe:	4b09      	ldr	r3, [pc, #36]	; (d24 <ringbuffer_init+0x50>)
     d00:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     d02:	1e6b      	subs	r3, r5, #1
     d04:	422b      	tst	r3, r5
     d06:	d108      	bne.n	d1a <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     d08:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     d0a:	2300      	movs	r3, #0
     d0c:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     d0e:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     d10:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     d12:	2000      	movs	r0, #0
}
     d14:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     d16:	2000      	movs	r0, #0
     d18:	e7ef      	b.n	cfa <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
     d1a:	200d      	movs	r0, #13
     d1c:	4240      	negs	r0, r0
     d1e:	e7f9      	b.n	d14 <ringbuffer_init+0x40>
     d20:	00005ea4 	.word	0x00005ea4
     d24:	00000ccd 	.word	0x00000ccd

00000d28 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     d28:	b570      	push	{r4, r5, r6, lr}
     d2a:	0004      	movs	r4, r0
     d2c:	000d      	movs	r5, r1
	ASSERT(rb && data);
     d2e:	2800      	cmp	r0, #0
     d30:	d015      	beq.n	d5e <ringbuffer_get+0x36>
     d32:	0008      	movs	r0, r1
     d34:	1e43      	subs	r3, r0, #1
     d36:	4198      	sbcs	r0, r3
     d38:	b2c0      	uxtb	r0, r0
     d3a:	2240      	movs	r2, #64	; 0x40
     d3c:	490a      	ldr	r1, [pc, #40]	; (d68 <ringbuffer_get+0x40>)
     d3e:	4b0b      	ldr	r3, [pc, #44]	; (d6c <ringbuffer_get+0x44>)
     d40:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     d42:	68a3      	ldr	r3, [r4, #8]
     d44:	68e2      	ldr	r2, [r4, #12]
     d46:	429a      	cmp	r2, r3
     d48:	d00b      	beq.n	d62 <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
     d4a:	6862      	ldr	r2, [r4, #4]
     d4c:	4013      	ands	r3, r2
     d4e:	6822      	ldr	r2, [r4, #0]
     d50:	5cd3      	ldrb	r3, [r2, r3]
     d52:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     d54:	68a3      	ldr	r3, [r4, #8]
     d56:	3301      	adds	r3, #1
     d58:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     d5a:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     d5c:	bd70      	pop	{r4, r5, r6, pc}
     d5e:	2000      	movs	r0, #0
     d60:	e7eb      	b.n	d3a <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     d62:	200a      	movs	r0, #10
     d64:	4240      	negs	r0, r0
     d66:	e7f9      	b.n	d5c <ringbuffer_get+0x34>
     d68:	00005ea4 	.word	0x00005ea4
     d6c:	00000ccd 	.word	0x00000ccd

00000d70 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     d70:	b570      	push	{r4, r5, r6, lr}
     d72:	0004      	movs	r4, r0
     d74:	000d      	movs	r5, r1
	ASSERT(rb);
     d76:	1e43      	subs	r3, r0, #1
     d78:	4198      	sbcs	r0, r3
     d7a:	b2c0      	uxtb	r0, r0
     d7c:	2251      	movs	r2, #81	; 0x51
     d7e:	490a      	ldr	r1, [pc, #40]	; (da8 <ringbuffer_put+0x38>)
     d80:	4b0a      	ldr	r3, [pc, #40]	; (dac <ringbuffer_put+0x3c>)
     d82:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     d84:	6863      	ldr	r3, [r4, #4]
     d86:	68e2      	ldr	r2, [r4, #12]
     d88:	4013      	ands	r3, r2
     d8a:	6822      	ldr	r2, [r4, #0]
     d8c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     d8e:	68e3      	ldr	r3, [r4, #12]
     d90:	6861      	ldr	r1, [r4, #4]
     d92:	68a2      	ldr	r2, [r4, #8]
     d94:	1a9a      	subs	r2, r3, r2
     d96:	428a      	cmp	r2, r1
     d98:	d901      	bls.n	d9e <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     d9a:	1a59      	subs	r1, r3, r1
     d9c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     d9e:	3301      	adds	r3, #1
     da0:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     da2:	2000      	movs	r0, #0
     da4:	bd70      	pop	{r4, r5, r6, pc}
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	00005ea4 	.word	0x00005ea4
     dac:	00000ccd 	.word	0x00000ccd

00000db0 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     db0:	b510      	push	{r4, lr}
     db2:	0004      	movs	r4, r0
	ASSERT(rb);
     db4:	1e43      	subs	r3, r0, #1
     db6:	4198      	sbcs	r0, r3
     db8:	b2c0      	uxtb	r0, r0
     dba:	2267      	movs	r2, #103	; 0x67
     dbc:	4903      	ldr	r1, [pc, #12]	; (dcc <ringbuffer_num+0x1c>)
     dbe:	4b04      	ldr	r3, [pc, #16]	; (dd0 <ringbuffer_num+0x20>)
     dc0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     dc2:	68e0      	ldr	r0, [r4, #12]
     dc4:	68a3      	ldr	r3, [r4, #8]
     dc6:	1ac0      	subs	r0, r0, r3
}
     dc8:	bd10      	pop	{r4, pc}
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	00005ea4 	.word	0x00005ea4
     dd0:	00000ccd 	.word	0x00000ccd

00000dd4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     dd4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     dd6:	4a06      	ldr	r2, [pc, #24]	; (df0 <_sbrk+0x1c>)
     dd8:	6812      	ldr	r2, [r2, #0]
     dda:	2a00      	cmp	r2, #0
     ddc:	d004      	beq.n	de8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     dde:	4a04      	ldr	r2, [pc, #16]	; (df0 <_sbrk+0x1c>)
     de0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     de2:	18c3      	adds	r3, r0, r3
     de4:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     de6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     de8:	4902      	ldr	r1, [pc, #8]	; (df4 <_sbrk+0x20>)
     dea:	4a01      	ldr	r2, [pc, #4]	; (df0 <_sbrk+0x1c>)
     dec:	6011      	str	r1, [r2, #0]
     dee:	e7f6      	b.n	dde <_sbrk+0xa>
     df0:	20000190 	.word	0x20000190
     df4:	200023a8 	.word	0x200023a8

00000df8 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     df8:	b510      	push	{r4, lr}
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
     dfa:	8c03      	ldrh	r3, [r0, #32]

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
     dfc:	07db      	lsls	r3, r3, #31
     dfe:	d418      	bmi.n	e32 <_adc_init+0x3a>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     e00:	2203      	movs	r2, #3
     e02:	8c03      	ldrh	r3, [r0, #32]
     e04:	4213      	tst	r3, r2
     e06:	d1fc      	bne.n	e02 <_adc_init+0xa>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     e08:	7803      	ldrb	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     e0a:	079b      	lsls	r3, r3, #30
     e0c:	d50b      	bpl.n	e26 <_adc_init+0x2e>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     e0e:	7803      	ldrb	r3, [r0, #0]
     e10:	2202      	movs	r2, #2
     e12:	4393      	bics	r3, r2
     e14:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     e16:	3201      	adds	r2, #1
     e18:	8c03      	ldrh	r3, [r0, #32]
     e1a:	4213      	tst	r3, r2
     e1c:	d1fc      	bne.n	e18 <_adc_init+0x20>
     e1e:	2202      	movs	r2, #2
     e20:	8c03      	ldrh	r3, [r0, #32]
     e22:	4213      	tst	r3, r2
     e24:	d1fc      	bne.n	e20 <_adc_init+0x28>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     e26:	2301      	movs	r3, #1
     e28:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     e2a:	2203      	movs	r2, #3
     e2c:	8c03      	ldrh	r3, [r0, #32]
     e2e:	4213      	tst	r3, r2
     e30:	d1fc      	bne.n	e2c <_adc_init+0x34>
     e32:	2201      	movs	r2, #1
     e34:	8c03      	ldrh	r3, [r0, #32]
     e36:	4213      	tst	r3, r2
     e38:	d1fc      	bne.n	e34 <_adc_init+0x3c>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     e3a:	00ca      	lsls	r2, r1, #3
     e3c:	1a52      	subs	r2, r2, r1
     e3e:	0092      	lsls	r2, r2, #2
     e40:	4b36      	ldr	r3, [pc, #216]	; (f1c <_adc_init+0x124>)
     e42:	189b      	adds	r3, r3, r2
     e44:	789a      	ldrb	r2, [r3, #2]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
     e46:	7042      	strb	r2, [r0, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     e48:	78da      	ldrb	r2, [r3, #3]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
     e4a:	7082      	strb	r2, [r0, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     e4c:	791a      	ldrb	r2, [r3, #4]
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
     e4e:	70c2      	strb	r2, [r0, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     e50:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
     e52:	8103      	strh	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     e54:	8c03      	ldrh	r3, [r0, #32]
     e56:	055b      	lsls	r3, r3, #21
     e58:	d1fc      	bne.n	e54 <_adc_init+0x5c>
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
     e5a:	00cb      	lsls	r3, r1, #3
     e5c:	1a5b      	subs	r3, r3, r1
     e5e:	009b      	lsls	r3, r3, #2
     e60:	4a2e      	ldr	r2, [pc, #184]	; (f1c <_adc_init+0x124>)
     e62:	18d3      	adds	r3, r2, r3
     e64:	891b      	ldrh	r3, [r3, #8]
}

static inline void hri_adc_write_CTRLC_reg(const void *const hw, hri_adc_ctrlc_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLC.reg = data;
     e66:	8143      	strh	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     e68:	8c03      	ldrh	r3, [r0, #32]
     e6a:	055b      	lsls	r3, r3, #21
     e6c:	d1fc      	bne.n	e68 <_adc_init+0x70>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     e6e:	00cb      	lsls	r3, r1, #3
     e70:	1a5b      	subs	r3, r3, r1
     e72:	009b      	lsls	r3, r3, #2
     e74:	4a29      	ldr	r2, [pc, #164]	; (f1c <_adc_init+0x124>)
     e76:	18d3      	adds	r3, r2, r3
     e78:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
     e7a:	7303      	strb	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     e7c:	8c03      	ldrh	r3, [r0, #32]
     e7e:	055b      	lsls	r3, r3, #21
     e80:	d1fc      	bne.n	e7c <_adc_init+0x84>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     e82:	00cb      	lsls	r3, r1, #3
     e84:	1a5b      	subs	r3, r3, r1
     e86:	009b      	lsls	r3, r3, #2
     e88:	4a24      	ldr	r2, [pc, #144]	; (f1c <_adc_init+0x124>)
     e8a:	18d3      	adds	r3, r2, r3
     e8c:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
     e8e:	7343      	strb	r3, [r0, #13]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     e90:	8c03      	ldrh	r3, [r0, #32]
     e92:	055b      	lsls	r3, r3, #21
     e94:	d1fc      	bne.n	e90 <_adc_init+0x98>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     e96:	00cb      	lsls	r3, r1, #3
     e98:	1a5b      	subs	r3, r3, r1
     e9a:	009b      	lsls	r3, r3, #2
     e9c:	4a1f      	ldr	r2, [pc, #124]	; (f1c <_adc_init+0x124>)
     e9e:	18d3      	adds	r3, r2, r3
     ea0:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
     ea2:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ea4:	2240      	movs	r2, #64	; 0x40
     ea6:	8c03      	ldrh	r3, [r0, #32]
     ea8:	4213      	tst	r3, r2
     eaa:	d1fc      	bne.n	ea6 <_adc_init+0xae>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     eac:	00cb      	lsls	r3, r1, #3
     eae:	1a5b      	subs	r3, r3, r1
     eb0:	009b      	lsls	r3, r3, #2
     eb2:	4a1a      	ldr	r2, [pc, #104]	; (f1c <_adc_init+0x124>)
     eb4:	18d3      	adds	r3, r2, r3
     eb6:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
     eb8:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     eba:	2280      	movs	r2, #128	; 0x80
     ebc:	8c03      	ldrh	r3, [r0, #32]
     ebe:	4213      	tst	r3, r2
     ec0:	d1fc      	bne.n	ebc <_adc_init+0xc4>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     ec2:	00cb      	lsls	r3, r1, #3
     ec4:	1a5b      	subs	r3, r3, r1
     ec6:	009b      	lsls	r3, r3, #2
     ec8:	4a14      	ldr	r2, [pc, #80]	; (f1c <_adc_init+0x124>)
     eca:	18d3      	adds	r3, r2, r3
     ecc:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
     ece:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ed0:	2280      	movs	r2, #128	; 0x80
     ed2:	0052      	lsls	r2, r2, #1
     ed4:	8c03      	ldrh	r3, [r0, #32]
     ed6:	4213      	tst	r3, r2
     ed8:	d1fc      	bne.n	ed4 <_adc_init+0xdc>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     eda:	00cb      	lsls	r3, r1, #3
     edc:	1a5b      	subs	r3, r3, r1
     ede:	009b      	lsls	r3, r3, #2
     ee0:	4a0e      	ldr	r2, [pc, #56]	; (f1c <_adc_init+0x124>)
     ee2:	18d3      	adds	r3, r2, r3
     ee4:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
     ee6:	8283      	strh	r3, [r0, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ee8:	2280      	movs	r2, #128	; 0x80
     eea:	0092      	lsls	r2, r2, #2
     eec:	8c03      	ldrh	r3, [r0, #32]
     eee:	4213      	tst	r3, r2
     ef0:	d1fc      	bne.n	eec <_adc_init+0xf4>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     ef2:	4c0a      	ldr	r4, [pc, #40]	; (f1c <_adc_init+0x124>)
     ef4:	00cb      	lsls	r3, r1, #3
     ef6:	1a5a      	subs	r2, r3, r1
     ef8:	0092      	lsls	r2, r2, #2
     efa:	18a2      	adds	r2, r4, r2
     efc:	7d12      	ldrb	r2, [r2, #20]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
     efe:	7702      	strb	r2, [r0, #28]
}

static inline void hri_adc_write_SEQCTRL_reg(const void *const hw, hri_adc_seqctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SEQCTRL.reg = data;
     f00:	2200      	movs	r2, #0
     f02:	6282      	str	r2, [r0, #40]	; 0x28
	hri_adc_write_SEQCTRL_reg(hw, _adcs[i].seq_ctrl);
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     f04:	1a59      	subs	r1, r3, r1
     f06:	0089      	lsls	r1, r1, #2
     f08:	1861      	adds	r1, r4, r1
     f0a:	784b      	ldrb	r3, [r1, #1]
	((Adc *)hw)->CTRLA.reg = data;
     f0c:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f0e:	3203      	adds	r2, #3
     f10:	8c03      	ldrh	r3, [r0, #32]
     f12:	4213      	tst	r3, r2
     f14:	d1fc      	bne.n	f10 <_adc_init+0x118>

	return ERR_NONE;
}
     f16:	2000      	movs	r0, #0
     f18:	bd10      	pop	{r4, pc}
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	00005ec8 	.word	0x00005ec8

00000f20 <_adc_get_regs>:
{
     f20:	b510      	push	{r4, lr}
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
     f22:	4b07      	ldr	r3, [pc, #28]	; (f40 <_adc_get_regs+0x20>)
     f24:	469c      	mov	ip, r3
     f26:	4460      	add	r0, ip
     f28:	0a80      	lsrs	r0, r0, #10
		if (_adcs[i].number == n) {
     f2a:	b2c0      	uxtb	r0, r0
     f2c:	2800      	cmp	r0, #0
     f2e:	d004      	beq.n	f3a <_adc_get_regs+0x1a>
	ASSERT(false);
     f30:	228d      	movs	r2, #141	; 0x8d
     f32:	4904      	ldr	r1, [pc, #16]	; (f44 <_adc_get_regs+0x24>)
     f34:	2000      	movs	r0, #0
     f36:	4b04      	ldr	r3, [pc, #16]	; (f48 <_adc_get_regs+0x28>)
     f38:	4798      	blx	r3
}
     f3a:	2000      	movs	r0, #0
     f3c:	bd10      	pop	{r4, pc}
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	bdffbc00 	.word	0xbdffbc00
     f44:	00005ee4 	.word	0x00005ee4
     f48:	00000ccd 	.word	0x00000ccd

00000f4c <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
     f4c:	b570      	push	{r4, r5, r6, lr}
     f4e:	0005      	movs	r5, r0
     f50:	000c      	movs	r4, r1
	ASSERT(device);
     f52:	1e43      	subs	r3, r0, #1
     f54:	4198      	sbcs	r0, r3
     f56:	b2c0      	uxtb	r0, r0
     f58:	22d4      	movs	r2, #212	; 0xd4
     f5a:	4906      	ldr	r1, [pc, #24]	; (f74 <_adc_sync_init+0x28>)
     f5c:	4b06      	ldr	r3, [pc, #24]	; (f78 <_adc_sync_init+0x2c>)
     f5e:	4798      	blx	r3

	device->hw = hw;
     f60:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
     f62:	0020      	movs	r0, r4
     f64:	4b05      	ldr	r3, [pc, #20]	; (f7c <_adc_sync_init+0x30>)
     f66:	4798      	blx	r3
     f68:	0001      	movs	r1, r0
     f6a:	0020      	movs	r0, r4
     f6c:	4b04      	ldr	r3, [pc, #16]	; (f80 <_adc_sync_init+0x34>)
     f6e:	4798      	blx	r3
}
     f70:	bd70      	pop	{r4, r5, r6, pc}
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	00005ee4 	.word	0x00005ee4
     f78:	00000ccd 	.word	0x00000ccd
     f7c:	00000f21 	.word	0x00000f21
     f80:	00000df9 	.word	0x00000df9

00000f84 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
     f84:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
     f86:	7813      	ldrb	r3, [r2, #0]
     f88:	2102      	movs	r1, #2
     f8a:	430b      	orrs	r3, r1
     f8c:	7013      	strb	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f8e:	3101      	adds	r1, #1
     f90:	8c13      	ldrh	r3, [r2, #32]
     f92:	420b      	tst	r3, r1
     f94:	d1fc      	bne.n	f90 <_adc_sync_enable_channel+0xc>
}
     f96:	4770      	bx	lr

00000f98 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
     f98:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLC.reg;
     f9a:	8958      	ldrh	r0, [r3, #10]
	tmp = (tmp & ADC_CTRLC_RESSEL_Msk) >> ADC_CTRLC_RESSEL_Pos;
     f9c:	0680      	lsls	r0, r0, #26
     f9e:	0f80      	lsrs	r0, r0, #30
     fa0:	3803      	subs	r0, #3
     fa2:	1e43      	subs	r3, r0, #1
     fa4:	4198      	sbcs	r0, r3
     fa6:	3001      	adds	r0, #1
}
     fa8:	4770      	bx	lr

00000faa <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
     faa:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
     fac:	7998      	ldrb	r0, [r3, #6]
     fae:	2301      	movs	r3, #1
     fb0:	4018      	ands	r0, r3
}
     fb2:	4770      	bx	lr

00000fb4 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
     fb4:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
     fb6:	7e13      	ldrb	r3, [r2, #24]
     fb8:	2102      	movs	r1, #2
     fba:	430b      	orrs	r3, r1
     fbc:	7613      	strb	r3, [r2, #24]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     fbe:	8c13      	ldrh	r3, [r2, #32]
     fc0:	055b      	lsls	r3, r3, #21
     fc2:	d1fc      	bne.n	fbe <_adc_sync_convert+0xa>
}
     fc4:	4770      	bx	lr

00000fc6 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
     fc6:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
     fc8:	8c98      	ldrh	r0, [r3, #36]	; 0x24
     fca:	b280      	uxth	r0, r0
}
     fcc:	4770      	bx	lr

00000fce <_adc_get_adc_sync>:
 * \brief Retrieve ADC sync helper functions
 */
void *_adc_get_adc_sync(void)
{
	return (void *)NULL;
}
     fce:	2000      	movs	r0, #0
     fd0:	4770      	bx	lr
	...

00000fd4 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
     fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev->hw = hw;
     fd6:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
     fd8:	698b      	ldr	r3, [r1, #24]
     fda:	2201      	movs	r2, #1
     fdc:	4313      	orrs	r3, r2
     fde:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
     fe0:	6802      	ldr	r2, [r0, #0]

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
     fe2:	2401      	movs	r4, #1
	tmp = ((Can *)hw)->CCCR.reg;
     fe4:	6993      	ldr	r3, [r2, #24]
     fe6:	421c      	tst	r4, r3
     fe8:	d0fc      	beq.n	fe4 <_can_async_init+0x10>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
     fea:	6993      	ldr	r3, [r2, #24]
     fec:	2402      	movs	r4, #2
     fee:	4323      	orrs	r3, r4
     ff0:	6193      	str	r3, [r2, #24]
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);

#ifdef CONF_CAN0_ENABLED
	if (hw == CAN0) {
     ff2:	4b34      	ldr	r3, [pc, #208]	; (10c4 <_can_async_init+0xf0>)
     ff4:	4299      	cmp	r1, r3
     ff6:	d010      	beq.n	101a <_can_async_init+0x46>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
     ff8:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
     ffa:	6993      	ldr	r3, [r2, #24]
     ffc:	2102      	movs	r1, #2
     ffe:	438b      	bics	r3, r1
    1000:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    1002:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    1004:	6993      	ldr	r3, [r2, #24]
    1006:	3901      	subs	r1, #1
    1008:	438b      	bics	r3, r1
    100a:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    100c:	6801      	ldr	r1, [r0, #0]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    100e:	2201      	movs	r2, #1
	tmp = ((Can *)hw)->CCCR.reg;
    1010:	698b      	ldr	r3, [r1, #24]
    1012:	421a      	tst	r2, r3
    1014:	d1fc      	bne.n	1010 <_can_async_init+0x3c>
	};

	return ERR_NONE;
}
    1016:	2000      	movs	r0, #0
    1018:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_can0_dev    = dev;
    101a:	4b2b      	ldr	r3, [pc, #172]	; (10c8 <_can_async_init+0xf4>)
    101c:	001a      	movs	r2, r3
    101e:	c201      	stmia	r2!, {r0}
		dev->context = (void *)&_can0_context;
    1020:	492a      	ldr	r1, [pc, #168]	; (10cc <_can_async_init+0xf8>)
    1022:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN0_CCCR_REG);
    1024:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    1026:	698c      	ldr	r4, [r1, #24]
    1028:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN0_MRCFG_REG);
    102a:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
    102c:	2400      	movs	r4, #0
    102e:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN0_BTP_REG);
    1030:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    1032:	4d27      	ldr	r5, [pc, #156]	; (10d0 <_can_async_init+0xfc>)
    1034:	61cd      	str	r5, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN0_DBTP_REG);
    1036:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
    1038:	4d26      	ldr	r5, [pc, #152]	; (10d4 <_can_async_init+0x100>)
    103a:	60cd      	str	r5, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN0_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo));
    103c:	4d26      	ldr	r5, [pc, #152]	; (10d8 <_can_async_init+0x104>)
    103e:	042d      	lsls	r5, r5, #16
    1040:	0c2d      	lsrs	r5, r5, #16
    1042:	2180      	movs	r1, #128	; 0x80
    1044:	0289      	lsls	r1, r1, #10
    1046:	430d      	orrs	r5, r1
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    1048:	26a0      	movs	r6, #160	; 0xa0
    104a:	6807      	ldr	r7, [r0, #0]
    104c:	51bd      	str	r5, [r7, r6]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    104e:	25bc      	movs	r5, #188	; 0xbc
    1050:	6806      	ldr	r6, [r0, #0]
    1052:	5174      	str	r4, [r6, r5]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    1054:	350c      	adds	r5, #12
    1056:	6806      	ldr	r6, [r0, #0]
    1058:	5174      	str	r4, [r6, r5]
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN0_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can0_tx_fifo));
    105a:	4d20      	ldr	r5, [pc, #128]	; (10dc <_can_async_init+0x108>)
    105c:	042d      	lsls	r5, r5, #16
    105e:	0c2d      	lsrs	r5, r5, #16
    1060:	2680      	movs	r6, #128	; 0x80
    1062:	04b6      	lsls	r6, r6, #18
    1064:	4335      	orrs	r5, r6
	((Can *)hw)->TXBC.reg = data;
    1066:	26c0      	movs	r6, #192	; 0xc0
    1068:	6807      	ldr	r7, [r0, #0]
    106a:	51bd      	str	r5, [r7, r6]
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN0_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo));
    106c:	0412      	lsls	r2, r2, #16
    106e:	0c12      	lsrs	r2, r2, #16
    1070:	430a      	orrs	r2, r1
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    1072:	25f0      	movs	r5, #240	; 0xf0
    1074:	6806      	ldr	r6, [r0, #0]
    1076:	5172      	str	r2, [r6, r5]
	((Can *)hw)->GFC.reg = data;
    1078:	3d70      	subs	r5, #112	; 0x70
    107a:	2228      	movs	r2, #40	; 0x28
    107c:	6806      	ldr	r6, [r0, #0]
    107e:	5172      	str	r2, [r6, r5]
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN0_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can0_rx_std_filter));
    1080:	001a      	movs	r2, r3
    1082:	3214      	adds	r2, #20
    1084:	0412      	lsls	r2, r2, #16
    1086:	0c12      	lsrs	r2, r2, #16
    1088:	430a      	orrs	r2, r1
	((Can *)hw)->SIDFC.reg = data;
    108a:	2684      	movs	r6, #132	; 0x84
    108c:	6807      	ldr	r7, [r0, #0]
    108e:	51ba      	str	r2, [r7, r6]
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN0_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can0_rx_ext_filter));
    1090:	331c      	adds	r3, #28
    1092:	041b      	lsls	r3, r3, #16
    1094:	0c1b      	lsrs	r3, r3, #16
    1096:	430b      	orrs	r3, r1
	((Can *)hw)->XIDFC.reg = data;
    1098:	2288      	movs	r2, #136	; 0x88
    109a:	6801      	ldr	r1, [r0, #0]
    109c:	508b      	str	r3, [r1, r2]
	((Can *)hw)->XIDAM.reg = data;
    109e:	2390      	movs	r3, #144	; 0x90
    10a0:	6802      	ldr	r2, [r0, #0]
    10a2:	50d4      	str	r4, [r2, r3]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10a4:	4b0e      	ldr	r3, [pc, #56]	; (10e0 <_can_async_init+0x10c>)
    10a6:	2280      	movs	r2, #128	; 0x80
    10a8:	0212      	lsls	r2, r2, #8
    10aa:	515a      	str	r2, [r3, r5]
  __ASM volatile ("dsb 0xF":::"memory");
    10ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10b0:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10b4:	21c0      	movs	r1, #192	; 0xc0
    10b6:	0049      	lsls	r1, r1, #1
    10b8:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10ba:	601a      	str	r2, [r3, #0]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    10bc:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
    10be:	2201      	movs	r2, #1
    10c0:	65da      	str	r2, [r3, #92]	; 0x5c
    10c2:	e799      	b.n	ff8 <_can_async_init+0x24>
    10c4:	42001c00 	.word	0x42001c00
    10c8:	20000194 	.word	0x20000194
    10cc:	20000000 	.word	0x20000000
    10d0:	06020a07 	.word	0x06020a07
    10d4:	00000a33 	.word	0x00000a33
    10d8:	20000360 	.word	0x20000360
    10dc:	20000380 	.word	0x20000380
    10e0:	e000e100 	.word	0xe000e100

000010e4 <CAN0_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN0_Handler(void)
{
    10e4:	b570      	push	{r4, r5, r6, lr}
	struct _can_async_device *dev = _can0_dev;
    10e6:	4b19      	ldr	r3, [pc, #100]	; (114c <CAN0_Handler+0x68>)
    10e8:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    10ea:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
    10ec:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
    10ee:	07e3      	lsls	r3, r4, #31
    10f0:	d414      	bmi.n	111c <CAN0_Handler+0x38>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
    10f2:	05a3      	lsls	r3, r4, #22
    10f4:	d416      	bmi.n	1124 <CAN0_Handler+0x40>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
    10f6:	01a3      	lsls	r3, r4, #6
    10f8:	d418      	bmi.n	112c <CAN0_Handler+0x48>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
    10fa:	01e3      	lsls	r3, r4, #7
    10fc:	d41b      	bmi.n	1136 <CAN0_Handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
    10fe:	0223      	lsls	r3, r4, #8
    1100:	d507      	bpl.n	1112 <CAN0_Handler+0x2e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    1102:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    1104:	6c59      	ldr	r1, [r3, #68]	; 0x44
    1106:	0689      	lsls	r1, r1, #26
    1108:	0fc9      	lsrs	r1, r1, #31
    110a:	3101      	adds	r1, #1
    110c:	0028      	movs	r0, r5
    110e:	68eb      	ldr	r3, [r5, #12]
    1110:	4798      	blx	r3
	}

	if (ir & CAN_IR_RF0L) {
    1112:	0723      	lsls	r3, r4, #28
    1114:	d414      	bmi.n	1140 <CAN0_Handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
    1116:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
    1118:	651c      	str	r4, [r3, #80]	; 0x50
}
    111a:	bd70      	pop	{r4, r5, r6, pc}
		dev->cb.rx_done(dev);
    111c:	0028      	movs	r0, r5
    111e:	68ab      	ldr	r3, [r5, #8]
    1120:	4798      	blx	r3
    1122:	e7e6      	b.n	10f2 <CAN0_Handler+0xe>
		dev->cb.tx_done(dev);
    1124:	0028      	movs	r0, r5
    1126:	686b      	ldr	r3, [r5, #4]
    1128:	4798      	blx	r3
    112a:	e7e4      	b.n	10f6 <CAN0_Handler+0x12>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    112c:	2103      	movs	r1, #3
    112e:	0028      	movs	r0, r5
    1130:	68eb      	ldr	r3, [r5, #12]
    1132:	4798      	blx	r3
    1134:	e7e1      	b.n	10fa <CAN0_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    1136:	2100      	movs	r1, #0
    1138:	0028      	movs	r0, r5
    113a:	68eb      	ldr	r3, [r5, #12]
    113c:	4798      	blx	r3
    113e:	e7de      	b.n	10fe <CAN0_Handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    1140:	2104      	movs	r1, #4
    1142:	0028      	movs	r0, r5
    1144:	68eb      	ldr	r3, [r5, #12]
    1146:	4798      	blx	r3
    1148:	e7e5      	b.n	1116 <CAN0_Handler+0x32>
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	20000194 	.word	0x20000194

00001150 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    1150:	b510      	push	{r4, lr}
    1152:	0003      	movs	r3, r0
		return (us * (freq / 10000) + 299) / 300;
    1154:	20c8      	movs	r0, #200	; 0xc8
    1156:	0080      	lsls	r0, r0, #2
    1158:	4358      	muls	r0, r3
    115a:	302c      	adds	r0, #44	; 0x2c
    115c:	30ff      	adds	r0, #255	; 0xff
    115e:	2196      	movs	r1, #150	; 0x96
    1160:	0049      	lsls	r1, r1, #1
    1162:	4b01      	ldr	r3, [pc, #4]	; (1168 <_get_cycles_for_us+0x18>)
    1164:	4798      	blx	r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1166:	bd10      	pop	{r4, pc}
    1168:	00001217 	.word	0x00001217

0000116c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    116c:	b510      	push	{r4, lr}
    116e:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
    1170:	20c8      	movs	r0, #200	; 0xc8
    1172:	0080      	lsls	r0, r0, #2
    1174:	4358      	muls	r0, r3
    1176:	3002      	adds	r0, #2
    1178:	2103      	movs	r1, #3
    117a:	4b03      	ldr	r3, [pc, #12]	; (1188 <_get_cycles_for_ms+0x1c>)
    117c:	4798      	blx	r3
    117e:	0003      	movs	r3, r0
    1180:	0080      	lsls	r0, r0, #2
    1182:	18c0      	adds	r0, r0, r3
    1184:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1186:	bd10      	pop	{r4, pc}
    1188:	00001217 	.word	0x00001217

0000118c <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    118c:	3901      	subs	r1, #1
    118e:	d8fd      	bhi.n	118c <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    1190:	4770      	bx	lr
	...

00001194 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1194:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1196:	4b08      	ldr	r3, [pc, #32]	; (11b8 <_init_chip+0x24>)
    1198:	685a      	ldr	r2, [r3, #4]
    119a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    119c:	4b07      	ldr	r3, [pc, #28]	; (11bc <_init_chip+0x28>)
    119e:	4798      	blx	r3
	_oscctrl_init_sources();
    11a0:	4b07      	ldr	r3, [pc, #28]	; (11c0 <_init_chip+0x2c>)
    11a2:	4798      	blx	r3
	_mclk_init();
    11a4:	4b07      	ldr	r3, [pc, #28]	; (11c4 <_init_chip+0x30>)
    11a6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    11a8:	4b07      	ldr	r3, [pc, #28]	; (11c8 <_init_chip+0x34>)
    11aa:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    11ac:	20ff      	movs	r0, #255	; 0xff
    11ae:	4b07      	ldr	r3, [pc, #28]	; (11cc <_init_chip+0x38>)
    11b0:	4798      	blx	r3

	_div_init();
    11b2:	4b07      	ldr	r3, [pc, #28]	; (11d0 <_init_chip+0x3c>)
    11b4:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    11b6:	bd10      	pop	{r4, pc}
    11b8:	41004000 	.word	0x41004000
    11bc:	00001305 	.word	0x00001305
    11c0:	0000131d 	.word	0x0000131d
    11c4:	000012f9 	.word	0x000012f9
    11c8:	0000135d 	.word	0x0000135d
    11cc:	000012bd 	.word	0x000012bd
    11d0:	000011d5 	.word	0x000011d5

000011d4 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
    11d4:	2290      	movs	r2, #144	; 0x90
    11d6:	05d2      	lsls	r2, r2, #23
    11d8:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
    11da:	2102      	movs	r1, #2
    11dc:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
    11de:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
    11e0:	4770      	bx	lr

000011e2 <__aeabi_idiv>:

/**
 * \brief Do signed division
 */
int32_t __aeabi_idiv(int32_t numerator, int32_t denominator)
{
    11e2:	b510      	push	{r4, lr}
    11e4:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    11e6:	f3ef 8310 	mrs	r3, PRIMASK
	int32_t res;
	_DIVAS_CRITICAL_ENTER();
    11ea:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    11ec:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
    11ee:	2390      	movs	r3, #144	; 0x90
    11f0:	05db      	lsls	r3, r3, #23
    11f2:	781a      	ldrb	r2, [r3, #0]
    11f4:	2401      	movs	r4, #1
    11f6:	4322      	orrs	r2, r4
    11f8:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
    11fa:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    11fc:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    11fe:	001a      	movs	r2, r3
    1200:	7913      	ldrb	r3, [r2, #4]
    1202:	07db      	lsls	r3, r3, #31
    1204:	d4fc      	bmi.n	1200 <__aeabi_idiv+0x1e>
	_divas_div(1, numerator, denominator);
	res = _divas_result32();
    1206:	2390      	movs	r3, #144	; 0x90
    1208:	05db      	lsls	r3, r3, #23
    120a:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
    120c:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    120e:	f383 8810 	msr	PRIMASK, r3
	return res;
}
    1212:	b002      	add	sp, #8
    1214:	bd10      	pop	{r4, pc}

00001216 <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
    1216:	b510      	push	{r4, lr}
    1218:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    121a:	f3ef 8310 	mrs	r3, PRIMASK
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
    121e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1220:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
    1222:	2390      	movs	r3, #144	; 0x90
    1224:	05db      	lsls	r3, r3, #23
    1226:	781a      	ldrb	r2, [r3, #0]
    1228:	2401      	movs	r4, #1
    122a:	43a2      	bics	r2, r4
    122c:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
    122e:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    1230:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    1232:	001a      	movs	r2, r3
    1234:	7913      	ldrb	r3, [r2, #4]
    1236:	07db      	lsls	r3, r3, #31
    1238:	d4fc      	bmi.n	1234 <__aeabi_uidiv+0x1e>
	_divas_div(0, numerator, denominator);
	res = _divas_result32();
    123a:	2390      	movs	r3, #144	; 0x90
    123c:	05db      	lsls	r3, r3, #23
    123e:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
    1240:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1242:	f383 8810 	msr	PRIMASK, r3
	return res;
}
    1246:	b002      	add	sp, #8
    1248:	bd10      	pop	{r4, pc}
	...

0000124c <__aeabi_idivmod>:

/**
 * \brief Do signed division, return result and remainder
 */
uint64_t __aeabi_idivmod(int numerator, int denominator)
{
    124c:	b510      	push	{r4, lr}
    124e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1250:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
    1254:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1256:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
    1258:	2390      	movs	r3, #144	; 0x90
    125a:	05db      	lsls	r3, r3, #23
    125c:	781a      	ldrb	r2, [r3, #0]
    125e:	2401      	movs	r4, #1
    1260:	4322      	orrs	r2, r4
    1262:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
    1264:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    1266:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    1268:	001a      	movs	r2, r3
    126a:	7913      	ldrb	r3, [r2, #4]
    126c:	07db      	lsls	r3, r3, #31
    126e:	d4fc      	bmi.n	126a <__aeabi_idivmod+0x1e>
	_divas_div(1, numerator, denominator);
	res = _divas_result64();
    1270:	4b03      	ldr	r3, [pc, #12]	; (1280 <__aeabi_idivmod+0x34>)
    1272:	6818      	ldr	r0, [r3, #0]
    1274:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
    1276:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1278:	f383 8810 	msr	PRIMASK, r3
	return res;
}
    127c:	b002      	add	sp, #8
    127e:	bd10      	pop	{r4, pc}
    1280:	48000010 	.word	0x48000010

00001284 <__aeabi_uidivmod>:

/**
 * \brief Do unsigned division, return result and remainder
 */
uint64_t __aeabi_uidivmod(unsigned numerator, unsigned denominator)
{
    1284:	b510      	push	{r4, lr}
    1286:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1288:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
    128c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    128e:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
    1290:	2390      	movs	r3, #144	; 0x90
    1292:	05db      	lsls	r3, r3, #23
    1294:	781a      	ldrb	r2, [r3, #0]
    1296:	2401      	movs	r4, #1
    1298:	43a2      	bics	r2, r4
    129a:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
    129c:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    129e:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    12a0:	001a      	movs	r2, r3
    12a2:	7913      	ldrb	r3, [r2, #4]
    12a4:	07db      	lsls	r3, r3, #31
    12a6:	d4fc      	bmi.n	12a2 <__aeabi_uidivmod+0x1e>
	_divas_div(0, numerator, denominator);
	res = _divas_result64();
    12a8:	4b03      	ldr	r3, [pc, #12]	; (12b8 <__aeabi_uidivmod+0x34>)
    12aa:	6818      	ldr	r0, [r3, #0]
    12ac:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
    12ae:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    12b0:	f383 8810 	msr	PRIMASK, r3
	return res;
}
    12b4:	b002      	add	sp, #8
    12b6:	bd10      	pop	{r4, pc}
    12b8:	48000010 	.word	0x48000010

000012bc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    12bc:	07c3      	lsls	r3, r0, #31
    12be:	d507      	bpl.n	12d0 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    12c0:	4a09      	ldr	r2, [pc, #36]	; (12e8 <_gclk_init_generators_by_fref+0x2c>)
    12c2:	4b0a      	ldr	r3, [pc, #40]	; (12ec <_gclk_init_generators_by_fref+0x30>)
    12c4:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    12c6:	0019      	movs	r1, r3
    12c8:	4a09      	ldr	r2, [pc, #36]	; (12f0 <_gclk_init_generators_by_fref+0x34>)
    12ca:	684b      	ldr	r3, [r1, #4]
    12cc:	4213      	tst	r3, r2
    12ce:	d1fc      	bne.n	12ca <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    12d0:	0783      	lsls	r3, r0, #30
    12d2:	d507      	bpl.n	12e4 <_gclk_init_generators_by_fref+0x28>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    12d4:	4a07      	ldr	r2, [pc, #28]	; (12f4 <_gclk_init_generators_by_fref+0x38>)
    12d6:	4b05      	ldr	r3, [pc, #20]	; (12ec <_gclk_init_generators_by_fref+0x30>)
    12d8:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    12da:	0019      	movs	r1, r3
    12dc:	4a04      	ldr	r2, [pc, #16]	; (12f0 <_gclk_init_generators_by_fref+0x34>)
    12de:	684b      	ldr	r3, [r1, #4]
    12e0:	4213      	tst	r3, r2
    12e2:	d1fc      	bne.n	12de <_gclk_init_generators_by_fref+0x22>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    12e4:	4770      	bx	lr
    12e6:	46c0      	nop			; (mov r8, r8)
    12e8:	00010106 	.word	0x00010106
    12ec:	40001c00 	.word	0x40001c00
    12f0:	000007fd 	.word	0x000007fd
    12f4:	00080106 	.word	0x00080106

000012f8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    12f8:	2201      	movs	r2, #1
    12fa:	4b01      	ldr	r3, [pc, #4]	; (1300 <_mclk_init+0x8>)
    12fc:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    12fe:	4770      	bx	lr
    1300:	40000800 	.word	0x40000800

00001304 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1304:	4b04      	ldr	r3, [pc, #16]	; (1318 <_osc32kctrl_init_sources+0x14>)
    1306:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1308:	21f8      	movs	r1, #248	; 0xf8
    130a:	0149      	lsls	r1, r1, #5
    130c:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    130e:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1310:	2201      	movs	r2, #1
    1312:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    1314:	4770      	bx	lr
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	40001400 	.word	0x40001400

0000131c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
    131c:	4b0e      	ldr	r3, [pc, #56]	; (1358 <_oscctrl_init_sources+0x3c>)
    131e:	2202      	movs	r2, #2
    1320:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
    1322:	3203      	adds	r2, #3
    1324:	755a      	strb	r2, [r3, #21]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
    1326:	0019      	movs	r1, r3
    1328:	3a01      	subs	r2, #1
    132a:	698b      	ldr	r3, [r1, #24]
    132c:	421a      	tst	r2, r3
    132e:	d1fc      	bne.n	132a <_oscctrl_init_sources+0xe>
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
    1330:	4909      	ldr	r1, [pc, #36]	; (1358 <_oscctrl_init_sources+0x3c>)
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
    1332:	2204      	movs	r2, #4
    1334:	698b      	ldr	r3, [r1, #24]
    1336:	421a      	tst	r2, r3
    1338:	d1fc      	bne.n	1334 <_oscctrl_init_sources+0x18>
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
    133a:	2207      	movs	r2, #7
    133c:	4b06      	ldr	r3, [pc, #24]	; (1358 <_oscctrl_init_sources+0x3c>)
    133e:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
    1340:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
    1342:	3209      	adds	r2, #9
    1344:	68cb      	ldr	r3, [r1, #12]
    1346:	421a      	tst	r2, r3
    1348:	d0fc      	beq.n	1344 <_oscctrl_init_sources+0x28>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
    134a:	4a03      	ldr	r2, [pc, #12]	; (1358 <_oscctrl_init_sources+0x3c>)
    134c:	7d13      	ldrb	r3, [r2, #20]
    134e:	2180      	movs	r1, #128	; 0x80
    1350:	430b      	orrs	r3, r1
    1352:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1354:	4770      	bx	lr
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	40001000 	.word	0x40001000

0000135c <_oscctrl_init_referenced_generators>:
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    135c:	4770      	bx	lr

0000135e <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    135e:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1360:	07db      	lsls	r3, r3, #31
    1362:	d409      	bmi.n	1378 <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1364:	6803      	ldr	r3, [r0, #0]
    1366:	2202      	movs	r2, #2
    1368:	4313      	orrs	r3, r2
    136a:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    136c:	3201      	adds	r2, #1
    136e:	69c3      	ldr	r3, [r0, #28]
    1370:	421a      	tst	r2, r3
    1372:	d1fc      	bne.n	136e <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1374:	2000      	movs	r0, #0
}
    1376:	4770      	bx	lr
		return ERR_BUSY;
    1378:	2004      	movs	r0, #4
    137a:	4240      	negs	r0, r0
    137c:	e7fb      	b.n	1376 <_spi_sync_enable+0x18>
	...

00001380 <_usart_init>:
{
    1380:	b510      	push	{r4, lr}
    1382:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1384:	4b1f      	ldr	r3, [pc, #124]	; (1404 <_usart_init+0x84>)
    1386:	18c3      	adds	r3, r0, r3
    1388:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    138a:	b2db      	uxtb	r3, r3
    138c:	2b04      	cmp	r3, #4
    138e:	d004      	beq.n	139a <_usart_init+0x1a>
	ASSERT(false);
    1390:	4a1d      	ldr	r2, [pc, #116]	; (1408 <_usart_init+0x88>)
    1392:	491e      	ldr	r1, [pc, #120]	; (140c <_usart_init+0x8c>)
    1394:	2000      	movs	r0, #0
    1396:	4b1e      	ldr	r3, [pc, #120]	; (1410 <_usart_init+0x90>)
    1398:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    139a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    139c:	07db      	lsls	r3, r3, #31
    139e:	d418      	bmi.n	13d2 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13a0:	2203      	movs	r2, #3
    13a2:	69e3      	ldr	r3, [r4, #28]
    13a4:	421a      	tst	r2, r3
    13a6:	d1fc      	bne.n	13a2 <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    13a8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    13aa:	079b      	lsls	r3, r3, #30
    13ac:	d50b      	bpl.n	13c6 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    13ae:	6823      	ldr	r3, [r4, #0]
    13b0:	2202      	movs	r2, #2
    13b2:	4393      	bics	r3, r2
    13b4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13b6:	3201      	adds	r2, #1
    13b8:	69e3      	ldr	r3, [r4, #28]
    13ba:	421a      	tst	r2, r3
    13bc:	d1fc      	bne.n	13b8 <_usart_init+0x38>
    13be:	2202      	movs	r2, #2
    13c0:	69e3      	ldr	r3, [r4, #28]
    13c2:	421a      	tst	r2, r3
    13c4:	d1fc      	bne.n	13c0 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    13c6:	2305      	movs	r3, #5
    13c8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13ca:	2203      	movs	r2, #3
    13cc:	69e3      	ldr	r3, [r4, #28]
    13ce:	421a      	tst	r2, r3
    13d0:	d1fc      	bne.n	13cc <_usart_init+0x4c>
    13d2:	2201      	movs	r2, #1
    13d4:	69e3      	ldr	r3, [r4, #28]
    13d6:	421a      	tst	r2, r3
    13d8:	d1fc      	bne.n	13d4 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    13da:	4b0e      	ldr	r3, [pc, #56]	; (1414 <_usart_init+0x94>)
    13dc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13de:	2203      	movs	r2, #3
    13e0:	69e3      	ldr	r3, [r4, #28]
    13e2:	421a      	tst	r2, r3
    13e4:	d1fc      	bne.n	13e0 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    13e6:	23c0      	movs	r3, #192	; 0xc0
    13e8:	029b      	lsls	r3, r3, #10
    13ea:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13ec:	2207      	movs	r2, #7
    13ee:	69e3      	ldr	r3, [r4, #28]
    13f0:	421a      	tst	r2, r3
    13f2:	d1fc      	bne.n	13ee <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    13f4:	4b08      	ldr	r3, [pc, #32]	; (1418 <_usart_init+0x98>)
    13f6:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    13f8:	2300      	movs	r3, #0
    13fa:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    13fc:	2230      	movs	r2, #48	; 0x30
    13fe:	54a3      	strb	r3, [r4, r2]
}
    1400:	2000      	movs	r0, #0
    1402:	bd10      	pop	{r4, pc}
    1404:	bdfffc00 	.word	0xbdfffc00
    1408:	0000025e 	.word	0x0000025e
    140c:	00005efc 	.word	0x00005efc
    1410:	00000ccd 	.word	0x00000ccd
    1414:	40100004 	.word	0x40100004
    1418:	ffffd8ad 	.word	0xffffd8ad

0000141c <_usart_async_init>:
{
    141c:	b570      	push	{r4, r5, r6, lr}
    141e:	0005      	movs	r5, r0
    1420:	000c      	movs	r4, r1
	ASSERT(device);
    1422:	1e43      	subs	r3, r0, #1
    1424:	4198      	sbcs	r0, r3
    1426:	b2c0      	uxtb	r0, r0
    1428:	22c4      	movs	r2, #196	; 0xc4
    142a:	4914      	ldr	r1, [pc, #80]	; (147c <_usart_async_init+0x60>)
    142c:	4b14      	ldr	r3, [pc, #80]	; (1480 <_usart_async_init+0x64>)
    142e:	4798      	blx	r3
	init_status = _usart_init(hw);
    1430:	0020      	movs	r0, r4
    1432:	4b14      	ldr	r3, [pc, #80]	; (1484 <_usart_async_init+0x68>)
    1434:	4798      	blx	r3
	if (init_status) {
    1436:	2800      	cmp	r0, #0
    1438:	d000      	beq.n	143c <_usart_async_init+0x20>
}
    143a:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    143c:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM4) {
    143e:	4b12      	ldr	r3, [pc, #72]	; (1488 <_usart_async_init+0x6c>)
    1440:	429c      	cmp	r4, r3
    1442:	d017      	beq.n	1474 <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1444:	4b11      	ldr	r3, [pc, #68]	; (148c <_usart_async_init+0x70>)
    1446:	469c      	mov	ip, r3
    1448:	4464      	add	r4, ip
    144a:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    144c:	3409      	adds	r4, #9
  if ((int32_t)(IRQn) >= 0)
    144e:	b2e3      	uxtb	r3, r4
    1450:	0622      	lsls	r2, r4, #24
    1452:	d4f2      	bmi.n	143a <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1454:	221f      	movs	r2, #31
    1456:	401a      	ands	r2, r3
    1458:	2301      	movs	r3, #1
    145a:	4093      	lsls	r3, r2
    145c:	4a0c      	ldr	r2, [pc, #48]	; (1490 <_usart_async_init+0x74>)
    145e:	2180      	movs	r1, #128	; 0x80
    1460:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1462:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1466:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    146a:	3101      	adds	r1, #1
    146c:	31ff      	adds	r1, #255	; 0xff
    146e:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1470:	6013      	str	r3, [r2, #0]
    1472:	e7e2      	b.n	143a <_usart_async_init+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    1474:	4b07      	ldr	r3, [pc, #28]	; (1494 <_usart_async_init+0x78>)
    1476:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1478:	230d      	movs	r3, #13
    147a:	e7eb      	b.n	1454 <_usart_async_init+0x38>
    147c:	00005efc 	.word	0x00005efc
    1480:	00000ccd 	.word	0x00000ccd
    1484:	00001381 	.word	0x00001381
    1488:	42001400 	.word	0x42001400
    148c:	bdfffc00 	.word	0xbdfffc00
    1490:	e000e100 	.word	0xe000e100
    1494:	200001c0 	.word	0x200001c0

00001498 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1498:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    149a:	6813      	ldr	r3, [r2, #0]
    149c:	2102      	movs	r1, #2
    149e:	430b      	orrs	r3, r1
    14a0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    14a2:	3101      	adds	r1, #1
    14a4:	69d3      	ldr	r3, [r2, #28]
    14a6:	4219      	tst	r1, r3
    14a8:	d1fc      	bne.n	14a4 <_usart_async_enable+0xc>
}
    14aa:	4770      	bx	lr

000014ac <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    14ac:	6983      	ldr	r3, [r0, #24]
    14ae:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    14b0:	8519      	strh	r1, [r3, #40]	; 0x28
}
    14b2:	4770      	bx	lr

000014b4 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    14b4:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    14b6:	2201      	movs	r2, #1
    14b8:	759a      	strb	r2, [r3, #22]
}
    14ba:	4770      	bx	lr

000014bc <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    14bc:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    14be:	2202      	movs	r2, #2
    14c0:	759a      	strb	r2, [r3, #22]
}
    14c2:	4770      	bx	lr

000014c4 <_usart_async_set_irq_state>:
{
    14c4:	b570      	push	{r4, r5, r6, lr}
    14c6:	0004      	movs	r4, r0
    14c8:	000d      	movs	r5, r1
    14ca:	0016      	movs	r6, r2
	ASSERT(device);
    14cc:	1e43      	subs	r3, r0, #1
    14ce:	4198      	sbcs	r0, r3
    14d0:	b2c0      	uxtb	r0, r0
    14d2:	4a16      	ldr	r2, [pc, #88]	; (152c <_usart_async_set_irq_state+0x68>)
    14d4:	4916      	ldr	r1, [pc, #88]	; (1530 <_usart_async_set_irq_state+0x6c>)
    14d6:	4b17      	ldr	r3, [pc, #92]	; (1534 <_usart_async_set_irq_state+0x70>)
    14d8:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    14da:	2302      	movs	r3, #2
    14dc:	002a      	movs	r2, r5
    14de:	439a      	bics	r2, r3
    14e0:	d10e      	bne.n	1500 <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    14e2:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    14e4:	2e00      	cmp	r6, #0
    14e6:	d105      	bne.n	14f4 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    14e8:	2201      	movs	r2, #1
    14ea:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    14ec:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    14ee:	3201      	adds	r2, #1
    14f0:	751a      	strb	r2, [r3, #20]
}
    14f2:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    14f4:	2201      	movs	r2, #1
    14f6:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    14f8:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    14fa:	3201      	adds	r2, #1
    14fc:	759a      	strb	r2, [r3, #22]
    14fe:	e7f8      	b.n	14f2 <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
    1500:	2d01      	cmp	r5, #1
    1502:	d007      	beq.n	1514 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
    1504:	2d03      	cmp	r5, #3
    1506:	d1f4      	bne.n	14f2 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    1508:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    150a:	2e00      	cmp	r6, #0
    150c:	d00b      	beq.n	1526 <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    150e:	2280      	movs	r2, #128	; 0x80
    1510:	759a      	strb	r2, [r3, #22]
}
    1512:	e7ee      	b.n	14f2 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1514:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1516:	2e00      	cmp	r6, #0
    1518:	d102      	bne.n	1520 <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    151a:	2204      	movs	r2, #4
    151c:	751a      	strb	r2, [r3, #20]
    151e:	e7e8      	b.n	14f2 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1520:	2204      	movs	r2, #4
    1522:	759a      	strb	r2, [r3, #22]
    1524:	e7e5      	b.n	14f2 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1526:	2280      	movs	r2, #128	; 0x80
    1528:	751a      	strb	r2, [r3, #20]
    152a:	e7e2      	b.n	14f2 <_usart_async_set_irq_state+0x2e>
    152c:	0000021e 	.word	0x0000021e
    1530:	00005efc 	.word	0x00005efc
    1534:	00000ccd 	.word	0x00000ccd

00001538 <SERCOM4_Handler>:

	return NULL;
}

void SERCOM4_Handler(void)
{
    1538:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    153a:	4b19      	ldr	r3, [pc, #100]	; (15a0 <SERCOM4_Handler+0x68>)
    153c:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
    153e:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1540:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1542:	07db      	lsls	r3, r3, #31
    1544:	d502      	bpl.n	154c <SERCOM4_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1546:	7da3      	ldrb	r3, [r4, #22]
    1548:	07db      	lsls	r3, r3, #31
    154a:	d40f      	bmi.n	156c <SERCOM4_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    154c:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    154e:	079b      	lsls	r3, r3, #30
    1550:	d502      	bpl.n	1558 <SERCOM4_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1552:	7da3      	ldrb	r3, [r4, #22]
    1554:	079b      	lsls	r3, r3, #30
    1556:	d40e      	bmi.n	1576 <SERCOM4_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1558:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    155a:	075b      	lsls	r3, r3, #29
    155c:	d515      	bpl.n	158a <SERCOM4_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    155e:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1560:	2337      	movs	r3, #55	; 0x37
    1562:	421a      	tst	r2, r3
    1564:	d00c      	beq.n	1580 <SERCOM4_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1566:	3348      	adds	r3, #72	; 0x48
    1568:	8363      	strh	r3, [r4, #26]
}
    156a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    156c:	2301      	movs	r3, #1
    156e:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1570:	6803      	ldr	r3, [r0, #0]
    1572:	4798      	blx	r3
    1574:	e7f9      	b.n	156a <SERCOM4_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1576:	2302      	movs	r3, #2
    1578:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    157a:	6883      	ldr	r3, [r0, #8]
    157c:	4798      	blx	r3
    157e:	e7f4      	b.n	156a <SERCOM4_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    1580:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1582:	b2c9      	uxtb	r1, r1
    1584:	6843      	ldr	r3, [r0, #4]
    1586:	4798      	blx	r3
    1588:	e7ef      	b.n	156a <SERCOM4_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    158a:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    158c:	09db      	lsrs	r3, r3, #7
    158e:	d0ec      	beq.n	156a <SERCOM4_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1590:	2380      	movs	r3, #128	; 0x80
    1592:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    1594:	68c3      	ldr	r3, [r0, #12]
    1596:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1598:	8b63      	ldrh	r3, [r4, #26]
    159a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    159c:	8363      	strh	r3, [r4, #26]
}
    159e:	e7e4      	b.n	156a <SERCOM4_Handler+0x32>
    15a0:	200001c0 	.word	0x200001c0

000015a4 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    15a4:	b570      	push	{r4, r5, r6, lr}
    15a6:	0005      	movs	r5, r0
    15a8:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    15aa:	4b35      	ldr	r3, [pc, #212]	; (1680 <_spi_m_sync_init+0xdc>)
    15ac:	18cb      	adds	r3, r1, r3
    15ae:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    15b0:	b2db      	uxtb	r3, r3
    15b2:	2b02      	cmp	r3, #2
    15b4:	d00b      	beq.n	15ce <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    15b6:	2800      	cmp	r0, #0
    15b8:	d051      	beq.n	165e <_spi_m_sync_init+0xba>
    15ba:	1e60      	subs	r0, r4, #1
    15bc:	4184      	sbcs	r4, r0
    15be:	b2e0      	uxtb	r0, r4
    15c0:	4a30      	ldr	r2, [pc, #192]	; (1684 <_spi_m_sync_init+0xe0>)
    15c2:	4931      	ldr	r1, [pc, #196]	; (1688 <_spi_m_sync_init+0xe4>)
    15c4:	4b31      	ldr	r3, [pc, #196]	; (168c <_spi_m_sync_init+0xe8>)
    15c6:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    15c8:	200d      	movs	r0, #13
    15ca:	4240      	negs	r0, r0
    15cc:	e046      	b.n	165c <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    15ce:	2800      	cmp	r0, #0
    15d0:	d14d      	bne.n	166e <_spi_m_sync_init+0xca>
    15d2:	4a2c      	ldr	r2, [pc, #176]	; (1684 <_spi_m_sync_init+0xe0>)
    15d4:	492c      	ldr	r1, [pc, #176]	; (1688 <_spi_m_sync_init+0xe4>)
    15d6:	2000      	movs	r0, #0
    15d8:	4b2c      	ldr	r3, [pc, #176]	; (168c <_spi_m_sync_init+0xe8>)
    15da:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    15dc:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    15de:	07db      	lsls	r3, r3, #31
    15e0:	d418      	bmi.n	1614 <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    15e2:	2203      	movs	r2, #3
    15e4:	69e3      	ldr	r3, [r4, #28]
    15e6:	421a      	tst	r2, r3
    15e8:	d1fc      	bne.n	15e4 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    15ea:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    15ec:	079b      	lsls	r3, r3, #30
    15ee:	d50b      	bpl.n	1608 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    15f0:	6823      	ldr	r3, [r4, #0]
    15f2:	2202      	movs	r2, #2
    15f4:	4393      	bics	r3, r2
    15f6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    15f8:	3201      	adds	r2, #1
    15fa:	69e3      	ldr	r3, [r4, #28]
    15fc:	421a      	tst	r2, r3
    15fe:	d1fc      	bne.n	15fa <_spi_m_sync_init+0x56>
    1600:	2202      	movs	r2, #2
    1602:	69e3      	ldr	r3, [r4, #28]
    1604:	421a      	tst	r2, r3
    1606:	d1fc      	bne.n	1602 <_spi_m_sync_init+0x5e>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1608:	230d      	movs	r3, #13
    160a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    160c:	2203      	movs	r2, #3
    160e:	69e3      	ldr	r3, [r4, #28]
    1610:	421a      	tst	r2, r3
    1612:	d1fc      	bne.n	160e <_spi_m_sync_init+0x6a>
    1614:	2201      	movs	r2, #1
    1616:	69e3      	ldr	r3, [r4, #28]
    1618:	421a      	tst	r2, r3
    161a:	d1fc      	bne.n	1616 <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    161c:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    161e:	0020      	movs	r0, r4
    1620:	1e43      	subs	r3, r0, #1
    1622:	4198      	sbcs	r0, r3
    1624:	b2c0      	uxtb	r0, r0
    1626:	4a1a      	ldr	r2, [pc, #104]	; (1690 <_spi_m_sync_init+0xec>)
    1628:	4917      	ldr	r1, [pc, #92]	; (1688 <_spi_m_sync_init+0xe4>)
    162a:	4b18      	ldr	r3, [pc, #96]	; (168c <_spi_m_sync_init+0xe8>)
    162c:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    162e:	4b19      	ldr	r3, [pc, #100]	; (1694 <_spi_m_sync_init+0xf0>)
    1630:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1632:	2203      	movs	r2, #3
    1634:	69e3      	ldr	r3, [r4, #28]
    1636:	421a      	tst	r2, r3
    1638:	d1fc      	bne.n	1634 <_spi_m_sync_init+0x90>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    163a:	2380      	movs	r3, #128	; 0x80
    163c:	029b      	lsls	r3, r3, #10
    163e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1640:	2207      	movs	r2, #7
    1642:	69e3      	ldr	r3, [r4, #28]
    1644:	421a      	tst	r2, r3
    1646:	d1fc      	bne.n	1642 <_spi_m_sync_init+0x9e>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1648:	2309      	movs	r3, #9
    164a:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    164c:	2200      	movs	r2, #0
    164e:	3327      	adds	r3, #39	; 0x27
    1650:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1652:	3b2f      	subs	r3, #47	; 0x2f
    1654:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1656:	4b10      	ldr	r3, [pc, #64]	; (1698 <_spi_m_sync_init+0xf4>)
    1658:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    165a:	2000      	movs	r0, #0
}
    165c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    165e:	4a09      	ldr	r2, [pc, #36]	; (1684 <_spi_m_sync_init+0xe0>)
    1660:	4909      	ldr	r1, [pc, #36]	; (1688 <_spi_m_sync_init+0xe4>)
    1662:	2000      	movs	r0, #0
    1664:	4b09      	ldr	r3, [pc, #36]	; (168c <_spi_m_sync_init+0xe8>)
    1666:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1668:	200d      	movs	r0, #13
    166a:	4240      	negs	r0, r0
    166c:	e7f6      	b.n	165c <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    166e:	0008      	movs	r0, r1
    1670:	1e43      	subs	r3, r0, #1
    1672:	4198      	sbcs	r0, r3
    1674:	b2c0      	uxtb	r0, r0
    1676:	4a03      	ldr	r2, [pc, #12]	; (1684 <_spi_m_sync_init+0xe0>)
    1678:	4903      	ldr	r1, [pc, #12]	; (1688 <_spi_m_sync_init+0xe4>)
    167a:	4b04      	ldr	r3, [pc, #16]	; (168c <_spi_m_sync_init+0xe8>)
    167c:	4798      	blx	r3
    167e:	e7ad      	b.n	15dc <_spi_m_sync_init+0x38>
    1680:	bdfffc00 	.word	0xbdfffc00
    1684:	00000948 	.word	0x00000948
    1688:	00005efc 	.word	0x00005efc
    168c:	00000ccd 	.word	0x00000ccd
    1690:	0000090d 	.word	0x0000090d
    1694:	0001000c 	.word	0x0001000c
    1698:	000001ff 	.word	0x000001ff

0000169c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    169c:	b510      	push	{r4, lr}
    169e:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    16a0:	d00b      	beq.n	16ba <_spi_m_sync_enable+0x1e>
    16a2:	6800      	ldr	r0, [r0, #0]
    16a4:	1e43      	subs	r3, r0, #1
    16a6:	4198      	sbcs	r0, r3
    16a8:	b2c0      	uxtb	r0, r0
    16aa:	4a05      	ldr	r2, [pc, #20]	; (16c0 <_spi_m_sync_enable+0x24>)
    16ac:	4905      	ldr	r1, [pc, #20]	; (16c4 <_spi_m_sync_enable+0x28>)
    16ae:	4b06      	ldr	r3, [pc, #24]	; (16c8 <_spi_m_sync_enable+0x2c>)
    16b0:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    16b2:	6820      	ldr	r0, [r4, #0]
    16b4:	4b05      	ldr	r3, [pc, #20]	; (16cc <_spi_m_sync_enable+0x30>)
    16b6:	4798      	blx	r3
}
    16b8:	bd10      	pop	{r4, pc}
    16ba:	2000      	movs	r0, #0
    16bc:	e7f5      	b.n	16aa <_spi_m_sync_enable+0xe>
    16be:	46c0      	nop			; (mov r8, r8)
    16c0:	000009a3 	.word	0x000009a3
    16c4:	00005efc 	.word	0x00005efc
    16c8:	00000ccd 	.word	0x00000ccd
    16cc:	0000135f 	.word	0x0000135f

000016d0 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    16d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16d2:	46de      	mov	lr, fp
    16d4:	4657      	mov	r7, sl
    16d6:	464e      	mov	r6, r9
    16d8:	4645      	mov	r5, r8
    16da:	b5e0      	push	{r5, r6, r7, lr}
    16dc:	b083      	sub	sp, #12
    16de:	4681      	mov	r9, r0
    16e0:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    16e2:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    16e4:	680b      	ldr	r3, [r1, #0]
    16e6:	4698      	mov	r8, r3
    16e8:	684d      	ldr	r5, [r1, #4]
    16ea:	7903      	ldrb	r3, [r0, #4]
    16ec:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    16ee:	2800      	cmp	r0, #0
    16f0:	d015      	beq.n	171e <_spi_m_sync_trans+0x4e>
    16f2:	0020      	movs	r0, r4
    16f4:	1e43      	subs	r3, r0, #1
    16f6:	4198      	sbcs	r0, r3
    16f8:	b2c0      	uxtb	r0, r0
    16fa:	4a36      	ldr	r2, [pc, #216]	; (17d4 <_spi_m_sync_trans+0x104>)
    16fc:	4936      	ldr	r1, [pc, #216]	; (17d8 <_spi_m_sync_trans+0x108>)
    16fe:	4b37      	ldr	r3, [pc, #220]	; (17dc <_spi_m_sync_trans+0x10c>)
    1700:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1702:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1704:	075b      	lsls	r3, r3, #29
    1706:	d13f      	bne.n	1788 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1708:	2303      	movs	r3, #3
    170a:	69e0      	ldr	r0, [r4, #28]
    170c:	4018      	ands	r0, r3
    170e:	d1fc      	bne.n	170a <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1710:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1712:	079b      	lsls	r3, r3, #30
    1714:	d53b      	bpl.n	178e <_spi_m_sync_trans+0xbe>
    1716:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1718:	2301      	movs	r3, #1
    171a:	469c      	mov	ip, r3
    171c:	e009      	b.n	1732 <_spi_m_sync_trans+0x62>
    171e:	2000      	movs	r0, #0
    1720:	e7eb      	b.n	16fa <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    1722:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    1724:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1726:	b25b      	sxtb	r3, r3
    1728:	2b00      	cmp	r3, #0
    172a:	db16      	blt.n	175a <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    172c:	68b3      	ldr	r3, [r6, #8]
    172e:	4283      	cmp	r3, r0
    1730:	d927      	bls.n	1782 <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1732:	7e23      	ldrb	r3, [r4, #24]
    1734:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1736:	2104      	movs	r1, #4
    1738:	4219      	tst	r1, r3
    173a:	d02b      	beq.n	1794 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    173c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    173e:	2d00      	cmp	r5, #0
    1740:	d0f0      	beq.n	1724 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    1742:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    1744:	9901      	ldr	r1, [sp, #4]
    1746:	2901      	cmp	r1, #1
    1748:	d9eb      	bls.n	1722 <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    174a:	0a3f      	lsrs	r7, r7, #8
    174c:	706f      	strb	r7, [r5, #1]
    174e:	3502      	adds	r5, #2
    1750:	e7e8      	b.n	1724 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    1752:	2101      	movs	r1, #1
    1754:	468b      	mov	fp, r1
    1756:	44d8      	add	r8, fp
    1758:	e037      	b.n	17ca <_spi_m_sync_trans+0xfa>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    175a:	2301      	movs	r3, #1
    175c:	425b      	negs	r3, r3
    175e:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1760:	3381      	adds	r3, #129	; 0x81
    1762:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1764:	2013      	movs	r0, #19
    1766:	4240      	negs	r0, r0
	tmp &= mask;
    1768:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    176a:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    176c:	4213      	tst	r3, r2
    176e:	d0fc      	beq.n	176a <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1770:	2303      	movs	r3, #3
    1772:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1774:	b003      	add	sp, #12
    1776:	bc3c      	pop	{r2, r3, r4, r5}
    1778:	4690      	mov	r8, r2
    177a:	4699      	mov	r9, r3
    177c:	46a2      	mov	sl, r4
    177e:	46ab      	mov	fp, r5
    1780:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1782:	4293      	cmp	r3, r2
    1784:	d8d5      	bhi.n	1732 <_spi_m_sync_trans+0x62>
    1786:	e7ef      	b.n	1768 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    1788:	2004      	movs	r0, #4
    178a:	4240      	negs	r0, r0
    178c:	e7f2      	b.n	1774 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    178e:	2014      	movs	r0, #20
    1790:	4240      	negs	r0, r0
    1792:	e7ef      	b.n	1774 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1794:	4290      	cmp	r0, r2
    1796:	d8c6      	bhi.n	1726 <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1798:	4667      	mov	r7, ip
    179a:	421f      	tst	r7, r3
    179c:	d0c3      	beq.n	1726 <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    179e:	464f      	mov	r7, r9
    17a0:	88ff      	ldrh	r7, [r7, #6]
    17a2:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    17a4:	4647      	mov	r7, r8
    17a6:	2f00      	cmp	r7, #0
    17a8:	d00f      	beq.n	17ca <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    17aa:	783f      	ldrb	r7, [r7, #0]
    17ac:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    17ae:	9901      	ldr	r1, [sp, #4]
    17b0:	2901      	cmp	r1, #1
    17b2:	d9ce      	bls.n	1752 <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    17b4:	4647      	mov	r7, r8
    17b6:	787f      	ldrb	r7, [r7, #1]
    17b8:	023f      	lsls	r7, r7, #8
    17ba:	46bb      	mov	fp, r7
    17bc:	4657      	mov	r7, sl
    17be:	4659      	mov	r1, fp
    17c0:	430f      	orrs	r7, r1
    17c2:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    17c4:	2102      	movs	r1, #2
    17c6:	468b      	mov	fp, r1
    17c8:	44d8      	add	r8, fp
	ctrl->txcnt++;
    17ca:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    17cc:	4657      	mov	r7, sl
    17ce:	62a7      	str	r7, [r4, #40]	; 0x28
    17d0:	e7a9      	b.n	1726 <_spi_m_sync_trans+0x56>
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	00000aa8 	.word	0x00000aa8
    17d8:	00005efc 	.word	0x00005efc
    17dc:	00000ccd 	.word	0x00000ccd

000017e0 <_temp_sync_init>:

/**
 * \brief              Initialize Temperature Sensor
 */
int32_t _temp_sync_init(struct _temp_sync_device *const dev, void *const hw)
{
    17e0:	b570      	push	{r4, r5, r6, lr}
    17e2:	0005      	movs	r5, r0
    17e4:	000c      	movs	r4, r1
	};
}

static inline bool hri_tsens_is_syncing(const void *const hw, hri_tsens_syncbusy_reg_t reg)
{
	return ((Tsens *)hw)->SYNCBUSY.reg & reg;
    17e6:	688b      	ldr	r3, [r1, #8]
 *
 * \param[in] dev      The pointer to device instance
 */
static inline int32_t _temp_init_calibration(void *const hw)
{
	if (!hri_tsens_is_syncing(hw, TSENS_SYNCBUSY_SWRST)) {
    17e8:	07db      	lsls	r3, r3, #31
    17ea:	d52d      	bpl.n	1848 <_temp_sync_init+0x68>
	while (((Tsens *)hw)->SYNCBUSY.reg & reg) {
    17ec:	2201      	movs	r2, #1
    17ee:	68a3      	ldr	r3, [r4, #8]
    17f0:	421a      	tst	r2, r3
    17f2:	d1fc      	bne.n	17ee <_temp_sync_init+0xe>
		}
		hri_tsens_write_CTRLA_reg(hw, TSENS_CTRLA_SWRST);
	}
	hri_tsens_wait_for_sync(hw, TSENS_SYNCBUSY_SWRST);

	hri_tsens_write_CAL_reg(hw, TSENS_CAL_TCAL(CONF_TSENS_CAL_TCAL) | TSENS_CAL_FCAL(CONF_TSENS_CAL_FCAL));
    17f4:	4921      	ldr	r1, [pc, #132]	; (187c <_temp_sync_init+0x9c>)
    17f6:	680b      	ldr	r3, [r1, #0]
    17f8:	021a      	lsls	r2, r3, #8
    17fa:	20fc      	movs	r0, #252	; 0xfc
    17fc:	0180      	lsls	r0, r0, #6
    17fe:	4002      	ands	r2, r0
    1800:	051b      	lsls	r3, r3, #20
    1802:	0e9b      	lsrs	r3, r3, #26
    1804:	4313      	orrs	r3, r2
}

static inline void hri_tsens_write_CAL_reg(const void *const hw, hri_tsens_cal_reg_t data)
{
	TSENS_CRITICAL_SECTION_ENTER();
	((Tsens *)hw)->CAL.reg = data;
    1806:	6223      	str	r3, [r4, #32]
	hri_tsens_write_GAIN_reg(hw, CONF_TSENS_CAL_GAIN);
    1808:	4e1d      	ldr	r6, [pc, #116]	; (1880 <_temp_sync_init+0xa0>)
    180a:	6833      	ldr	r3, [r6, #0]
    180c:	0518      	lsls	r0, r3, #20
    180e:	23f0      	movs	r3, #240	; 0xf0
    1810:	041b      	lsls	r3, r3, #16
    1812:	4018      	ands	r0, r3
    1814:	680b      	ldr	r3, [r1, #0]
    1816:	0b1b      	lsrs	r3, r3, #12
    1818:	4318      	orrs	r0, r3
    181a:	4b1a      	ldr	r3, [pc, #104]	; (1884 <_temp_sync_init+0xa4>)
    181c:	4798      	blx	r3
    181e:	491a      	ldr	r1, [pc, #104]	; (1888 <_temp_sync_init+0xa8>)
    1820:	4b1a      	ldr	r3, [pc, #104]	; (188c <_temp_sync_init+0xac>)
    1822:	4798      	blx	r3
    1824:	4b1a      	ldr	r3, [pc, #104]	; (1890 <_temp_sync_init+0xb0>)
    1826:	4798      	blx	r3
	((Tsens *)hw)->GAIN.reg = data;
    1828:	61a0      	str	r0, [r4, #24]
	hri_tsens_write_OFFSET_reg(hw, CONF_TSENS_CAL_OFFSET);
    182a:	6833      	ldr	r3, [r6, #0]
    182c:	011b      	lsls	r3, r3, #4
    182e:	0a1b      	lsrs	r3, r3, #8
	((Tsens *)hw)->OFFSET.reg = data;
    1830:	61e3      	str	r3, [r4, #28]
	dev->hw = hw;
    1832:	602c      	str	r4, [r5, #0]
	((Tsens *)hw)->CTRLA.reg = data;
    1834:	2300      	movs	r3, #0
    1836:	7023      	strb	r3, [r4, #0]
	while (((Tsens *)hw)->SYNCBUSY.reg & reg) {
    1838:	2203      	movs	r2, #3
    183a:	68a3      	ldr	r3, [r4, #8]
    183c:	421a      	tst	r2, r3
    183e:	d1fc      	bne.n	183a <_temp_sync_init+0x5a>
	((Tsens *)hw)->CTRLC.reg = data;
    1840:	2300      	movs	r3, #0
    1842:	70a3      	strb	r3, [r4, #2]
}
    1844:	2000      	movs	r0, #0
    1846:	bd70      	pop	{r4, r5, r6, pc}
	while (((Tsens *)hw)->SYNCBUSY.reg & reg) {
    1848:	2203      	movs	r2, #3
    184a:	68a3      	ldr	r3, [r4, #8]
    184c:	421a      	tst	r2, r3
    184e:	d1fc      	bne.n	184a <_temp_sync_init+0x6a>
	tmp = ((Tsens *)hw)->CTRLA.reg;
    1850:	7823      	ldrb	r3, [r4, #0]
		if (hri_tsens_get_CTRLA_reg(hw, TSENS_CTRLA_ENABLE)) {
    1852:	079b      	lsls	r3, r3, #30
    1854:	d50b      	bpl.n	186e <_temp_sync_init+0x8e>
	((Tsens *)hw)->CTRLA.reg &= ~TSENS_CTRLA_ENABLE;
    1856:	7823      	ldrb	r3, [r4, #0]
    1858:	2202      	movs	r2, #2
    185a:	4393      	bics	r3, r2
    185c:	7023      	strb	r3, [r4, #0]
	while (((Tsens *)hw)->SYNCBUSY.reg & reg) {
    185e:	3201      	adds	r2, #1
    1860:	68a3      	ldr	r3, [r4, #8]
    1862:	421a      	tst	r2, r3
    1864:	d1fc      	bne.n	1860 <_temp_sync_init+0x80>
    1866:	2202      	movs	r2, #2
    1868:	68a3      	ldr	r3, [r4, #8]
    186a:	421a      	tst	r2, r3
    186c:	d1fc      	bne.n	1868 <_temp_sync_init+0x88>
	((Tsens *)hw)->CTRLA.reg = data;
    186e:	2301      	movs	r3, #1
    1870:	7023      	strb	r3, [r4, #0]
	while (((Tsens *)hw)->SYNCBUSY.reg & reg) {
    1872:	2203      	movs	r2, #3
    1874:	68a3      	ldr	r3, [r4, #8]
    1876:	421a      	tst	r2, r3
    1878:	d1fc      	bne.n	1874 <_temp_sync_init+0x94>
    187a:	e7b7      	b.n	17ec <_temp_sync_init+0xc>
    187c:	00806030 	.word	0x00806030
    1880:	00806034 	.word	0x00806034
    1884:	000027e5 	.word	0x000027e5
    1888:	3caaaaab 	.word	0x3caaaaab
    188c:	0000222d 	.word	0x0000222d
    1890:	00001f6d 	.word	0x00001f6d

00001894 <main>:
#include "spi_serial.h"



int main(void)
{
    1894:	b570      	push	{r4, r5, r6, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1896:	4b0e      	ldr	r3, [pc, #56]	; (18d0 <main+0x3c>)
    1898:	4798      	blx	r3
	uart_init();
    189a:	4b0e      	ldr	r3, [pc, #56]	; (18d4 <main+0x40>)
    189c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    189e:	24c0      	movs	r4, #192	; 0xc0
    18a0:	05e4      	lsls	r4, r4, #23
    18a2:	2320      	movs	r3, #32
    18a4:	61a3      	str	r3, [r4, #24]

	gpio_set_pin_level(relay_signal, true);

	//ADC
	adc_sync_enable_channel(&ADC_0, 0);
    18a6:	2100      	movs	r1, #0
    18a8:	480b      	ldr	r0, [pc, #44]	; (18d8 <main+0x44>)
    18aa:	4b0c      	ldr	r3, [pc, #48]	; (18dc <main+0x48>)
    18ac:	4798      	blx	r3
    18ae:	2380      	movs	r3, #128	; 0x80
    18b0:	009b      	lsls	r3, r3, #2
    18b2:	61a3      	str	r3, [r4, #24]
	gpio_set_pin_level(spi_cs, true);
	//spi
	spi_init();
    18b4:	4b0a      	ldr	r3, [pc, #40]	; (18e0 <main+0x4c>)
    18b6:	4798      	blx	r3
	
	/* Replace with your application code */
	while (1) {
		if(serial_receiving == 1)
    18b8:	4c0a      	ldr	r4, [pc, #40]	; (18e4 <main+0x50>)
		{
			if(serial_complete == 1)
    18ba:	4d0b      	ldr	r5, [pc, #44]	; (18e8 <main+0x54>)
			{
				usart_done();
    18bc:	4e0b      	ldr	r6, [pc, #44]	; (18ec <main+0x58>)
		if(serial_receiving == 1)
    18be:	7823      	ldrb	r3, [r4, #0]
    18c0:	2b01      	cmp	r3, #1
    18c2:	d1fc      	bne.n	18be <main+0x2a>
			if(serial_complete == 1)
    18c4:	782b      	ldrb	r3, [r5, #0]
    18c6:	2b01      	cmp	r3, #1
    18c8:	d1f9      	bne.n	18be <main+0x2a>
				usart_done();
    18ca:	47b0      	blx	r6
    18cc:	e7f7      	b.n	18be <main+0x2a>
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	0000011d 	.word	0x0000011d
    18d4:	00001f39 	.word	0x00001f39
    18d8:	200002f4 	.word	0x200002f4
    18dc:	00000609 	.word	0x00000609
    18e0:	000018f1 	.word	0x000018f1
    18e4:	200001f0 	.word	0x200001f0
    18e8:	200002bc 	.word	0x200002bc
    18ec:	00001b1d 	.word	0x00001b1d

000018f0 <spi_init>:
#include "spi_pec.h"



void spi_init(void)
{
    18f0:	b510      	push	{r4, lr}

spi_m_sync_get_io_descriptor(&SPI_0, &spi_io);
    18f2:	4c04      	ldr	r4, [pc, #16]	; (1904 <spi_init+0x14>)
    18f4:	4904      	ldr	r1, [pc, #16]	; (1908 <spi_init+0x18>)
    18f6:	0020      	movs	r0, r4
    18f8:	4b04      	ldr	r3, [pc, #16]	; (190c <spi_init+0x1c>)
    18fa:	4798      	blx	r3
spi_m_sync_enable(&SPI_0);
    18fc:	0020      	movs	r0, r4
    18fe:	4b04      	ldr	r3, [pc, #16]	; (1910 <spi_init+0x20>)
    1900:	4798      	blx	r3
}
    1902:	bd10      	pop	{r4, pc}
    1904:	200002f8 	.word	0x200002f8
    1908:	200003a0 	.word	0x200003a0
    190c:	00000969 	.word	0x00000969
    1910:	00000881 	.word	0x00000881

00001914 <pec15_calc>:
}

uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
uint8_t *data //Array of data that will be used to calculate  a PEC
)
{
    1914:	b570      	push	{r4, r5, r6, lr}
	uint16_t remainder,addr;
	remainder = 16;//initialize the PEC
	
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
    1916:	2800      	cmp	r0, #0
    1918:	d016      	beq.n	1948 <pec15_calc+0x34>
    191a:	000a      	movs	r2, r1
    191c:	3801      	subs	r0, #1
    191e:	b2c0      	uxtb	r0, r0
    1920:	3001      	adds	r0, #1
    1922:	1809      	adds	r1, r1, r0
    1924:	2010      	movs	r0, #16
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
		
		remainder = (remainder<<8)^crc15Table[addr];
    1926:	4e09      	ldr	r6, [pc, #36]	; (194c <pec15_calc+0x38>)
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
    1928:	25ff      	movs	r5, #255	; 0xff
    192a:	09c4      	lsrs	r4, r0, #7
    192c:	7813      	ldrb	r3, [r2, #0]
    192e:	4063      	eors	r3, r4
		remainder = (remainder<<8)^crc15Table[addr];
    1930:	402b      	ands	r3, r5
    1932:	005b      	lsls	r3, r3, #1
    1934:	0200      	lsls	r0, r0, #8
    1936:	5b9b      	ldrh	r3, [r3, r6]
    1938:	4058      	eors	r0, r3
    193a:	b280      	uxth	r0, r0
    193c:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
    193e:	428a      	cmp	r2, r1
    1940:	d1f3      	bne.n	192a <pec15_calc+0x16>
		
	}
	
	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
    1942:	0040      	lsls	r0, r0, #1
    1944:	b280      	uxth	r0, r0
}
    1946:	bd70      	pop	{r4, r5, r6, pc}
	remainder = 16;//initialize the PEC
    1948:	2010      	movs	r0, #16
    194a:	e7fa      	b.n	1942 <pec15_calc+0x2e>
    194c:	00005f18 	.word	0x00005f18

00001950 <cmd_68>:
{
    1950:	b570      	push	{r4, r5, r6, lr}
    1952:	b082      	sub	sp, #8
	cmd[0] = tx_cmd[0];
    1954:	ac01      	add	r4, sp, #4
    1956:	7803      	ldrb	r3, [r0, #0]
    1958:	7023      	strb	r3, [r4, #0]
	cmd[1] =  tx_cmd[1];
    195a:	7843      	ldrb	r3, [r0, #1]
    195c:	7063      	strb	r3, [r4, #1]
	cmd_pec = pec15_calc(2, cmd);
    195e:	0021      	movs	r1, r4
    1960:	2002      	movs	r0, #2
    1962:	4b0b      	ldr	r3, [pc, #44]	; (1990 <cmd_68+0x40>)
    1964:	4798      	blx	r3
	cmd[2] = (uint8_t)(cmd_pec >> 8);
    1966:	0a03      	lsrs	r3, r0, #8
    1968:	70a3      	strb	r3, [r4, #2]
	cmd[3] = (uint8_t)(cmd_pec);
    196a:	70e0      	strb	r0, [r4, #3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    196c:	25c0      	movs	r5, #192	; 0xc0
    196e:	05ed      	lsls	r5, r5, #23
    1970:	2680      	movs	r6, #128	; 0x80
    1972:	00b6      	lsls	r6, r6, #2
    1974:	616e      	str	r6, [r5, #20]
	io_write(spi_io, cmd, 4);
    1976:	4b07      	ldr	r3, [pc, #28]	; (1994 <cmd_68+0x44>)
    1978:	6818      	ldr	r0, [r3, #0]
    197a:	2204      	movs	r2, #4
    197c:	0021      	movs	r1, r4
    197e:	4b06      	ldr	r3, [pc, #24]	; (1998 <cmd_68+0x48>)
    1980:	4798      	blx	r3
	delay_us(250);
    1982:	20fa      	movs	r0, #250	; 0xfa
    1984:	4b05      	ldr	r3, [pc, #20]	; (199c <cmd_68+0x4c>)
    1986:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1988:	61ae      	str	r6, [r5, #24]
}
    198a:	b002      	add	sp, #8
    198c:	bd70      	pop	{r4, r5, r6, pc}
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	00001915 	.word	0x00001915
    1994:	200003a0 	.word	0x200003a0
    1998:	000007c5 	.word	0x000007c5
    199c:	00000785 	.word	0x00000785

000019a0 <LTC681x_adcv>:
{
    19a0:	b510      	push	{r4, lr}
    19a2:	b082      	sub	sp, #8
	cmd[0] = md_bits + 0x02;
    19a4:	ac01      	add	r4, sp, #4
	md_bits = (MD & 0x02) >> 1;
    19a6:	0783      	lsls	r3, r0, #30
    19a8:	0fdb      	lsrs	r3, r3, #31
	cmd[0] = md_bits + 0x02;
    19aa:	3302      	adds	r3, #2
    19ac:	7023      	strb	r3, [r4, #0]
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
    19ae:	0109      	lsls	r1, r1, #4
    19b0:	3260      	adds	r2, #96	; 0x60
    19b2:	1889      	adds	r1, r1, r2
	md_bits = (MD & 0x01) << 7;
    19b4:	01c0      	lsls	r0, r0, #7
	cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
    19b6:	1809      	adds	r1, r1, r0
    19b8:	7061      	strb	r1, [r4, #1]
    19ba:	2180      	movs	r1, #128	; 0x80
    19bc:	03c9      	lsls	r1, r1, #15
    19be:	2398      	movs	r3, #152	; 0x98
    19c0:	22c0      	movs	r2, #192	; 0xc0
    19c2:	05d2      	lsls	r2, r2, #23
    19c4:	50d1      	str	r1, [r2, r3]
	cmd_68(cmd);
    19c6:	0020      	movs	r0, r4
    19c8:	4b01      	ldr	r3, [pc, #4]	; (19d0 <LTC681x_adcv+0x30>)
    19ca:	4798      	blx	r3
}
    19cc:	b002      	add	sp, #8
    19ce:	bd10      	pop	{r4, pc}
    19d0:	00001951 	.word	0x00001951

000019d4 <LTC681x_adax>:

/* Start ADC Conversion for GPIO and Vref2  */
void LTC681x_adax(uint8_t MD, //ADC Mode
uint8_t CHG //GPIO Channels to be measured
)
{
    19d4:	b500      	push	{lr}
    19d6:	b083      	sub	sp, #12
	uint8_t cmd[4];
	uint8_t md_bits;
	
	md_bits = (MD & 0x02) >> 1;
	cmd[0] = md_bits + 0x04;
    19d8:	aa01      	add	r2, sp, #4
	md_bits = (MD & 0x02) >> 1;
    19da:	0783      	lsls	r3, r0, #30
    19dc:	0fdb      	lsrs	r3, r3, #31
	cmd[0] = md_bits + 0x04;
    19de:	3304      	adds	r3, #4
    19e0:	7013      	strb	r3, [r2, #0]
	md_bits = (MD & 0x01) << 7;
    19e2:	01c0      	lsls	r0, r0, #7
	cmd[1] = md_bits + 0x60 + CHG ;
    19e4:	3160      	adds	r1, #96	; 0x60
    19e6:	1841      	adds	r1, r0, r1
    19e8:	7051      	strb	r1, [r2, #1]
	
	cmd_68(cmd);
    19ea:	0010      	movs	r0, r2
    19ec:	4b01      	ldr	r3, [pc, #4]	; (19f4 <LTC681x_adax+0x20>)
    19ee:	4798      	blx	r3
}
    19f0:	b003      	add	sp, #12
    19f2:	bd00      	pop	{pc}
    19f4:	00001951 	.word	0x00001951

000019f8 <LTC681x_adstat>:

/* Start ADC Conversion for Status  */
void LTC681x_adstat(uint8_t MD, //ADC Mode
uint8_t CHST //Stat Channels to be measured
)
{
    19f8:	b500      	push	{lr}
    19fa:	b083      	sub	sp, #12
	uint8_t cmd[4];
	uint8_t md_bits;
	
	md_bits = (MD & 0x02) >> 1;
	cmd[0] = md_bits + 0x04;
    19fc:	aa01      	add	r2, sp, #4
	md_bits = (MD & 0x02) >> 1;
    19fe:	0783      	lsls	r3, r0, #30
    1a00:	0fdb      	lsrs	r3, r3, #31
	cmd[0] = md_bits + 0x04;
    1a02:	3304      	adds	r3, #4
    1a04:	7013      	strb	r3, [r2, #0]
	md_bits = (MD & 0x01) << 7;
    1a06:	01c0      	lsls	r0, r0, #7
	cmd[1] = md_bits + 0x68 + CHST ;
    1a08:	3168      	adds	r1, #104	; 0x68
    1a0a:	1841      	adds	r1, r0, r1
    1a0c:	7051      	strb	r1, [r2, #1]
	
	cmd_68(cmd);
    1a0e:	0010      	movs	r0, r2
    1a10:	4b01      	ldr	r3, [pc, #4]	; (1a18 <LTC681x_adstat+0x20>)
    1a12:	4798      	blx	r3
}
    1a14:	b003      	add	sp, #12
    1a16:	bd00      	pop	{pc}
    1a18:	00001951 	.word	0x00001951

00001a1c <LTC681x_rdaux_reg>:
the LTC681x_rdaux() command.
*/
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
uint8_t total_ic //The number of ICs in the system
)
{
    1a1c:	b570      	push	{r4, r5, r6, lr}
    1a1e:	b082      	sub	sp, #8
	const uint8_t REG_LEN = 8; // Number of bytes in the register + 2 bytes for the PEC
	uint8_t cmd[4];
	uint16_t cmd_pec;

	if (reg == 1)     //Read back auxiliary group A
    1a20:	2801      	cmp	r0, #1
    1a22:	d01d      	beq.n	1a60 <LTC681x_rdaux_reg+0x44>
	{
		cmd[1] = 0x0C;
		cmd[0] = 0x00;
	}
	else if (reg == 2)  //Read back auxiliary group B
    1a24:	2802      	cmp	r0, #2
    1a26:	d021      	beq.n	1a6c <LTC681x_rdaux_reg+0x50>
	{
		cmd[1] = 0x0E;
		cmd[0] = 0x00;
	}
	else if (reg == 3)  //Read back auxiliary group C
    1a28:	2803      	cmp	r0, #3
    1a2a:	d025      	beq.n	1a78 <LTC681x_rdaux_reg+0x5c>
	{
		cmd[1] = 0x0D;
		cmd[0] = 0x00;
	}
	else if (reg == 4)  //Read back auxiliary group D
    1a2c:	2804      	cmp	r0, #4
    1a2e:	d029      	beq.n	1a84 <LTC681x_rdaux_reg+0x68>
		cmd[1] = 0x0F;
		cmd[0] = 0x00;
	}
	else          //Read back auxiliary group A
	{
		cmd[1] = 0x0C;
    1a30:	ab01      	add	r3, sp, #4
    1a32:	220c      	movs	r2, #12
    1a34:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
    1a36:	2200      	movs	r2, #0
    1a38:	701a      	strb	r2, [r3, #0]
	}

	cmd_pec = pec15_calc(2, cmd);
    1a3a:	ac01      	add	r4, sp, #4
    1a3c:	0021      	movs	r1, r4
    1a3e:	2002      	movs	r0, #2
    1a40:	4b13      	ldr	r3, [pc, #76]	; (1a90 <LTC681x_rdaux_reg+0x74>)
    1a42:	4798      	blx	r3
	cmd[2] = (uint8_t)(cmd_pec >> 8);
    1a44:	0a03      	lsrs	r3, r0, #8
    1a46:	70a3      	strb	r3, [r4, #2]
	cmd[3] = (uint8_t)(cmd_pec);
    1a48:	70e0      	strb	r0, [r4, #3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1a4a:	25c0      	movs	r5, #192	; 0xc0
    1a4c:	05ed      	lsls	r5, r5, #23
    1a4e:	2680      	movs	r6, #128	; 0x80
    1a50:	00b6      	lsls	r6, r6, #2
    1a52:	616e      	str	r6, [r5, #20]

	gpio_set_pin_level(spi_cs, false);
	cmd_68(cmd);
    1a54:	0020      	movs	r0, r4
    1a56:	4b0f      	ldr	r3, [pc, #60]	; (1a94 <LTC681x_rdaux_reg+0x78>)
    1a58:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1a5a:	61ae      	str	r6, [r5, #24]
	//spi_write_read(cmd,4,data,(REG_LEN*total_ic));
	gpio_set_pin_level(spi_cs, true);
	
}
    1a5c:	b002      	add	sp, #8
    1a5e:	bd70      	pop	{r4, r5, r6, pc}
		cmd[1] = 0x0C;
    1a60:	ab01      	add	r3, sp, #4
    1a62:	220c      	movs	r2, #12
    1a64:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
    1a66:	2200      	movs	r2, #0
    1a68:	701a      	strb	r2, [r3, #0]
    1a6a:	e7e6      	b.n	1a3a <LTC681x_rdaux_reg+0x1e>
		cmd[1] = 0x0E;
    1a6c:	ab01      	add	r3, sp, #4
    1a6e:	220e      	movs	r2, #14
    1a70:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
    1a72:	2200      	movs	r2, #0
    1a74:	701a      	strb	r2, [r3, #0]
    1a76:	e7e0      	b.n	1a3a <LTC681x_rdaux_reg+0x1e>
		cmd[1] = 0x0D;
    1a78:	ab01      	add	r3, sp, #4
    1a7a:	220d      	movs	r2, #13
    1a7c:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
    1a7e:	2200      	movs	r2, #0
    1a80:	701a      	strb	r2, [r3, #0]
    1a82:	e7da      	b.n	1a3a <LTC681x_rdaux_reg+0x1e>
		cmd[1] = 0x0F;
    1a84:	ab01      	add	r3, sp, #4
    1a86:	220f      	movs	r2, #15
    1a88:	705a      	strb	r2, [r3, #1]
		cmd[0] = 0x00;
    1a8a:	2200      	movs	r2, #0
    1a8c:	701a      	strb	r2, [r3, #0]
    1a8e:	e7d4      	b.n	1a3a <LTC681x_rdaux_reg+0x1e>
    1a90:	00001915 	.word	0x00001915
    1a94:	00001951 	.word	0x00001951

00001a98 <usart_return>:
	 	serial_complete = 0;
}

//sends an the rx array on usart
void usart_return(uint8_t rx[], uint8_t tx[])
{
    1a98:	b570      	push	{r4, r5, r6, lr}
    1a9a:	0005      	movs	r5, r0
    1a9c:	000c      	movs	r4, r1
		//copy message to tx buffer
		memcpy(&tx[17], &rx[0], SERIAL_BUF_SIZE);
    1a9e:	0008      	movs	r0, r1
    1aa0:	3011      	adds	r0, #17
    1aa2:	22c8      	movs	r2, #200	; 0xc8
    1aa4:	0029      	movs	r1, r5
    1aa6:	4b06      	ldr	r3, [pc, #24]	; (1ac0 <usart_return+0x28>)
    1aa8:	4798      	blx	r3

		//print
		io_write(&USART_0.io, tx, strlen(rx) + 17);
    1aaa:	0028      	movs	r0, r5
    1aac:	4b05      	ldr	r3, [pc, #20]	; (1ac4 <usart_return+0x2c>)
    1aae:	4798      	blx	r3
    1ab0:	3011      	adds	r0, #17
    1ab2:	b282      	uxth	r2, r0
    1ab4:	0021      	movs	r1, r4
    1ab6:	4804      	ldr	r0, [pc, #16]	; (1ac8 <usart_return+0x30>)
    1ab8:	4b04      	ldr	r3, [pc, #16]	; (1acc <usart_return+0x34>)
    1aba:	4798      	blx	r3
		
		//clear memory
		memset(&rx, 0x00, SERIAL_BUF_SIZE);
		memset(&tx, 0x00, SERIAL_BUF_SIZE+18);
		
}
    1abc:	bd70      	pop	{r4, r5, r6, pc}
    1abe:	46c0      	nop			; (mov r8, r8)
    1ac0:	00004129 	.word	0x00004129
    1ac4:	0000422d 	.word	0x0000422d
    1ac8:	20000310 	.word	0x20000310
    1acc:	000007c5 	.word	0x000007c5

00001ad0 <usart_send>:

//sends a the string on usart (might work with arrays aswell)
void usart_send(uint8_t *str1)
{
    1ad0:	b570      	push	{r4, r5, r6, lr}
    1ad2:	0005      	movs	r5, r0
	//Copy the string to the tx_buffer, so that it can be sent using io_write
	memcpy(&tx_buffer[17], &str1[0], SERIAL_BUF_SIZE);
    1ad4:	4c0a      	ldr	r4, [pc, #40]	; (1b00 <usart_send+0x30>)
    1ad6:	22c8      	movs	r2, #200	; 0xc8
    1ad8:	0001      	movs	r1, r0
    1ada:	0020      	movs	r0, r4
    1adc:	4b09      	ldr	r3, [pc, #36]	; (1b04 <usart_send+0x34>)
    1ade:	4798      	blx	r3
	
	//print to the serialcom port
	io_write(&USART_0.io, tx_buffer, (17  + strlen(str1)));
    1ae0:	0028      	movs	r0, r5
    1ae2:	4b09      	ldr	r3, [pc, #36]	; (1b08 <usart_send+0x38>)
    1ae4:	4798      	blx	r3
    1ae6:	3011      	adds	r0, #17
    1ae8:	b282      	uxth	r2, r0
    1aea:	0021      	movs	r1, r4
    1aec:	3911      	subs	r1, #17
    1aee:	4807      	ldr	r0, [pc, #28]	; (1b0c <usart_send+0x3c>)
    1af0:	4b07      	ldr	r3, [pc, #28]	; (1b10 <usart_send+0x40>)
    1af2:	4798      	blx	r3
	//io_write(&USART_0.io, msg, total_bytes + 16);
	
	//clear memory, so that there is a clean buffer for next message
	memset(&rx_buffer, 0x00, SERIAL_BUF_SIZE);
    1af4:	22c8      	movs	r2, #200	; 0xc8
    1af6:	2100      	movs	r1, #0
    1af8:	4806      	ldr	r0, [pc, #24]	; (1b14 <usart_send+0x44>)
    1afa:	4b07      	ldr	r3, [pc, #28]	; (1b18 <usart_send+0x48>)
    1afc:	4798      	blx	r3
	
}
    1afe:	bd70      	pop	{r4, r5, r6, pc}
    1b00:	20000031 	.word	0x20000031
    1b04:	00004129 	.word	0x00004129
    1b08:	0000422d 	.word	0x0000422d
    1b0c:	20000310 	.word	0x20000310
    1b10:	000007c5 	.word	0x000007c5
    1b14:	200001f4 	.word	0x200001f4
    1b18:	0000413b 	.word	0x0000413b

00001b1c <usart_done>:
{
    1b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b1e:	46ce      	mov	lr, r9
    1b20:	4647      	mov	r7, r8
    1b22:	b580      	push	{r7, lr}
    1b24:	b083      	sub	sp, #12
	if(rx_buffer[0] == 'o' && rx_buffer[1] == 'n'){
    1b26:	4bc2      	ldr	r3, [pc, #776]	; (1e30 <usart_done+0x314>)
    1b28:	781b      	ldrb	r3, [r3, #0]
    1b2a:	2b6f      	cmp	r3, #111	; 0x6f
    1b2c:	d03f      	beq.n	1bae <usart_done+0x92>
	else if(rx_buffer[0] == 'o' && rx_buffer[1] == 'f' && rx_buffer[2] =='f'){
    1b2e:	4bc0      	ldr	r3, [pc, #768]	; (1e30 <usart_done+0x314>)
    1b30:	781b      	ldrb	r3, [r3, #0]
    1b32:	2b6f      	cmp	r3, #111	; 0x6f
    1b34:	d04c      	beq.n	1bd0 <usart_done+0xb4>
	 else if (rx_buffer[0] == 'a' && rx_buffer[1] == 'd' && rx_buffer[2] =='c'){
    1b36:	4bbe      	ldr	r3, [pc, #760]	; (1e30 <usart_done+0x314>)
    1b38:	781b      	ldrb	r3, [r3, #0]
    1b3a:	2b61      	cmp	r3, #97	; 0x61
    1b3c:	d055      	beq.n	1bea <usart_done+0xce>
	 else if (rx_buffer[0] == 't' && rx_buffer[1] == 'e' && rx_buffer[2] =='s'){
    1b3e:	4bbc      	ldr	r3, [pc, #752]	; (1e30 <usart_done+0x314>)
    1b40:	781b      	ldrb	r3, [r3, #0]
    1b42:	2b74      	cmp	r3, #116	; 0x74
    1b44:	d064      	beq.n	1c10 <usart_done+0xf4>
	 else if (rx_buffer[0] == '1'){
    1b46:	4bba      	ldr	r3, [pc, #744]	; (1e30 <usart_done+0x314>)
    1b48:	781b      	ldrb	r3, [r3, #0]
    1b4a:	2b31      	cmp	r3, #49	; 0x31
    1b4c:	d100      	bne.n	1b50 <usart_done+0x34>
    1b4e:	e06e      	b.n	1c2e <usart_done+0x112>
	  else if (rx_buffer[0] == '2'){
    1b50:	4bb7      	ldr	r3, [pc, #732]	; (1e30 <usart_done+0x314>)
    1b52:	781b      	ldrb	r3, [r3, #0]
    1b54:	2b32      	cmp	r3, #50	; 0x32
    1b56:	d100      	bne.n	1b5a <usart_done+0x3e>
    1b58:	e078      	b.n	1c4c <usart_done+0x130>
	 else if (rx_buffer[0] == '3'){
    1b5a:	4bb5      	ldr	r3, [pc, #724]	; (1e30 <usart_done+0x314>)
    1b5c:	781b      	ldrb	r3, [r3, #0]
    1b5e:	2b33      	cmp	r3, #51	; 0x33
    1b60:	d100      	bne.n	1b64 <usart_done+0x48>
    1b62:	e0b2      	b.n	1cca <usart_done+0x1ae>
	 else if(rx_buffer[0] == '4'){
    1b64:	4bb2      	ldr	r3, [pc, #712]	; (1e30 <usart_done+0x314>)
    1b66:	781b      	ldrb	r3, [r3, #0]
    1b68:	2b34      	cmp	r3, #52	; 0x34
    1b6a:	d100      	bne.n	1b6e <usart_done+0x52>
    1b6c:	e0d0      	b.n	1d10 <usart_done+0x1f4>
	 else if (rx_buffer[0] == '5'){
    1b6e:	4bb0      	ldr	r3, [pc, #704]	; (1e30 <usart_done+0x314>)
    1b70:	781b      	ldrb	r3, [r3, #0]
    1b72:	2b35      	cmp	r3, #53	; 0x35
    1b74:	d100      	bne.n	1b78 <usart_done+0x5c>
    1b76:	e0d2      	b.n	1d1e <usart_done+0x202>
	 else if (rx_buffer[0] == '6'){
    1b78:	4bad      	ldr	r3, [pc, #692]	; (1e30 <usart_done+0x314>)
    1b7a:	781b      	ldrb	r3, [r3, #0]
    1b7c:	2b36      	cmp	r3, #54	; 0x36
    1b7e:	d00c      	beq.n	1b9a <usart_done+0x7e>
	  else if (rx_buffer[0] == '7'){
    1b80:	4bab      	ldr	r3, [pc, #684]	; (1e30 <usart_done+0x314>)
    1b82:	781b      	ldrb	r3, [r3, #0]
    1b84:	2b37      	cmp	r3, #55	; 0x37
    1b86:	d100      	bne.n	1b8a <usart_done+0x6e>
    1b88:	e141      	b.n	1e0e <usart_done+0x2f2>
	 else if (rx_buffer[0] == '8'){
    1b8a:	4ba9      	ldr	r3, [pc, #676]	; (1e30 <usart_done+0x314>)
    1b8c:	781b      	ldrb	r3, [r3, #0]
    1b8e:	2b38      	cmp	r3, #56	; 0x38
    1b90:	d100      	bne.n	1b94 <usart_done+0x78>
    1b92:	e142      	b.n	1e1a <usart_done+0x2fe>
		 usart_send("Error: No such command");
    1b94:	48a7      	ldr	r0, [pc, #668]	; (1e34 <usart_done+0x318>)
    1b96:	4ba8      	ldr	r3, [pc, #672]	; (1e38 <usart_done+0x31c>)
    1b98:	4798      	blx	r3
	 	serial_receiving = 0;
    1b9a:	2300      	movs	r3, #0
    1b9c:	4aa7      	ldr	r2, [pc, #668]	; (1e3c <usart_done+0x320>)
    1b9e:	7013      	strb	r3, [r2, #0]
	 	serial_complete = 0;
    1ba0:	4aa7      	ldr	r2, [pc, #668]	; (1e40 <usart_done+0x324>)
    1ba2:	7013      	strb	r3, [r2, #0]
}
    1ba4:	b003      	add	sp, #12
    1ba6:	bc0c      	pop	{r2, r3}
    1ba8:	4690      	mov	r8, r2
    1baa:	4699      	mov	r9, r3
    1bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(rx_buffer[0] == 'o' && rx_buffer[1] == 'n'){
    1bae:	4ba0      	ldr	r3, [pc, #640]	; (1e30 <usart_done+0x314>)
    1bb0:	785b      	ldrb	r3, [r3, #1]
    1bb2:	2b6e      	cmp	r3, #110	; 0x6e
    1bb4:	d1bb      	bne.n	1b2e <usart_done+0x12>
    1bb6:	2220      	movs	r2, #32
    1bb8:	23c0      	movs	r3, #192	; 0xc0
    1bba:	05db      	lsls	r3, r3, #23
    1bbc:	619a      	str	r2, [r3, #24]
		usart_send(relay_on);
    1bbe:	48a1      	ldr	r0, [pc, #644]	; (1e44 <usart_done+0x328>)
    1bc0:	4c9d      	ldr	r4, [pc, #628]	; (1e38 <usart_done+0x31c>)
    1bc2:	47a0      	blx	r4
		delay_ms(50);
    1bc4:	2032      	movs	r0, #50	; 0x32
    1bc6:	4ba0      	ldr	r3, [pc, #640]	; (1e48 <usart_done+0x32c>)
    1bc8:	4798      	blx	r3
		usart_send("Relay test");
    1bca:	48a0      	ldr	r0, [pc, #640]	; (1e4c <usart_done+0x330>)
    1bcc:	47a0      	blx	r4
    1bce:	e7e4      	b.n	1b9a <usart_done+0x7e>
	else if(rx_buffer[0] == 'o' && rx_buffer[1] == 'f' && rx_buffer[2] =='f'){
    1bd0:	4b97      	ldr	r3, [pc, #604]	; (1e30 <usart_done+0x314>)
    1bd2:	785b      	ldrb	r3, [r3, #1]
    1bd4:	2b66      	cmp	r3, #102	; 0x66
    1bd6:	d1ae      	bne.n	1b36 <usart_done+0x1a>
    1bd8:	4b95      	ldr	r3, [pc, #596]	; (1e30 <usart_done+0x314>)
    1bda:	789b      	ldrb	r3, [r3, #2]
    1bdc:	2b66      	cmp	r3, #102	; 0x66
    1bde:	d1aa      	bne.n	1b36 <usart_done+0x1a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1be0:	2220      	movs	r2, #32
    1be2:	23c0      	movs	r3, #192	; 0xc0
    1be4:	05db      	lsls	r3, r3, #23
    1be6:	615a      	str	r2, [r3, #20]
    1be8:	e7d7      	b.n	1b9a <usart_done+0x7e>
	 else if (rx_buffer[0] == 'a' && rx_buffer[1] == 'd' && rx_buffer[2] =='c'){
    1bea:	4b91      	ldr	r3, [pc, #580]	; (1e30 <usart_done+0x314>)
    1bec:	785b      	ldrb	r3, [r3, #1]
    1bee:	2b64      	cmp	r3, #100	; 0x64
    1bf0:	d1a5      	bne.n	1b3e <usart_done+0x22>
    1bf2:	4b8f      	ldr	r3, [pc, #572]	; (1e30 <usart_done+0x314>)
    1bf4:	789b      	ldrb	r3, [r3, #2]
    1bf6:	2b63      	cmp	r3, #99	; 0x63
    1bf8:	d1a1      	bne.n	1b3e <usart_done+0x22>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1bfa:	2180      	movs	r1, #128	; 0x80
    1bfc:	03c9      	lsls	r1, r1, #15
    1bfe:	3335      	adds	r3, #53	; 0x35
    1c00:	22c0      	movs	r2, #192	; 0xc0
    1c02:	05d2      	lsls	r2, r2, #23
    1c04:	50d1      	str	r1, [r2, r3]
		 usart_return(&rx_buffer[1], tx_buffer);
    1c06:	4992      	ldr	r1, [pc, #584]	; (1e50 <usart_done+0x334>)
    1c08:	4892      	ldr	r0, [pc, #584]	; (1e54 <usart_done+0x338>)
    1c0a:	4b93      	ldr	r3, [pc, #588]	; (1e58 <usart_done+0x33c>)
    1c0c:	4798      	blx	r3
    1c0e:	e7c4      	b.n	1b9a <usart_done+0x7e>
	 else if (rx_buffer[0] == 't' && rx_buffer[1] == 'e' && rx_buffer[2] =='s'){
    1c10:	4b87      	ldr	r3, [pc, #540]	; (1e30 <usart_done+0x314>)
    1c12:	785b      	ldrb	r3, [r3, #1]
    1c14:	2b65      	cmp	r3, #101	; 0x65
    1c16:	d196      	bne.n	1b46 <usart_done+0x2a>
    1c18:	4b85      	ldr	r3, [pc, #532]	; (1e30 <usart_done+0x314>)
    1c1a:	789b      	ldrb	r3, [r3, #2]
    1c1c:	2b73      	cmp	r3, #115	; 0x73
    1c1e:	d192      	bne.n	1b46 <usart_done+0x2a>
    1c20:	2180      	movs	r1, #128	; 0x80
    1c22:	03c9      	lsls	r1, r1, #15
    1c24:	3325      	adds	r3, #37	; 0x25
    1c26:	22c0      	movs	r2, #192	; 0xc0
    1c28:	05d2      	lsls	r2, r2, #23
    1c2a:	50d1      	str	r1, [r2, r3]
    1c2c:	e7b5      	b.n	1b9a <usart_done+0x7e>
		adc_sync_read_channel(&ADC_0, 0, adc_buffer, 2);
    1c2e:	4c8b      	ldr	r4, [pc, #556]	; (1e5c <usart_done+0x340>)
    1c30:	3b2f      	subs	r3, #47	; 0x2f
    1c32:	0022      	movs	r2, r4
    1c34:	2100      	movs	r1, #0
    1c36:	488a      	ldr	r0, [pc, #552]	; (1e60 <usart_done+0x344>)
    1c38:	4d8a      	ldr	r5, [pc, #552]	; (1e64 <usart_done+0x348>)
    1c3a:	47a8      	blx	r5
		temp[1] = adc_buffer[1];
    1c3c:	7863      	ldrb	r3, [r4, #1]
    1c3e:	7163      	strb	r3, [r4, #5]
		temp[0] = adc_buffer[0];
    1c40:	7822      	ldrb	r2, [r4, #0]
    1c42:	7122      	strb	r2, [r4, #4]
		res = (temp[1] << 8) | temp[0];
    1c44:	021b      	lsls	r3, r3, #8
    1c46:	4313      	orrs	r3, r2
    1c48:	80e3      	strh	r3, [r4, #6]
    1c4a:	e7a6      	b.n	1b9a <usart_done+0x7e>
		adc_sync_read_channel(&ADC_0, 0, adc_buffer, 2);
    1c4c:	4c83      	ldr	r4, [pc, #524]	; (1e5c <usart_done+0x340>)
    1c4e:	3b30      	subs	r3, #48	; 0x30
    1c50:	0022      	movs	r2, r4
    1c52:	2100      	movs	r1, #0
    1c54:	4882      	ldr	r0, [pc, #520]	; (1e60 <usart_done+0x344>)
    1c56:	4d83      	ldr	r5, [pc, #524]	; (1e64 <usart_done+0x348>)
    1c58:	47a8      	blx	r5
		temp[1] = adc_buffer[1];
    1c5a:	7865      	ldrb	r5, [r4, #1]
    1c5c:	7165      	strb	r5, [r4, #5]
		temp[0] = adc_buffer[0];
    1c5e:	7823      	ldrb	r3, [r4, #0]
    1c60:	7123      	strb	r3, [r4, #4]
		res = (temp[1] << 8) | temp[0];
    1c62:	022d      	lsls	r5, r5, #8
    1c64:	431d      	orrs	r5, r3
    1c66:	80e5      	strh	r5, [r4, #6]
		thou = res / 1000 % 10;
    1c68:	4e7f      	ldr	r6, [pc, #508]	; (1e68 <usart_done+0x34c>)
    1c6a:	21fa      	movs	r1, #250	; 0xfa
    1c6c:	0089      	lsls	r1, r1, #2
    1c6e:	0028      	movs	r0, r5
    1c70:	47b0      	blx	r6
    1c72:	b280      	uxth	r0, r0
    1c74:	4b7d      	ldr	r3, [pc, #500]	; (1e6c <usart_done+0x350>)
    1c76:	4699      	mov	r9, r3
    1c78:	210a      	movs	r1, #10
    1c7a:	4798      	blx	r3
    1c7c:	b2cb      	uxtb	r3, r1
    1c7e:	4698      	mov	r8, r3
    1c80:	7223      	strb	r3, [r4, #8]
		hund = res / 100  % 10;
    1c82:	2164      	movs	r1, #100	; 0x64
    1c84:	0028      	movs	r0, r5
    1c86:	47b0      	blx	r6
    1c88:	b280      	uxth	r0, r0
    1c8a:	210a      	movs	r1, #10
    1c8c:	47c8      	blx	r9
    1c8e:	b2cf      	uxtb	r7, r1
    1c90:	7267      	strb	r7, [r4, #9]
		tens = res / 10   % 10;
    1c92:	210a      	movs	r1, #10
    1c94:	0028      	movs	r0, r5
    1c96:	47b0      	blx	r6
    1c98:	b280      	uxth	r0, r0
    1c9a:	210a      	movs	r1, #10
    1c9c:	47c8      	blx	r9
    1c9e:	b2ce      	uxtb	r6, r1
    1ca0:	72a6      	strb	r6, [r4, #10]
		ones = res % 10;
    1ca2:	210a      	movs	r1, #10
    1ca4:	0028      	movs	r0, r5
    1ca6:	47c8      	blx	r9
    1ca8:	b2c9      	uxtb	r1, r1
    1caa:	72e1      	strb	r1, [r4, #11]
		adc_rest[0] = thou + 48;
    1cac:	4643      	mov	r3, r8
    1cae:	3330      	adds	r3, #48	; 0x30
    1cb0:	7323      	strb	r3, [r4, #12]
		adc_rest[1] = hund + 48;
    1cb2:	3730      	adds	r7, #48	; 0x30
    1cb4:	7367      	strb	r7, [r4, #13]
		adc_rest[2] = tens + 48;
    1cb6:	3630      	adds	r6, #48	; 0x30
    1cb8:	73a6      	strb	r6, [r4, #14]
		adc_rest[3] = ones + 48;
    1cba:	3130      	adds	r1, #48	; 0x30
    1cbc:	73e1      	strb	r1, [r4, #15]
		usart_return(adc_rest, tx_buffer);
    1cbe:	0020      	movs	r0, r4
    1cc0:	300c      	adds	r0, #12
    1cc2:	4963      	ldr	r1, [pc, #396]	; (1e50 <usart_done+0x334>)
    1cc4:	4b64      	ldr	r3, [pc, #400]	; (1e58 <usart_done+0x33c>)
    1cc6:	4798      	blx	r3
    1cc8:	e767      	b.n	1b9a <usart_done+0x7e>
		adc_sync_read_channel(&ADC_0, 0, adc_buffer, 2);
    1cca:	4c64      	ldr	r4, [pc, #400]	; (1e5c <usart_done+0x340>)
    1ccc:	3b31      	subs	r3, #49	; 0x31
    1cce:	0022      	movs	r2, r4
    1cd0:	2100      	movs	r1, #0
    1cd2:	4863      	ldr	r0, [pc, #396]	; (1e60 <usart_done+0x344>)
    1cd4:	4d63      	ldr	r5, [pc, #396]	; (1e64 <usart_done+0x348>)
    1cd6:	47a8      	blx	r5
		temp[1] = adc_buffer[1];
    1cd8:	7860      	ldrb	r0, [r4, #1]
    1cda:	7160      	strb	r0, [r4, #5]
		temp[0] = adc_buffer[0];
    1cdc:	7823      	ldrb	r3, [r4, #0]
    1cde:	7123      	strb	r3, [r4, #4]
		res = (temp[1] << 8) | temp[0];
    1ce0:	0200      	lsls	r0, r0, #8
    1ce2:	4318      	orrs	r0, r3
    1ce4:	80e0      	strh	r0, [r4, #6]
		res2 = (float) res / 840;
    1ce6:	4b62      	ldr	r3, [pc, #392]	; (1e70 <usart_done+0x354>)
    1ce8:	4798      	blx	r3
    1cea:	4962      	ldr	r1, [pc, #392]	; (1e74 <usart_done+0x358>)
    1cec:	4b62      	ldr	r3, [pc, #392]	; (1e78 <usart_done+0x35c>)
    1cee:	4798      	blx	r3
    1cf0:	6120      	str	r0, [r4, #16]
		gcvt(res2, 6, buf);
    1cf2:	0025      	movs	r5, r4
    1cf4:	3514      	adds	r5, #20
    1cf6:	4b61      	ldr	r3, [pc, #388]	; (1e7c <usart_done+0x360>)
    1cf8:	4798      	blx	r3
    1cfa:	002b      	movs	r3, r5
    1cfc:	2206      	movs	r2, #6
    1cfe:	4e60      	ldr	r6, [pc, #384]	; (1e80 <usart_done+0x364>)
    1d00:	47b0      	blx	r6
		buf[7] = 'V';
    1d02:	2356      	movs	r3, #86	; 0x56
    1d04:	76e3      	strb	r3, [r4, #27]
		usart_return(buf, tx_buffer);
    1d06:	4952      	ldr	r1, [pc, #328]	; (1e50 <usart_done+0x334>)
    1d08:	0028      	movs	r0, r5
    1d0a:	4b53      	ldr	r3, [pc, #332]	; (1e58 <usart_done+0x33c>)
    1d0c:	4798      	blx	r3
    1d0e:	e744      	b.n	1b9a <usart_done+0x7e>
		 uint8_t temp_int[2] = {0b00000101, 0b01100000};
    1d10:	a801      	add	r0, sp, #4
    1d12:	4b5c      	ldr	r3, [pc, #368]	; (1e84 <usart_done+0x368>)
    1d14:	881b      	ldrh	r3, [r3, #0]
    1d16:	8003      	strh	r3, [r0, #0]
		 cmd_68(temp_int);
    1d18:	4b5b      	ldr	r3, [pc, #364]	; (1e88 <usart_done+0x36c>)
    1d1a:	4798      	blx	r3
    1d1c:	e73d      	b.n	1b9a <usart_done+0x7e>
		 LTC681x_rdaux_reg(1,1);
    1d1e:	2101      	movs	r1, #1
    1d20:	2001      	movs	r0, #1
    1d22:	4d5a      	ldr	r5, [pc, #360]	; (1e8c <usart_done+0x370>)
    1d24:	47a8      	blx	r5
		 delay_ms(1);
    1d26:	2001      	movs	r0, #1
    1d28:	4c47      	ldr	r4, [pc, #284]	; (1e48 <usart_done+0x32c>)
    1d2a:	47a0      	blx	r4
		 LTC681x_adax(0b10, 0b000 );
    1d2c:	2100      	movs	r1, #0
    1d2e:	2002      	movs	r0, #2
    1d30:	4b57      	ldr	r3, [pc, #348]	; (1e90 <usart_done+0x374>)
    1d32:	4698      	mov	r8, r3
    1d34:	4798      	blx	r3
		 delay_ms(1);
    1d36:	2001      	movs	r0, #1
    1d38:	47a0      	blx	r4
		 LTC681x_adcv(0b10,0b0,0b000);
    1d3a:	2200      	movs	r2, #0
    1d3c:	2100      	movs	r1, #0
    1d3e:	2002      	movs	r0, #2
    1d40:	4f54      	ldr	r7, [pc, #336]	; (1e94 <usart_done+0x378>)
    1d42:	47b8      	blx	r7
		 delay_ms(1);
    1d44:	2001      	movs	r0, #1
    1d46:	47a0      	blx	r4
		 LTC681x_rdaux_reg(1,1);
    1d48:	2101      	movs	r1, #1
    1d4a:	2001      	movs	r0, #1
    1d4c:	47a8      	blx	r5
		 delay_ms(1);
    1d4e:	2001      	movs	r0, #1
    1d50:	47a0      	blx	r4
		 LTC681x_adstat(0b10,000);
    1d52:	2100      	movs	r1, #0
    1d54:	2002      	movs	r0, #2
    1d56:	4e50      	ldr	r6, [pc, #320]	; (1e98 <usart_done+0x37c>)
    1d58:	47b0      	blx	r6
		 delay_ms(1);
    1d5a:	2001      	movs	r0, #1
    1d5c:	47a0      	blx	r4
		 LTC681x_rdaux_reg(2,1);
    1d5e:	2101      	movs	r1, #1
    1d60:	2002      	movs	r0, #2
    1d62:	47a8      	blx	r5
		 delay_ms(1);
    1d64:	2001      	movs	r0, #1
    1d66:	47a0      	blx	r4
		  LTC681x_rdaux_reg(1,1);
    1d68:	2101      	movs	r1, #1
    1d6a:	2001      	movs	r0, #1
    1d6c:	47a8      	blx	r5
		  delay_ms(1);
    1d6e:	2001      	movs	r0, #1
    1d70:	47a0      	blx	r4
		  LTC681x_adax(0b10, 0b000);
    1d72:	2100      	movs	r1, #0
    1d74:	2002      	movs	r0, #2
    1d76:	47c0      	blx	r8
		  delay_ms(1);
    1d78:	2001      	movs	r0, #1
    1d7a:	47a0      	blx	r4
		  LTC681x_adstat(0b10,000);
    1d7c:	2100      	movs	r1, #0
    1d7e:	2002      	movs	r0, #2
    1d80:	47b0      	blx	r6
		  LTC681x_adcv(0b10,0b0,0b000);
    1d82:	2200      	movs	r2, #0
    1d84:	2100      	movs	r1, #0
    1d86:	2002      	movs	r0, #2
    1d88:	47b8      	blx	r7
		  LTC681x_rdaux_reg(1,1);
    1d8a:	2101      	movs	r1, #1
    1d8c:	2001      	movs	r0, #1
    1d8e:	47a8      	blx	r5
		  LTC681x_rdaux_reg(2,1);
    1d90:	2101      	movs	r1, #1
    1d92:	2002      	movs	r0, #2
    1d94:	47a8      	blx	r5
		  delay_ms(1);
    1d96:	2001      	movs	r0, #1
    1d98:	47a0      	blx	r4
		  LTC681x_rdaux_reg(1,1);
    1d9a:	2101      	movs	r1, #1
    1d9c:	2001      	movs	r0, #1
    1d9e:	47a8      	blx	r5
		  LTC681x_adax(0b1, 0b000 );
    1da0:	2100      	movs	r1, #0
    1da2:	2001      	movs	r0, #1
    1da4:	47c0      	blx	r8
		  LTC681x_adcv(0b11,0b1,0b000);
    1da6:	2200      	movs	r2, #0
    1da8:	2101      	movs	r1, #1
    1daa:	2003      	movs	r0, #3
    1dac:	47b8      	blx	r7
		  delay_ms(0.5);
    1dae:	2000      	movs	r0, #0
    1db0:	47a0      	blx	r4
		  LTC681x_adax(0b00, 0b000 );
    1db2:	2100      	movs	r1, #0
    1db4:	2000      	movs	r0, #0
    1db6:	47c0      	blx	r8
		  LTC681x_adcv(0b10,0b0,0b010);
    1db8:	2202      	movs	r2, #2
    1dba:	2100      	movs	r1, #0
    1dbc:	2002      	movs	r0, #2
    1dbe:	47b8      	blx	r7
		  LTC681x_adax(0b10, 0b000 );
    1dc0:	2100      	movs	r1, #0
    1dc2:	2002      	movs	r0, #2
    1dc4:	47c0      	blx	r8
		  LTC681x_adcv(0b10,0b0,0b001);
    1dc6:	2201      	movs	r2, #1
    1dc8:	2100      	movs	r1, #0
    1dca:	2002      	movs	r0, #2
    1dcc:	47b8      	blx	r7
		  LTC681x_adstat(0b10,000);
    1dce:	2100      	movs	r1, #0
    1dd0:	2002      	movs	r0, #2
    1dd2:	47b0      	blx	r6
		  delay_ms(1);
    1dd4:	2001      	movs	r0, #1
    1dd6:	47a0      	blx	r4
		  LTC681x_adax(0b10, 0b000 );
    1dd8:	2100      	movs	r1, #0
    1dda:	2002      	movs	r0, #2
    1ddc:	47c0      	blx	r8
		  LTC681x_adstat(0b10,000);
    1dde:	2100      	movs	r1, #0
    1de0:	2002      	movs	r0, #2
    1de2:	47b0      	blx	r6
		  LTC681x_adcv(0b10,0b0,0b000);
    1de4:	2200      	movs	r2, #0
    1de6:	2100      	movs	r1, #0
    1de8:	2002      	movs	r0, #2
    1dea:	47b8      	blx	r7
		  LTC681x_adstat(0b10,000);
    1dec:	2100      	movs	r1, #0
    1dee:	2002      	movs	r0, #2
    1df0:	47b0      	blx	r6
		  LTC681x_rdaux_reg(1,1);
    1df2:	2101      	movs	r1, #1
    1df4:	2001      	movs	r0, #1
    1df6:	47a8      	blx	r5
		  delay_ms(1);
    1df8:	2001      	movs	r0, #1
    1dfa:	47a0      	blx	r4
		  LTC681x_adstat(0b10,000);
    1dfc:	2100      	movs	r1, #0
    1dfe:	2002      	movs	r0, #2
    1e00:	47b0      	blx	r6
		  LTC681x_rdaux_reg(2,1);
    1e02:	2101      	movs	r1, #1
    1e04:	2002      	movs	r0, #2
    1e06:	47a8      	blx	r5
		 delay_ms(1);
    1e08:	2001      	movs	r0, #1
    1e0a:	47a0      	blx	r4
    1e0c:	e6c5      	b.n	1b9a <usart_done+0x7e>
		 LTC681x_adcv(0b10,0b0,0b000);
    1e0e:	2200      	movs	r2, #0
    1e10:	2100      	movs	r1, #0
    1e12:	2002      	movs	r0, #2
    1e14:	4b1f      	ldr	r3, [pc, #124]	; (1e94 <usart_done+0x378>)
    1e16:	4798      	blx	r3
    1e18:	e6bf      	b.n	1b9a <usart_done+0x7e>
		 LTC681x_adax(0b10, 0b000 );
    1e1a:	2100      	movs	r1, #0
    1e1c:	2002      	movs	r0, #2
    1e1e:	4b1c      	ldr	r3, [pc, #112]	; (1e90 <usart_done+0x374>)
    1e20:	4798      	blx	r3
		 LTC681x_adcv(0b10,0b0,0b000);
    1e22:	2200      	movs	r2, #0
    1e24:	2100      	movs	r1, #0
    1e26:	2002      	movs	r0, #2
    1e28:	4b1a      	ldr	r3, [pc, #104]	; (1e94 <usart_done+0x378>)
    1e2a:	4798      	blx	r3
    1e2c:	e6b5      	b.n	1b9a <usart_done+0x7e>
    1e2e:	46c0      	nop			; (mov r8, r8)
    1e30:	200001f4 	.word	0x200001f4
    1e34:	00006128 	.word	0x00006128
    1e38:	00001ad1 	.word	0x00001ad1
    1e3c:	200001f0 	.word	0x200001f0
    1e40:	200002bc 	.word	0x200002bc
    1e44:	20000014 	.word	0x20000014
    1e48:	000007a5 	.word	0x000007a5
    1e4c:	0000611c 	.word	0x0000611c
    1e50:	20000020 	.word	0x20000020
    1e54:	200001f5 	.word	0x200001f5
    1e58:	00001a99 	.word	0x00001a99
    1e5c:	200001c4 	.word	0x200001c4
    1e60:	200002f4 	.word	0x200002f4
    1e64:	00000635 	.word	0x00000635
    1e68:	00001217 	.word	0x00001217
    1e6c:	00001285 	.word	0x00001285
    1e70:	000027e5 	.word	0x000027e5
    1e74:	44520000 	.word	0x44520000
    1e78:	00001f9d 	.word	0x00001f9d
    1e7c:	00003b61 	.word	0x00003b61
    1e80:	00004081 	.word	0x00004081
    1e84:	00006118 	.word	0x00006118
    1e88:	00001951 	.word	0x00001951
    1e8c:	00001a1d 	.word	0x00001a1d
    1e90:	000019d5 	.word	0x000019d5
    1e94:	000019a1 	.word	0x000019a1
    1e98:	000019f9 	.word	0x000019f9

00001e9c <serial_tx_cb>:

static void serial_tx_cb(const struct usart_async_descriptor *const io_descr) {
	
	// Do nothing when tx interrupt is called
	
}
    1e9c:	4770      	bx	lr
	...

00001ea0 <serial_rx_cb>:
{
    1ea0:	b510      	push	{r4, lr}
    1ea2:	b082      	sub	sp, #8
	count = io_read(&USART_0.io, &ch, 1);
    1ea4:	2201      	movs	r2, #1
    1ea6:	466b      	mov	r3, sp
    1ea8:	1dd9      	adds	r1, r3, #7
    1eaa:	481f      	ldr	r0, [pc, #124]	; (1f28 <serial_rx_cb+0x88>)
    1eac:	4b1f      	ldr	r3, [pc, #124]	; (1f2c <serial_rx_cb+0x8c>)
    1eae:	4798      	blx	r3
    1eb0:	b2c1      	uxtb	r1, r0
	if(serial_receiving == 0)
    1eb2:	4b1f      	ldr	r3, [pc, #124]	; (1f30 <serial_rx_cb+0x90>)
    1eb4:	781b      	ldrb	r3, [r3, #0]
    1eb6:	2b00      	cmp	r3, #0
    1eb8:	d112      	bne.n	1ee0 <serial_rx_cb+0x40>
		if (ch != '\r' && ch != '\n')
    1eba:	466b      	mov	r3, sp
    1ebc:	79da      	ldrb	r2, [r3, #7]
    1ebe:	2a0d      	cmp	r2, #13
    1ec0:	d024      	beq.n	1f0c <serial_rx_cb+0x6c>
    1ec2:	2a0a      	cmp	r2, #10
    1ec4:	d022      	beq.n	1f0c <serial_rx_cb+0x6c>
			serial_receiving =1;
    1ec6:	4b1a      	ldr	r3, [pc, #104]	; (1f30 <serial_rx_cb+0x90>)
    1ec8:	2001      	movs	r0, #1
    1eca:	7018      	strb	r0, [r3, #0]
			serial_received_bytes_counter = 0;
    1ecc:	2000      	movs	r0, #0
    1ece:	7058      	strb	r0, [r3, #1]
			rx_buffer[serial_received_bytes_counter] = ch;
    1ed0:	7858      	ldrb	r0, [r3, #1]
    1ed2:	1818      	adds	r0, r3, r0
    1ed4:	7102      	strb	r2, [r0, #4]
			serial_received_bytes_counter += count;
    1ed6:	7858      	ldrb	r0, [r3, #1]
    1ed8:	1840      	adds	r0, r0, r1
    1eda:	b2c0      	uxtb	r0, r0
    1edc:	7058      	strb	r0, [r3, #1]
    1ede:	e015      	b.n	1f0c <serial_rx_cb+0x6c>
		rx_buffer[serial_received_bytes_counter] = ch;
    1ee0:	4b13      	ldr	r3, [pc, #76]	; (1f30 <serial_rx_cb+0x90>)
    1ee2:	785a      	ldrb	r2, [r3, #1]
    1ee4:	4668      	mov	r0, sp
    1ee6:	79c4      	ldrb	r4, [r0, #7]
    1ee8:	189a      	adds	r2, r3, r2
    1eea:	7114      	strb	r4, [r2, #4]
		serial_received_bytes_counter += count;
    1eec:	7858      	ldrb	r0, [r3, #1]
    1eee:	1840      	adds	r0, r0, r1
    1ef0:	b2c0      	uxtb	r0, r0
    1ef2:	7058      	strb	r0, [r3, #1]
		if (ch == '\r' || ch == '\n')
    1ef4:	2c0d      	cmp	r4, #13
    1ef6:	d00b      	beq.n	1f10 <serial_rx_cb+0x70>
    1ef8:	2c0a      	cmp	r4, #10
    1efa:	d009      	beq.n	1f10 <serial_rx_cb+0x70>
		if(serial_received_bytes_counter >= SERIAL_BUF_SIZE)
    1efc:	4b0c      	ldr	r3, [pc, #48]	; (1f30 <serial_rx_cb+0x90>)
    1efe:	785b      	ldrb	r3, [r3, #1]
    1f00:	b2db      	uxtb	r3, r3
    1f02:	2bc7      	cmp	r3, #199	; 0xc7
    1f04:	d902      	bls.n	1f0c <serial_rx_cb+0x6c>
			serial_received_bytes_counter = 0;
    1f06:	2200      	movs	r2, #0
    1f08:	4b09      	ldr	r3, [pc, #36]	; (1f30 <serial_rx_cb+0x90>)
    1f0a:	705a      	strb	r2, [r3, #1]
}
    1f0c:	b002      	add	sp, #8
    1f0e:	bd10      	pop	{r4, pc}
			serial_complete = 1;
    1f10:	4a08      	ldr	r2, [pc, #32]	; (1f34 <serial_rx_cb+0x94>)
    1f12:	2101      	movs	r1, #1
    1f14:	234c      	movs	r3, #76	; 0x4c
    1f16:	54d1      	strb	r1, [r2, r3]
			total_bytes = serial_received_bytes_counter - 2;
    1f18:	4b05      	ldr	r3, [pc, #20]	; (1f30 <serial_rx_cb+0x90>)
    1f1a:	785b      	ldrb	r3, [r3, #1]
    1f1c:	3b02      	subs	r3, #2
    1f1e:	b2db      	uxtb	r3, r3
    1f20:	314c      	adds	r1, #76	; 0x4c
    1f22:	5453      	strb	r3, [r2, r1]
    1f24:	e7ea      	b.n	1efc <serial_rx_cb+0x5c>
    1f26:	46c0      	nop			; (mov r8, r8)
    1f28:	20000310 	.word	0x20000310
    1f2c:	000007f9 	.word	0x000007f9
    1f30:	200001f0 	.word	0x200001f0
    1f34:	20000270 	.word	0x20000270

00001f38 <uart_init>:

void uart_init(){
    1f38:	b570      	push	{r4, r5, r6, lr}

	usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, serial_tx_cb);
    1f3a:	4c07      	ldr	r4, [pc, #28]	; (1f58 <uart_init+0x20>)
    1f3c:	4a07      	ldr	r2, [pc, #28]	; (1f5c <uart_init+0x24>)
    1f3e:	2101      	movs	r1, #1
    1f40:	0020      	movs	r0, r4
    1f42:	4d07      	ldr	r5, [pc, #28]	; (1f60 <uart_init+0x28>)
    1f44:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, serial_rx_cb);
    1f46:	4a07      	ldr	r2, [pc, #28]	; (1f64 <uart_init+0x2c>)
    1f48:	2100      	movs	r1, #0
    1f4a:	0020      	movs	r0, r4
    1f4c:	47a8      	blx	r5
	usart_async_enable(&USART_0);
    1f4e:	0020      	movs	r0, r4
    1f50:	4b05      	ldr	r3, [pc, #20]	; (1f68 <uart_init+0x30>)
    1f52:	4798      	blx	r3
	
}
    1f54:	bd70      	pop	{r4, r5, r6, pc}
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	20000310 	.word	0x20000310
    1f5c:	00001e9d 	.word	0x00001e9d
    1f60:	00000c55 	.word	0x00000c55
    1f64:	00001ea1 	.word	0x00001ea1
    1f68:	00000c29 	.word	0x00000c29

00001f6c <__aeabi_f2uiz>:
    1f6c:	219e      	movs	r1, #158	; 0x9e
    1f6e:	b510      	push	{r4, lr}
    1f70:	05c9      	lsls	r1, r1, #23
    1f72:	1c04      	adds	r4, r0, #0
    1f74:	f001 feb4 	bl	3ce0 <__aeabi_fcmpge>
    1f78:	2800      	cmp	r0, #0
    1f7a:	d103      	bne.n	1f84 <__aeabi_f2uiz+0x18>
    1f7c:	1c20      	adds	r0, r4, #0
    1f7e:	f000 fc11 	bl	27a4 <__aeabi_f2iz>
    1f82:	bd10      	pop	{r4, pc}
    1f84:	219e      	movs	r1, #158	; 0x9e
    1f86:	1c20      	adds	r0, r4, #0
    1f88:	05c9      	lsls	r1, r1, #23
    1f8a:	f000 fa6f 	bl	246c <__aeabi_fsub>
    1f8e:	f000 fc09 	bl	27a4 <__aeabi_f2iz>
    1f92:	2380      	movs	r3, #128	; 0x80
    1f94:	061b      	lsls	r3, r3, #24
    1f96:	469c      	mov	ip, r3
    1f98:	4460      	add	r0, ip
    1f9a:	e7f2      	b.n	1f82 <__aeabi_f2uiz+0x16>

00001f9c <__aeabi_fdiv>:
    1f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f9e:	4657      	mov	r7, sl
    1fa0:	464e      	mov	r6, r9
    1fa2:	46de      	mov	lr, fp
    1fa4:	4645      	mov	r5, r8
    1fa6:	b5e0      	push	{r5, r6, r7, lr}
    1fa8:	0244      	lsls	r4, r0, #9
    1faa:	0043      	lsls	r3, r0, #1
    1fac:	0fc6      	lsrs	r6, r0, #31
    1fae:	b083      	sub	sp, #12
    1fb0:	1c0f      	adds	r7, r1, #0
    1fb2:	0a64      	lsrs	r4, r4, #9
    1fb4:	0e1b      	lsrs	r3, r3, #24
    1fb6:	46b2      	mov	sl, r6
    1fb8:	d053      	beq.n	2062 <STACK_SIZE+0x62>
    1fba:	2bff      	cmp	r3, #255	; 0xff
    1fbc:	d027      	beq.n	200e <STACK_SIZE+0xe>
    1fbe:	2280      	movs	r2, #128	; 0x80
    1fc0:	00e4      	lsls	r4, r4, #3
    1fc2:	04d2      	lsls	r2, r2, #19
    1fc4:	4314      	orrs	r4, r2
    1fc6:	227f      	movs	r2, #127	; 0x7f
    1fc8:	4252      	negs	r2, r2
    1fca:	4690      	mov	r8, r2
    1fcc:	4498      	add	r8, r3
    1fce:	2300      	movs	r3, #0
    1fd0:	4699      	mov	r9, r3
    1fd2:	469b      	mov	fp, r3
    1fd4:	027d      	lsls	r5, r7, #9
    1fd6:	0078      	lsls	r0, r7, #1
    1fd8:	0ffb      	lsrs	r3, r7, #31
    1fda:	0a6d      	lsrs	r5, r5, #9
    1fdc:	0e00      	lsrs	r0, r0, #24
    1fde:	9300      	str	r3, [sp, #0]
    1fe0:	d024      	beq.n	202c <STACK_SIZE+0x2c>
    1fe2:	28ff      	cmp	r0, #255	; 0xff
    1fe4:	d046      	beq.n	2074 <STACK_SIZE+0x74>
    1fe6:	2380      	movs	r3, #128	; 0x80
    1fe8:	2100      	movs	r1, #0
    1fea:	00ed      	lsls	r5, r5, #3
    1fec:	04db      	lsls	r3, r3, #19
    1fee:	431d      	orrs	r5, r3
    1ff0:	387f      	subs	r0, #127	; 0x7f
    1ff2:	4647      	mov	r7, r8
    1ff4:	1a38      	subs	r0, r7, r0
    1ff6:	464f      	mov	r7, r9
    1ff8:	430f      	orrs	r7, r1
    1ffa:	00bf      	lsls	r7, r7, #2
    1ffc:	46b9      	mov	r9, r7
    1ffe:	0033      	movs	r3, r6
    2000:	9a00      	ldr	r2, [sp, #0]
    2002:	4f87      	ldr	r7, [pc, #540]	; (2220 <STACK_SIZE+0x220>)
    2004:	4053      	eors	r3, r2
    2006:	464a      	mov	r2, r9
    2008:	58ba      	ldr	r2, [r7, r2]
    200a:	9301      	str	r3, [sp, #4]
    200c:	4697      	mov	pc, r2
    200e:	2c00      	cmp	r4, #0
    2010:	d14e      	bne.n	20b0 <STACK_SIZE+0xb0>
    2012:	2308      	movs	r3, #8
    2014:	4699      	mov	r9, r3
    2016:	33f7      	adds	r3, #247	; 0xf7
    2018:	4698      	mov	r8, r3
    201a:	3bfd      	subs	r3, #253	; 0xfd
    201c:	469b      	mov	fp, r3
    201e:	027d      	lsls	r5, r7, #9
    2020:	0078      	lsls	r0, r7, #1
    2022:	0ffb      	lsrs	r3, r7, #31
    2024:	0a6d      	lsrs	r5, r5, #9
    2026:	0e00      	lsrs	r0, r0, #24
    2028:	9300      	str	r3, [sp, #0]
    202a:	d1da      	bne.n	1fe2 <__aeabi_fdiv+0x46>
    202c:	2d00      	cmp	r5, #0
    202e:	d126      	bne.n	207e <STACK_SIZE+0x7e>
    2030:	2000      	movs	r0, #0
    2032:	2101      	movs	r1, #1
    2034:	0033      	movs	r3, r6
    2036:	9a00      	ldr	r2, [sp, #0]
    2038:	4f7a      	ldr	r7, [pc, #488]	; (2224 <STACK_SIZE+0x224>)
    203a:	4053      	eors	r3, r2
    203c:	4642      	mov	r2, r8
    203e:	1a10      	subs	r0, r2, r0
    2040:	464a      	mov	r2, r9
    2042:	430a      	orrs	r2, r1
    2044:	0092      	lsls	r2, r2, #2
    2046:	58ba      	ldr	r2, [r7, r2]
    2048:	001d      	movs	r5, r3
    204a:	4697      	mov	pc, r2
    204c:	9b00      	ldr	r3, [sp, #0]
    204e:	002c      	movs	r4, r5
    2050:	469a      	mov	sl, r3
    2052:	468b      	mov	fp, r1
    2054:	465b      	mov	r3, fp
    2056:	2b02      	cmp	r3, #2
    2058:	d131      	bne.n	20be <STACK_SIZE+0xbe>
    205a:	4653      	mov	r3, sl
    205c:	21ff      	movs	r1, #255	; 0xff
    205e:	2400      	movs	r4, #0
    2060:	e038      	b.n	20d4 <STACK_SIZE+0xd4>
    2062:	2c00      	cmp	r4, #0
    2064:	d117      	bne.n	2096 <STACK_SIZE+0x96>
    2066:	2304      	movs	r3, #4
    2068:	4699      	mov	r9, r3
    206a:	2300      	movs	r3, #0
    206c:	4698      	mov	r8, r3
    206e:	3301      	adds	r3, #1
    2070:	469b      	mov	fp, r3
    2072:	e7af      	b.n	1fd4 <__aeabi_fdiv+0x38>
    2074:	20ff      	movs	r0, #255	; 0xff
    2076:	2d00      	cmp	r5, #0
    2078:	d10b      	bne.n	2092 <STACK_SIZE+0x92>
    207a:	2102      	movs	r1, #2
    207c:	e7da      	b.n	2034 <STACK_SIZE+0x34>
    207e:	0028      	movs	r0, r5
    2080:	f001 fe38 	bl	3cf4 <__clzsi2>
    2084:	1f43      	subs	r3, r0, #5
    2086:	409d      	lsls	r5, r3
    2088:	2376      	movs	r3, #118	; 0x76
    208a:	425b      	negs	r3, r3
    208c:	1a18      	subs	r0, r3, r0
    208e:	2100      	movs	r1, #0
    2090:	e7af      	b.n	1ff2 <__aeabi_fdiv+0x56>
    2092:	2103      	movs	r1, #3
    2094:	e7ad      	b.n	1ff2 <__aeabi_fdiv+0x56>
    2096:	0020      	movs	r0, r4
    2098:	f001 fe2c 	bl	3cf4 <__clzsi2>
    209c:	1f43      	subs	r3, r0, #5
    209e:	409c      	lsls	r4, r3
    20a0:	2376      	movs	r3, #118	; 0x76
    20a2:	425b      	negs	r3, r3
    20a4:	1a1b      	subs	r3, r3, r0
    20a6:	4698      	mov	r8, r3
    20a8:	2300      	movs	r3, #0
    20aa:	4699      	mov	r9, r3
    20ac:	469b      	mov	fp, r3
    20ae:	e791      	b.n	1fd4 <__aeabi_fdiv+0x38>
    20b0:	230c      	movs	r3, #12
    20b2:	4699      	mov	r9, r3
    20b4:	33f3      	adds	r3, #243	; 0xf3
    20b6:	4698      	mov	r8, r3
    20b8:	3bfc      	subs	r3, #252	; 0xfc
    20ba:	469b      	mov	fp, r3
    20bc:	e78a      	b.n	1fd4 <__aeabi_fdiv+0x38>
    20be:	2b03      	cmp	r3, #3
    20c0:	d100      	bne.n	20c4 <STACK_SIZE+0xc4>
    20c2:	e0a5      	b.n	2210 <STACK_SIZE+0x210>
    20c4:	4655      	mov	r5, sl
    20c6:	2b01      	cmp	r3, #1
    20c8:	d000      	beq.n	20cc <STACK_SIZE+0xcc>
    20ca:	e081      	b.n	21d0 <STACK_SIZE+0x1d0>
    20cc:	2301      	movs	r3, #1
    20ce:	2100      	movs	r1, #0
    20d0:	2400      	movs	r4, #0
    20d2:	402b      	ands	r3, r5
    20d4:	0264      	lsls	r4, r4, #9
    20d6:	05c9      	lsls	r1, r1, #23
    20d8:	0a60      	lsrs	r0, r4, #9
    20da:	07db      	lsls	r3, r3, #31
    20dc:	4308      	orrs	r0, r1
    20de:	4318      	orrs	r0, r3
    20e0:	b003      	add	sp, #12
    20e2:	bc3c      	pop	{r2, r3, r4, r5}
    20e4:	4690      	mov	r8, r2
    20e6:	4699      	mov	r9, r3
    20e8:	46a2      	mov	sl, r4
    20ea:	46ab      	mov	fp, r5
    20ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20ee:	2480      	movs	r4, #128	; 0x80
    20f0:	2300      	movs	r3, #0
    20f2:	03e4      	lsls	r4, r4, #15
    20f4:	21ff      	movs	r1, #255	; 0xff
    20f6:	e7ed      	b.n	20d4 <STACK_SIZE+0xd4>
    20f8:	21ff      	movs	r1, #255	; 0xff
    20fa:	2400      	movs	r4, #0
    20fc:	e7ea      	b.n	20d4 <STACK_SIZE+0xd4>
    20fe:	2301      	movs	r3, #1
    2100:	1a59      	subs	r1, r3, r1
    2102:	291b      	cmp	r1, #27
    2104:	dd66      	ble.n	21d4 <STACK_SIZE+0x1d4>
    2106:	9a01      	ldr	r2, [sp, #4]
    2108:	4013      	ands	r3, r2
    210a:	2100      	movs	r1, #0
    210c:	2400      	movs	r4, #0
    210e:	e7e1      	b.n	20d4 <STACK_SIZE+0xd4>
    2110:	2380      	movs	r3, #128	; 0x80
    2112:	03db      	lsls	r3, r3, #15
    2114:	421c      	tst	r4, r3
    2116:	d038      	beq.n	218a <STACK_SIZE+0x18a>
    2118:	421d      	tst	r5, r3
    211a:	d051      	beq.n	21c0 <STACK_SIZE+0x1c0>
    211c:	431c      	orrs	r4, r3
    211e:	0264      	lsls	r4, r4, #9
    2120:	0a64      	lsrs	r4, r4, #9
    2122:	0033      	movs	r3, r6
    2124:	21ff      	movs	r1, #255	; 0xff
    2126:	e7d5      	b.n	20d4 <STACK_SIZE+0xd4>
    2128:	0163      	lsls	r3, r4, #5
    212a:	016c      	lsls	r4, r5, #5
    212c:	42a3      	cmp	r3, r4
    212e:	d23b      	bcs.n	21a8 <STACK_SIZE+0x1a8>
    2130:	261b      	movs	r6, #27
    2132:	2100      	movs	r1, #0
    2134:	3801      	subs	r0, #1
    2136:	2501      	movs	r5, #1
    2138:	001f      	movs	r7, r3
    213a:	0049      	lsls	r1, r1, #1
    213c:	005b      	lsls	r3, r3, #1
    213e:	2f00      	cmp	r7, #0
    2140:	db01      	blt.n	2146 <STACK_SIZE+0x146>
    2142:	429c      	cmp	r4, r3
    2144:	d801      	bhi.n	214a <STACK_SIZE+0x14a>
    2146:	1b1b      	subs	r3, r3, r4
    2148:	4329      	orrs	r1, r5
    214a:	3e01      	subs	r6, #1
    214c:	2e00      	cmp	r6, #0
    214e:	d1f3      	bne.n	2138 <STACK_SIZE+0x138>
    2150:	001c      	movs	r4, r3
    2152:	1e63      	subs	r3, r4, #1
    2154:	419c      	sbcs	r4, r3
    2156:	430c      	orrs	r4, r1
    2158:	0001      	movs	r1, r0
    215a:	317f      	adds	r1, #127	; 0x7f
    215c:	2900      	cmp	r1, #0
    215e:	ddce      	ble.n	20fe <STACK_SIZE+0xfe>
    2160:	0763      	lsls	r3, r4, #29
    2162:	d004      	beq.n	216e <STACK_SIZE+0x16e>
    2164:	230f      	movs	r3, #15
    2166:	4023      	ands	r3, r4
    2168:	2b04      	cmp	r3, #4
    216a:	d000      	beq.n	216e <STACK_SIZE+0x16e>
    216c:	3404      	adds	r4, #4
    216e:	0123      	lsls	r3, r4, #4
    2170:	d503      	bpl.n	217a <STACK_SIZE+0x17a>
    2172:	0001      	movs	r1, r0
    2174:	4b2c      	ldr	r3, [pc, #176]	; (2228 <STACK_SIZE+0x228>)
    2176:	3180      	adds	r1, #128	; 0x80
    2178:	401c      	ands	r4, r3
    217a:	29fe      	cmp	r1, #254	; 0xfe
    217c:	dd0d      	ble.n	219a <STACK_SIZE+0x19a>
    217e:	2301      	movs	r3, #1
    2180:	9a01      	ldr	r2, [sp, #4]
    2182:	21ff      	movs	r1, #255	; 0xff
    2184:	4013      	ands	r3, r2
    2186:	2400      	movs	r4, #0
    2188:	e7a4      	b.n	20d4 <STACK_SIZE+0xd4>
    218a:	2380      	movs	r3, #128	; 0x80
    218c:	03db      	lsls	r3, r3, #15
    218e:	431c      	orrs	r4, r3
    2190:	0264      	lsls	r4, r4, #9
    2192:	0a64      	lsrs	r4, r4, #9
    2194:	0033      	movs	r3, r6
    2196:	21ff      	movs	r1, #255	; 0xff
    2198:	e79c      	b.n	20d4 <STACK_SIZE+0xd4>
    219a:	2301      	movs	r3, #1
    219c:	9a01      	ldr	r2, [sp, #4]
    219e:	01a4      	lsls	r4, r4, #6
    21a0:	0a64      	lsrs	r4, r4, #9
    21a2:	b2c9      	uxtb	r1, r1
    21a4:	4013      	ands	r3, r2
    21a6:	e795      	b.n	20d4 <STACK_SIZE+0xd4>
    21a8:	1b1b      	subs	r3, r3, r4
    21aa:	261a      	movs	r6, #26
    21ac:	2101      	movs	r1, #1
    21ae:	e7c2      	b.n	2136 <STACK_SIZE+0x136>
    21b0:	9b00      	ldr	r3, [sp, #0]
    21b2:	468b      	mov	fp, r1
    21b4:	469a      	mov	sl, r3
    21b6:	2400      	movs	r4, #0
    21b8:	e74c      	b.n	2054 <STACK_SIZE+0x54>
    21ba:	0263      	lsls	r3, r4, #9
    21bc:	d5e5      	bpl.n	218a <STACK_SIZE+0x18a>
    21be:	2500      	movs	r5, #0
    21c0:	2480      	movs	r4, #128	; 0x80
    21c2:	03e4      	lsls	r4, r4, #15
    21c4:	432c      	orrs	r4, r5
    21c6:	0264      	lsls	r4, r4, #9
    21c8:	0a64      	lsrs	r4, r4, #9
    21ca:	9b00      	ldr	r3, [sp, #0]
    21cc:	21ff      	movs	r1, #255	; 0xff
    21ce:	e781      	b.n	20d4 <STACK_SIZE+0xd4>
    21d0:	9501      	str	r5, [sp, #4]
    21d2:	e7c1      	b.n	2158 <STACK_SIZE+0x158>
    21d4:	0023      	movs	r3, r4
    21d6:	2020      	movs	r0, #32
    21d8:	40cb      	lsrs	r3, r1
    21da:	1a41      	subs	r1, r0, r1
    21dc:	408c      	lsls	r4, r1
    21de:	1e61      	subs	r1, r4, #1
    21e0:	418c      	sbcs	r4, r1
    21e2:	431c      	orrs	r4, r3
    21e4:	0763      	lsls	r3, r4, #29
    21e6:	d004      	beq.n	21f2 <STACK_SIZE+0x1f2>
    21e8:	230f      	movs	r3, #15
    21ea:	4023      	ands	r3, r4
    21ec:	2b04      	cmp	r3, #4
    21ee:	d000      	beq.n	21f2 <STACK_SIZE+0x1f2>
    21f0:	3404      	adds	r4, #4
    21f2:	0163      	lsls	r3, r4, #5
    21f4:	d505      	bpl.n	2202 <STACK_SIZE+0x202>
    21f6:	2301      	movs	r3, #1
    21f8:	9a01      	ldr	r2, [sp, #4]
    21fa:	2101      	movs	r1, #1
    21fc:	4013      	ands	r3, r2
    21fe:	2400      	movs	r4, #0
    2200:	e768      	b.n	20d4 <STACK_SIZE+0xd4>
    2202:	2301      	movs	r3, #1
    2204:	9a01      	ldr	r2, [sp, #4]
    2206:	01a4      	lsls	r4, r4, #6
    2208:	0a64      	lsrs	r4, r4, #9
    220a:	4013      	ands	r3, r2
    220c:	2100      	movs	r1, #0
    220e:	e761      	b.n	20d4 <STACK_SIZE+0xd4>
    2210:	2380      	movs	r3, #128	; 0x80
    2212:	03db      	lsls	r3, r3, #15
    2214:	431c      	orrs	r4, r3
    2216:	0264      	lsls	r4, r4, #9
    2218:	0a64      	lsrs	r4, r4, #9
    221a:	4653      	mov	r3, sl
    221c:	21ff      	movs	r1, #255	; 0xff
    221e:	e759      	b.n	20d4 <STACK_SIZE+0xd4>
    2220:	00006140 	.word	0x00006140
    2224:	00006180 	.word	0x00006180
    2228:	f7ffffff 	.word	0xf7ffffff

0000222c <__aeabi_fmul>:
    222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    222e:	4657      	mov	r7, sl
    2230:	464e      	mov	r6, r9
    2232:	4645      	mov	r5, r8
    2234:	46de      	mov	lr, fp
    2236:	b5e0      	push	{r5, r6, r7, lr}
    2238:	0247      	lsls	r7, r0, #9
    223a:	0046      	lsls	r6, r0, #1
    223c:	4688      	mov	r8, r1
    223e:	0a7f      	lsrs	r7, r7, #9
    2240:	0e36      	lsrs	r6, r6, #24
    2242:	0fc4      	lsrs	r4, r0, #31
    2244:	2e00      	cmp	r6, #0
    2246:	d047      	beq.n	22d8 <__aeabi_fmul+0xac>
    2248:	2eff      	cmp	r6, #255	; 0xff
    224a:	d024      	beq.n	2296 <__aeabi_fmul+0x6a>
    224c:	00fb      	lsls	r3, r7, #3
    224e:	2780      	movs	r7, #128	; 0x80
    2250:	04ff      	lsls	r7, r7, #19
    2252:	431f      	orrs	r7, r3
    2254:	2300      	movs	r3, #0
    2256:	4699      	mov	r9, r3
    2258:	469a      	mov	sl, r3
    225a:	3e7f      	subs	r6, #127	; 0x7f
    225c:	4643      	mov	r3, r8
    225e:	025d      	lsls	r5, r3, #9
    2260:	0058      	lsls	r0, r3, #1
    2262:	0fdb      	lsrs	r3, r3, #31
    2264:	0a6d      	lsrs	r5, r5, #9
    2266:	0e00      	lsrs	r0, r0, #24
    2268:	4698      	mov	r8, r3
    226a:	d043      	beq.n	22f4 <__aeabi_fmul+0xc8>
    226c:	28ff      	cmp	r0, #255	; 0xff
    226e:	d03b      	beq.n	22e8 <__aeabi_fmul+0xbc>
    2270:	00eb      	lsls	r3, r5, #3
    2272:	2580      	movs	r5, #128	; 0x80
    2274:	2200      	movs	r2, #0
    2276:	04ed      	lsls	r5, r5, #19
    2278:	431d      	orrs	r5, r3
    227a:	387f      	subs	r0, #127	; 0x7f
    227c:	1836      	adds	r6, r6, r0
    227e:	1c73      	adds	r3, r6, #1
    2280:	4641      	mov	r1, r8
    2282:	469b      	mov	fp, r3
    2284:	464b      	mov	r3, r9
    2286:	4061      	eors	r1, r4
    2288:	4313      	orrs	r3, r2
    228a:	2b0f      	cmp	r3, #15
    228c:	d864      	bhi.n	2358 <__aeabi_fmul+0x12c>
    228e:	4875      	ldr	r0, [pc, #468]	; (2464 <__aeabi_fmul+0x238>)
    2290:	009b      	lsls	r3, r3, #2
    2292:	58c3      	ldr	r3, [r0, r3]
    2294:	469f      	mov	pc, r3
    2296:	2f00      	cmp	r7, #0
    2298:	d142      	bne.n	2320 <__aeabi_fmul+0xf4>
    229a:	2308      	movs	r3, #8
    229c:	4699      	mov	r9, r3
    229e:	3b06      	subs	r3, #6
    22a0:	26ff      	movs	r6, #255	; 0xff
    22a2:	469a      	mov	sl, r3
    22a4:	e7da      	b.n	225c <__aeabi_fmul+0x30>
    22a6:	4641      	mov	r1, r8
    22a8:	2a02      	cmp	r2, #2
    22aa:	d028      	beq.n	22fe <__aeabi_fmul+0xd2>
    22ac:	2a03      	cmp	r2, #3
    22ae:	d100      	bne.n	22b2 <__aeabi_fmul+0x86>
    22b0:	e0ce      	b.n	2450 <__aeabi_fmul+0x224>
    22b2:	2a01      	cmp	r2, #1
    22b4:	d000      	beq.n	22b8 <__aeabi_fmul+0x8c>
    22b6:	e0ac      	b.n	2412 <__aeabi_fmul+0x1e6>
    22b8:	4011      	ands	r1, r2
    22ba:	2000      	movs	r0, #0
    22bc:	2200      	movs	r2, #0
    22be:	b2cc      	uxtb	r4, r1
    22c0:	0240      	lsls	r0, r0, #9
    22c2:	05d2      	lsls	r2, r2, #23
    22c4:	0a40      	lsrs	r0, r0, #9
    22c6:	07e4      	lsls	r4, r4, #31
    22c8:	4310      	orrs	r0, r2
    22ca:	4320      	orrs	r0, r4
    22cc:	bc3c      	pop	{r2, r3, r4, r5}
    22ce:	4690      	mov	r8, r2
    22d0:	4699      	mov	r9, r3
    22d2:	46a2      	mov	sl, r4
    22d4:	46ab      	mov	fp, r5
    22d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22d8:	2f00      	cmp	r7, #0
    22da:	d115      	bne.n	2308 <__aeabi_fmul+0xdc>
    22dc:	2304      	movs	r3, #4
    22de:	4699      	mov	r9, r3
    22e0:	3b03      	subs	r3, #3
    22e2:	2600      	movs	r6, #0
    22e4:	469a      	mov	sl, r3
    22e6:	e7b9      	b.n	225c <__aeabi_fmul+0x30>
    22e8:	20ff      	movs	r0, #255	; 0xff
    22ea:	2202      	movs	r2, #2
    22ec:	2d00      	cmp	r5, #0
    22ee:	d0c5      	beq.n	227c <__aeabi_fmul+0x50>
    22f0:	2203      	movs	r2, #3
    22f2:	e7c3      	b.n	227c <__aeabi_fmul+0x50>
    22f4:	2d00      	cmp	r5, #0
    22f6:	d119      	bne.n	232c <__aeabi_fmul+0x100>
    22f8:	2000      	movs	r0, #0
    22fa:	2201      	movs	r2, #1
    22fc:	e7be      	b.n	227c <__aeabi_fmul+0x50>
    22fe:	2401      	movs	r4, #1
    2300:	22ff      	movs	r2, #255	; 0xff
    2302:	400c      	ands	r4, r1
    2304:	2000      	movs	r0, #0
    2306:	e7db      	b.n	22c0 <__aeabi_fmul+0x94>
    2308:	0038      	movs	r0, r7
    230a:	f001 fcf3 	bl	3cf4 <__clzsi2>
    230e:	2676      	movs	r6, #118	; 0x76
    2310:	1f43      	subs	r3, r0, #5
    2312:	409f      	lsls	r7, r3
    2314:	2300      	movs	r3, #0
    2316:	4276      	negs	r6, r6
    2318:	1a36      	subs	r6, r6, r0
    231a:	4699      	mov	r9, r3
    231c:	469a      	mov	sl, r3
    231e:	e79d      	b.n	225c <__aeabi_fmul+0x30>
    2320:	230c      	movs	r3, #12
    2322:	4699      	mov	r9, r3
    2324:	3b09      	subs	r3, #9
    2326:	26ff      	movs	r6, #255	; 0xff
    2328:	469a      	mov	sl, r3
    232a:	e797      	b.n	225c <__aeabi_fmul+0x30>
    232c:	0028      	movs	r0, r5
    232e:	f001 fce1 	bl	3cf4 <__clzsi2>
    2332:	1f43      	subs	r3, r0, #5
    2334:	409d      	lsls	r5, r3
    2336:	2376      	movs	r3, #118	; 0x76
    2338:	425b      	negs	r3, r3
    233a:	1a18      	subs	r0, r3, r0
    233c:	2200      	movs	r2, #0
    233e:	e79d      	b.n	227c <__aeabi_fmul+0x50>
    2340:	2080      	movs	r0, #128	; 0x80
    2342:	2400      	movs	r4, #0
    2344:	03c0      	lsls	r0, r0, #15
    2346:	22ff      	movs	r2, #255	; 0xff
    2348:	e7ba      	b.n	22c0 <__aeabi_fmul+0x94>
    234a:	003d      	movs	r5, r7
    234c:	4652      	mov	r2, sl
    234e:	e7ab      	b.n	22a8 <__aeabi_fmul+0x7c>
    2350:	003d      	movs	r5, r7
    2352:	0021      	movs	r1, r4
    2354:	4652      	mov	r2, sl
    2356:	e7a7      	b.n	22a8 <__aeabi_fmul+0x7c>
    2358:	0c3b      	lsrs	r3, r7, #16
    235a:	469c      	mov	ip, r3
    235c:	042a      	lsls	r2, r5, #16
    235e:	0c12      	lsrs	r2, r2, #16
    2360:	0c2b      	lsrs	r3, r5, #16
    2362:	0014      	movs	r4, r2
    2364:	4660      	mov	r0, ip
    2366:	4665      	mov	r5, ip
    2368:	043f      	lsls	r7, r7, #16
    236a:	0c3f      	lsrs	r7, r7, #16
    236c:	437c      	muls	r4, r7
    236e:	4342      	muls	r2, r0
    2370:	435d      	muls	r5, r3
    2372:	437b      	muls	r3, r7
    2374:	0c27      	lsrs	r7, r4, #16
    2376:	189b      	adds	r3, r3, r2
    2378:	18ff      	adds	r7, r7, r3
    237a:	42ba      	cmp	r2, r7
    237c:	d903      	bls.n	2386 <__aeabi_fmul+0x15a>
    237e:	2380      	movs	r3, #128	; 0x80
    2380:	025b      	lsls	r3, r3, #9
    2382:	469c      	mov	ip, r3
    2384:	4465      	add	r5, ip
    2386:	0424      	lsls	r4, r4, #16
    2388:	043a      	lsls	r2, r7, #16
    238a:	0c24      	lsrs	r4, r4, #16
    238c:	1912      	adds	r2, r2, r4
    238e:	0193      	lsls	r3, r2, #6
    2390:	1e5c      	subs	r4, r3, #1
    2392:	41a3      	sbcs	r3, r4
    2394:	0c3f      	lsrs	r7, r7, #16
    2396:	0e92      	lsrs	r2, r2, #26
    2398:	197d      	adds	r5, r7, r5
    239a:	431a      	orrs	r2, r3
    239c:	01ad      	lsls	r5, r5, #6
    239e:	4315      	orrs	r5, r2
    23a0:	012b      	lsls	r3, r5, #4
    23a2:	d504      	bpl.n	23ae <__aeabi_fmul+0x182>
    23a4:	2301      	movs	r3, #1
    23a6:	465e      	mov	r6, fp
    23a8:	086a      	lsrs	r2, r5, #1
    23aa:	401d      	ands	r5, r3
    23ac:	4315      	orrs	r5, r2
    23ae:	0032      	movs	r2, r6
    23b0:	327f      	adds	r2, #127	; 0x7f
    23b2:	2a00      	cmp	r2, #0
    23b4:	dd25      	ble.n	2402 <__aeabi_fmul+0x1d6>
    23b6:	076b      	lsls	r3, r5, #29
    23b8:	d004      	beq.n	23c4 <__aeabi_fmul+0x198>
    23ba:	230f      	movs	r3, #15
    23bc:	402b      	ands	r3, r5
    23be:	2b04      	cmp	r3, #4
    23c0:	d000      	beq.n	23c4 <__aeabi_fmul+0x198>
    23c2:	3504      	adds	r5, #4
    23c4:	012b      	lsls	r3, r5, #4
    23c6:	d503      	bpl.n	23d0 <__aeabi_fmul+0x1a4>
    23c8:	0032      	movs	r2, r6
    23ca:	4b27      	ldr	r3, [pc, #156]	; (2468 <__aeabi_fmul+0x23c>)
    23cc:	3280      	adds	r2, #128	; 0x80
    23ce:	401d      	ands	r5, r3
    23d0:	2afe      	cmp	r2, #254	; 0xfe
    23d2:	dc94      	bgt.n	22fe <__aeabi_fmul+0xd2>
    23d4:	2401      	movs	r4, #1
    23d6:	01a8      	lsls	r0, r5, #6
    23d8:	0a40      	lsrs	r0, r0, #9
    23da:	b2d2      	uxtb	r2, r2
    23dc:	400c      	ands	r4, r1
    23de:	e76f      	b.n	22c0 <__aeabi_fmul+0x94>
    23e0:	2080      	movs	r0, #128	; 0x80
    23e2:	03c0      	lsls	r0, r0, #15
    23e4:	4207      	tst	r7, r0
    23e6:	d007      	beq.n	23f8 <__aeabi_fmul+0x1cc>
    23e8:	4205      	tst	r5, r0
    23ea:	d105      	bne.n	23f8 <__aeabi_fmul+0x1cc>
    23ec:	4328      	orrs	r0, r5
    23ee:	0240      	lsls	r0, r0, #9
    23f0:	0a40      	lsrs	r0, r0, #9
    23f2:	4644      	mov	r4, r8
    23f4:	22ff      	movs	r2, #255	; 0xff
    23f6:	e763      	b.n	22c0 <__aeabi_fmul+0x94>
    23f8:	4338      	orrs	r0, r7
    23fa:	0240      	lsls	r0, r0, #9
    23fc:	0a40      	lsrs	r0, r0, #9
    23fe:	22ff      	movs	r2, #255	; 0xff
    2400:	e75e      	b.n	22c0 <__aeabi_fmul+0x94>
    2402:	2401      	movs	r4, #1
    2404:	1aa3      	subs	r3, r4, r2
    2406:	2b1b      	cmp	r3, #27
    2408:	dd05      	ble.n	2416 <__aeabi_fmul+0x1ea>
    240a:	400c      	ands	r4, r1
    240c:	2200      	movs	r2, #0
    240e:	2000      	movs	r0, #0
    2410:	e756      	b.n	22c0 <__aeabi_fmul+0x94>
    2412:	465e      	mov	r6, fp
    2414:	e7cb      	b.n	23ae <__aeabi_fmul+0x182>
    2416:	002a      	movs	r2, r5
    2418:	2020      	movs	r0, #32
    241a:	40da      	lsrs	r2, r3
    241c:	1ac3      	subs	r3, r0, r3
    241e:	409d      	lsls	r5, r3
    2420:	002b      	movs	r3, r5
    2422:	1e5d      	subs	r5, r3, #1
    2424:	41ab      	sbcs	r3, r5
    2426:	4313      	orrs	r3, r2
    2428:	075a      	lsls	r2, r3, #29
    242a:	d004      	beq.n	2436 <__aeabi_fmul+0x20a>
    242c:	220f      	movs	r2, #15
    242e:	401a      	ands	r2, r3
    2430:	2a04      	cmp	r2, #4
    2432:	d000      	beq.n	2436 <__aeabi_fmul+0x20a>
    2434:	3304      	adds	r3, #4
    2436:	015a      	lsls	r2, r3, #5
    2438:	d504      	bpl.n	2444 <__aeabi_fmul+0x218>
    243a:	2401      	movs	r4, #1
    243c:	2201      	movs	r2, #1
    243e:	400c      	ands	r4, r1
    2440:	2000      	movs	r0, #0
    2442:	e73d      	b.n	22c0 <__aeabi_fmul+0x94>
    2444:	2401      	movs	r4, #1
    2446:	019b      	lsls	r3, r3, #6
    2448:	0a58      	lsrs	r0, r3, #9
    244a:	400c      	ands	r4, r1
    244c:	2200      	movs	r2, #0
    244e:	e737      	b.n	22c0 <__aeabi_fmul+0x94>
    2450:	2080      	movs	r0, #128	; 0x80
    2452:	2401      	movs	r4, #1
    2454:	03c0      	lsls	r0, r0, #15
    2456:	4328      	orrs	r0, r5
    2458:	0240      	lsls	r0, r0, #9
    245a:	0a40      	lsrs	r0, r0, #9
    245c:	400c      	ands	r4, r1
    245e:	22ff      	movs	r2, #255	; 0xff
    2460:	e72e      	b.n	22c0 <__aeabi_fmul+0x94>
    2462:	46c0      	nop			; (mov r8, r8)
    2464:	000061c0 	.word	0x000061c0
    2468:	f7ffffff 	.word	0xf7ffffff

0000246c <__aeabi_fsub>:
    246c:	b5f0      	push	{r4, r5, r6, r7, lr}
    246e:	464f      	mov	r7, r9
    2470:	46d6      	mov	lr, sl
    2472:	4646      	mov	r6, r8
    2474:	0044      	lsls	r4, r0, #1
    2476:	b5c0      	push	{r6, r7, lr}
    2478:	0fc2      	lsrs	r2, r0, #31
    247a:	0247      	lsls	r7, r0, #9
    247c:	0248      	lsls	r0, r1, #9
    247e:	0a40      	lsrs	r0, r0, #9
    2480:	4684      	mov	ip, r0
    2482:	4666      	mov	r6, ip
    2484:	0a7b      	lsrs	r3, r7, #9
    2486:	0048      	lsls	r0, r1, #1
    2488:	0fc9      	lsrs	r1, r1, #31
    248a:	469a      	mov	sl, r3
    248c:	0e24      	lsrs	r4, r4, #24
    248e:	0015      	movs	r5, r2
    2490:	00db      	lsls	r3, r3, #3
    2492:	0e00      	lsrs	r0, r0, #24
    2494:	4689      	mov	r9, r1
    2496:	00f6      	lsls	r6, r6, #3
    2498:	28ff      	cmp	r0, #255	; 0xff
    249a:	d100      	bne.n	249e <__aeabi_fsub+0x32>
    249c:	e08f      	b.n	25be <__aeabi_fsub+0x152>
    249e:	2101      	movs	r1, #1
    24a0:	464f      	mov	r7, r9
    24a2:	404f      	eors	r7, r1
    24a4:	0039      	movs	r1, r7
    24a6:	4291      	cmp	r1, r2
    24a8:	d066      	beq.n	2578 <__aeabi_fsub+0x10c>
    24aa:	1a22      	subs	r2, r4, r0
    24ac:	2a00      	cmp	r2, #0
    24ae:	dc00      	bgt.n	24b2 <__aeabi_fsub+0x46>
    24b0:	e09d      	b.n	25ee <__aeabi_fsub+0x182>
    24b2:	2800      	cmp	r0, #0
    24b4:	d13d      	bne.n	2532 <__aeabi_fsub+0xc6>
    24b6:	2e00      	cmp	r6, #0
    24b8:	d100      	bne.n	24bc <__aeabi_fsub+0x50>
    24ba:	e08b      	b.n	25d4 <__aeabi_fsub+0x168>
    24bc:	1e51      	subs	r1, r2, #1
    24be:	2900      	cmp	r1, #0
    24c0:	d000      	beq.n	24c4 <__aeabi_fsub+0x58>
    24c2:	e0b5      	b.n	2630 <__aeabi_fsub+0x1c4>
    24c4:	2401      	movs	r4, #1
    24c6:	1b9b      	subs	r3, r3, r6
    24c8:	015a      	lsls	r2, r3, #5
    24ca:	d544      	bpl.n	2556 <__aeabi_fsub+0xea>
    24cc:	019b      	lsls	r3, r3, #6
    24ce:	099f      	lsrs	r7, r3, #6
    24d0:	0038      	movs	r0, r7
    24d2:	f001 fc0f 	bl	3cf4 <__clzsi2>
    24d6:	3805      	subs	r0, #5
    24d8:	4087      	lsls	r7, r0
    24da:	4284      	cmp	r4, r0
    24dc:	dd00      	ble.n	24e0 <__aeabi_fsub+0x74>
    24de:	e096      	b.n	260e <__aeabi_fsub+0x1a2>
    24e0:	1b04      	subs	r4, r0, r4
    24e2:	003a      	movs	r2, r7
    24e4:	2020      	movs	r0, #32
    24e6:	3401      	adds	r4, #1
    24e8:	40e2      	lsrs	r2, r4
    24ea:	1b04      	subs	r4, r0, r4
    24ec:	40a7      	lsls	r7, r4
    24ee:	003b      	movs	r3, r7
    24f0:	1e5f      	subs	r7, r3, #1
    24f2:	41bb      	sbcs	r3, r7
    24f4:	2400      	movs	r4, #0
    24f6:	4313      	orrs	r3, r2
    24f8:	075a      	lsls	r2, r3, #29
    24fa:	d004      	beq.n	2506 <__aeabi_fsub+0x9a>
    24fc:	220f      	movs	r2, #15
    24fe:	401a      	ands	r2, r3
    2500:	2a04      	cmp	r2, #4
    2502:	d000      	beq.n	2506 <__aeabi_fsub+0x9a>
    2504:	3304      	adds	r3, #4
    2506:	015a      	lsls	r2, r3, #5
    2508:	d527      	bpl.n	255a <__aeabi_fsub+0xee>
    250a:	3401      	adds	r4, #1
    250c:	2cff      	cmp	r4, #255	; 0xff
    250e:	d100      	bne.n	2512 <__aeabi_fsub+0xa6>
    2510:	e079      	b.n	2606 <__aeabi_fsub+0x19a>
    2512:	2201      	movs	r2, #1
    2514:	019b      	lsls	r3, r3, #6
    2516:	0a5b      	lsrs	r3, r3, #9
    2518:	b2e4      	uxtb	r4, r4
    251a:	402a      	ands	r2, r5
    251c:	025b      	lsls	r3, r3, #9
    251e:	05e4      	lsls	r4, r4, #23
    2520:	0a58      	lsrs	r0, r3, #9
    2522:	07d2      	lsls	r2, r2, #31
    2524:	4320      	orrs	r0, r4
    2526:	4310      	orrs	r0, r2
    2528:	bc1c      	pop	{r2, r3, r4}
    252a:	4690      	mov	r8, r2
    252c:	4699      	mov	r9, r3
    252e:	46a2      	mov	sl, r4
    2530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2532:	2cff      	cmp	r4, #255	; 0xff
    2534:	d0e0      	beq.n	24f8 <__aeabi_fsub+0x8c>
    2536:	2180      	movs	r1, #128	; 0x80
    2538:	04c9      	lsls	r1, r1, #19
    253a:	430e      	orrs	r6, r1
    253c:	2a1b      	cmp	r2, #27
    253e:	dc7b      	bgt.n	2638 <__aeabi_fsub+0x1cc>
    2540:	0031      	movs	r1, r6
    2542:	2020      	movs	r0, #32
    2544:	40d1      	lsrs	r1, r2
    2546:	1a82      	subs	r2, r0, r2
    2548:	4096      	lsls	r6, r2
    254a:	1e72      	subs	r2, r6, #1
    254c:	4196      	sbcs	r6, r2
    254e:	430e      	orrs	r6, r1
    2550:	1b9b      	subs	r3, r3, r6
    2552:	015a      	lsls	r2, r3, #5
    2554:	d4ba      	bmi.n	24cc <__aeabi_fsub+0x60>
    2556:	075a      	lsls	r2, r3, #29
    2558:	d1d0      	bne.n	24fc <__aeabi_fsub+0x90>
    255a:	2201      	movs	r2, #1
    255c:	08df      	lsrs	r7, r3, #3
    255e:	402a      	ands	r2, r5
    2560:	2cff      	cmp	r4, #255	; 0xff
    2562:	d133      	bne.n	25cc <__aeabi_fsub+0x160>
    2564:	2f00      	cmp	r7, #0
    2566:	d100      	bne.n	256a <__aeabi_fsub+0xfe>
    2568:	e0a8      	b.n	26bc <__aeabi_fsub+0x250>
    256a:	2380      	movs	r3, #128	; 0x80
    256c:	03db      	lsls	r3, r3, #15
    256e:	433b      	orrs	r3, r7
    2570:	025b      	lsls	r3, r3, #9
    2572:	0a5b      	lsrs	r3, r3, #9
    2574:	24ff      	movs	r4, #255	; 0xff
    2576:	e7d1      	b.n	251c <__aeabi_fsub+0xb0>
    2578:	1a21      	subs	r1, r4, r0
    257a:	2900      	cmp	r1, #0
    257c:	dd4c      	ble.n	2618 <__aeabi_fsub+0x1ac>
    257e:	2800      	cmp	r0, #0
    2580:	d02a      	beq.n	25d8 <__aeabi_fsub+0x16c>
    2582:	2cff      	cmp	r4, #255	; 0xff
    2584:	d0b8      	beq.n	24f8 <__aeabi_fsub+0x8c>
    2586:	2080      	movs	r0, #128	; 0x80
    2588:	04c0      	lsls	r0, r0, #19
    258a:	4306      	orrs	r6, r0
    258c:	291b      	cmp	r1, #27
    258e:	dd00      	ble.n	2592 <__aeabi_fsub+0x126>
    2590:	e0af      	b.n	26f2 <__aeabi_fsub+0x286>
    2592:	0030      	movs	r0, r6
    2594:	2720      	movs	r7, #32
    2596:	40c8      	lsrs	r0, r1
    2598:	1a79      	subs	r1, r7, r1
    259a:	408e      	lsls	r6, r1
    259c:	1e71      	subs	r1, r6, #1
    259e:	418e      	sbcs	r6, r1
    25a0:	4306      	orrs	r6, r0
    25a2:	199b      	adds	r3, r3, r6
    25a4:	0159      	lsls	r1, r3, #5
    25a6:	d5d6      	bpl.n	2556 <__aeabi_fsub+0xea>
    25a8:	3401      	adds	r4, #1
    25aa:	2cff      	cmp	r4, #255	; 0xff
    25ac:	d100      	bne.n	25b0 <__aeabi_fsub+0x144>
    25ae:	e085      	b.n	26bc <__aeabi_fsub+0x250>
    25b0:	2201      	movs	r2, #1
    25b2:	497a      	ldr	r1, [pc, #488]	; (279c <__aeabi_fsub+0x330>)
    25b4:	401a      	ands	r2, r3
    25b6:	085b      	lsrs	r3, r3, #1
    25b8:	400b      	ands	r3, r1
    25ba:	4313      	orrs	r3, r2
    25bc:	e79c      	b.n	24f8 <__aeabi_fsub+0x8c>
    25be:	2e00      	cmp	r6, #0
    25c0:	d000      	beq.n	25c4 <__aeabi_fsub+0x158>
    25c2:	e770      	b.n	24a6 <__aeabi_fsub+0x3a>
    25c4:	e76b      	b.n	249e <__aeabi_fsub+0x32>
    25c6:	1e3b      	subs	r3, r7, #0
    25c8:	d1c5      	bne.n	2556 <__aeabi_fsub+0xea>
    25ca:	2200      	movs	r2, #0
    25cc:	027b      	lsls	r3, r7, #9
    25ce:	0a5b      	lsrs	r3, r3, #9
    25d0:	b2e4      	uxtb	r4, r4
    25d2:	e7a3      	b.n	251c <__aeabi_fsub+0xb0>
    25d4:	0014      	movs	r4, r2
    25d6:	e78f      	b.n	24f8 <__aeabi_fsub+0x8c>
    25d8:	2e00      	cmp	r6, #0
    25da:	d04d      	beq.n	2678 <__aeabi_fsub+0x20c>
    25dc:	1e48      	subs	r0, r1, #1
    25de:	2800      	cmp	r0, #0
    25e0:	d157      	bne.n	2692 <__aeabi_fsub+0x226>
    25e2:	199b      	adds	r3, r3, r6
    25e4:	2401      	movs	r4, #1
    25e6:	015a      	lsls	r2, r3, #5
    25e8:	d5b5      	bpl.n	2556 <__aeabi_fsub+0xea>
    25ea:	2402      	movs	r4, #2
    25ec:	e7e0      	b.n	25b0 <__aeabi_fsub+0x144>
    25ee:	2a00      	cmp	r2, #0
    25f0:	d125      	bne.n	263e <__aeabi_fsub+0x1d2>
    25f2:	1c62      	adds	r2, r4, #1
    25f4:	b2d2      	uxtb	r2, r2
    25f6:	2a01      	cmp	r2, #1
    25f8:	dd72      	ble.n	26e0 <__aeabi_fsub+0x274>
    25fa:	1b9f      	subs	r7, r3, r6
    25fc:	017a      	lsls	r2, r7, #5
    25fe:	d535      	bpl.n	266c <__aeabi_fsub+0x200>
    2600:	1af7      	subs	r7, r6, r3
    2602:	000d      	movs	r5, r1
    2604:	e764      	b.n	24d0 <__aeabi_fsub+0x64>
    2606:	2201      	movs	r2, #1
    2608:	2300      	movs	r3, #0
    260a:	402a      	ands	r2, r5
    260c:	e786      	b.n	251c <__aeabi_fsub+0xb0>
    260e:	003b      	movs	r3, r7
    2610:	4a63      	ldr	r2, [pc, #396]	; (27a0 <__aeabi_fsub+0x334>)
    2612:	1a24      	subs	r4, r4, r0
    2614:	4013      	ands	r3, r2
    2616:	e76f      	b.n	24f8 <__aeabi_fsub+0x8c>
    2618:	2900      	cmp	r1, #0
    261a:	d16c      	bne.n	26f6 <__aeabi_fsub+0x28a>
    261c:	1c61      	adds	r1, r4, #1
    261e:	b2c8      	uxtb	r0, r1
    2620:	2801      	cmp	r0, #1
    2622:	dd4e      	ble.n	26c2 <__aeabi_fsub+0x256>
    2624:	29ff      	cmp	r1, #255	; 0xff
    2626:	d049      	beq.n	26bc <__aeabi_fsub+0x250>
    2628:	199b      	adds	r3, r3, r6
    262a:	085b      	lsrs	r3, r3, #1
    262c:	000c      	movs	r4, r1
    262e:	e763      	b.n	24f8 <__aeabi_fsub+0x8c>
    2630:	2aff      	cmp	r2, #255	; 0xff
    2632:	d041      	beq.n	26b8 <__aeabi_fsub+0x24c>
    2634:	000a      	movs	r2, r1
    2636:	e781      	b.n	253c <__aeabi_fsub+0xd0>
    2638:	2601      	movs	r6, #1
    263a:	1b9b      	subs	r3, r3, r6
    263c:	e789      	b.n	2552 <__aeabi_fsub+0xe6>
    263e:	2c00      	cmp	r4, #0
    2640:	d01c      	beq.n	267c <__aeabi_fsub+0x210>
    2642:	28ff      	cmp	r0, #255	; 0xff
    2644:	d021      	beq.n	268a <__aeabi_fsub+0x21e>
    2646:	2480      	movs	r4, #128	; 0x80
    2648:	04e4      	lsls	r4, r4, #19
    264a:	4252      	negs	r2, r2
    264c:	4323      	orrs	r3, r4
    264e:	2a1b      	cmp	r2, #27
    2650:	dd00      	ble.n	2654 <__aeabi_fsub+0x1e8>
    2652:	e096      	b.n	2782 <__aeabi_fsub+0x316>
    2654:	001c      	movs	r4, r3
    2656:	2520      	movs	r5, #32
    2658:	40d4      	lsrs	r4, r2
    265a:	1aaa      	subs	r2, r5, r2
    265c:	4093      	lsls	r3, r2
    265e:	1e5a      	subs	r2, r3, #1
    2660:	4193      	sbcs	r3, r2
    2662:	4323      	orrs	r3, r4
    2664:	1af3      	subs	r3, r6, r3
    2666:	0004      	movs	r4, r0
    2668:	000d      	movs	r5, r1
    266a:	e72d      	b.n	24c8 <__aeabi_fsub+0x5c>
    266c:	2f00      	cmp	r7, #0
    266e:	d000      	beq.n	2672 <__aeabi_fsub+0x206>
    2670:	e72e      	b.n	24d0 <__aeabi_fsub+0x64>
    2672:	2200      	movs	r2, #0
    2674:	2400      	movs	r4, #0
    2676:	e7a9      	b.n	25cc <__aeabi_fsub+0x160>
    2678:	000c      	movs	r4, r1
    267a:	e73d      	b.n	24f8 <__aeabi_fsub+0x8c>
    267c:	2b00      	cmp	r3, #0
    267e:	d058      	beq.n	2732 <__aeabi_fsub+0x2c6>
    2680:	43d2      	mvns	r2, r2
    2682:	2a00      	cmp	r2, #0
    2684:	d0ee      	beq.n	2664 <__aeabi_fsub+0x1f8>
    2686:	28ff      	cmp	r0, #255	; 0xff
    2688:	d1e1      	bne.n	264e <__aeabi_fsub+0x1e2>
    268a:	0033      	movs	r3, r6
    268c:	24ff      	movs	r4, #255	; 0xff
    268e:	000d      	movs	r5, r1
    2690:	e732      	b.n	24f8 <__aeabi_fsub+0x8c>
    2692:	29ff      	cmp	r1, #255	; 0xff
    2694:	d010      	beq.n	26b8 <__aeabi_fsub+0x24c>
    2696:	0001      	movs	r1, r0
    2698:	e778      	b.n	258c <__aeabi_fsub+0x120>
    269a:	2b00      	cmp	r3, #0
    269c:	d06e      	beq.n	277c <__aeabi_fsub+0x310>
    269e:	24ff      	movs	r4, #255	; 0xff
    26a0:	2e00      	cmp	r6, #0
    26a2:	d100      	bne.n	26a6 <__aeabi_fsub+0x23a>
    26a4:	e728      	b.n	24f8 <__aeabi_fsub+0x8c>
    26a6:	2280      	movs	r2, #128	; 0x80
    26a8:	4651      	mov	r1, sl
    26aa:	03d2      	lsls	r2, r2, #15
    26ac:	4211      	tst	r1, r2
    26ae:	d003      	beq.n	26b8 <__aeabi_fsub+0x24c>
    26b0:	4661      	mov	r1, ip
    26b2:	4211      	tst	r1, r2
    26b4:	d100      	bne.n	26b8 <__aeabi_fsub+0x24c>
    26b6:	0033      	movs	r3, r6
    26b8:	24ff      	movs	r4, #255	; 0xff
    26ba:	e71d      	b.n	24f8 <__aeabi_fsub+0x8c>
    26bc:	24ff      	movs	r4, #255	; 0xff
    26be:	2300      	movs	r3, #0
    26c0:	e72c      	b.n	251c <__aeabi_fsub+0xb0>
    26c2:	2c00      	cmp	r4, #0
    26c4:	d1e9      	bne.n	269a <__aeabi_fsub+0x22e>
    26c6:	2b00      	cmp	r3, #0
    26c8:	d063      	beq.n	2792 <__aeabi_fsub+0x326>
    26ca:	2e00      	cmp	r6, #0
    26cc:	d100      	bne.n	26d0 <__aeabi_fsub+0x264>
    26ce:	e713      	b.n	24f8 <__aeabi_fsub+0x8c>
    26d0:	199b      	adds	r3, r3, r6
    26d2:	015a      	lsls	r2, r3, #5
    26d4:	d400      	bmi.n	26d8 <__aeabi_fsub+0x26c>
    26d6:	e73e      	b.n	2556 <__aeabi_fsub+0xea>
    26d8:	4a31      	ldr	r2, [pc, #196]	; (27a0 <__aeabi_fsub+0x334>)
    26da:	000c      	movs	r4, r1
    26dc:	4013      	ands	r3, r2
    26de:	e70b      	b.n	24f8 <__aeabi_fsub+0x8c>
    26e0:	2c00      	cmp	r4, #0
    26e2:	d11e      	bne.n	2722 <__aeabi_fsub+0x2b6>
    26e4:	2b00      	cmp	r3, #0
    26e6:	d12f      	bne.n	2748 <__aeabi_fsub+0x2dc>
    26e8:	2e00      	cmp	r6, #0
    26ea:	d04f      	beq.n	278c <__aeabi_fsub+0x320>
    26ec:	0033      	movs	r3, r6
    26ee:	000d      	movs	r5, r1
    26f0:	e702      	b.n	24f8 <__aeabi_fsub+0x8c>
    26f2:	2601      	movs	r6, #1
    26f4:	e755      	b.n	25a2 <__aeabi_fsub+0x136>
    26f6:	2c00      	cmp	r4, #0
    26f8:	d11f      	bne.n	273a <__aeabi_fsub+0x2ce>
    26fa:	2b00      	cmp	r3, #0
    26fc:	d043      	beq.n	2786 <__aeabi_fsub+0x31a>
    26fe:	43c9      	mvns	r1, r1
    2700:	2900      	cmp	r1, #0
    2702:	d00b      	beq.n	271c <__aeabi_fsub+0x2b0>
    2704:	28ff      	cmp	r0, #255	; 0xff
    2706:	d039      	beq.n	277c <__aeabi_fsub+0x310>
    2708:	291b      	cmp	r1, #27
    270a:	dc44      	bgt.n	2796 <__aeabi_fsub+0x32a>
    270c:	001c      	movs	r4, r3
    270e:	2720      	movs	r7, #32
    2710:	40cc      	lsrs	r4, r1
    2712:	1a79      	subs	r1, r7, r1
    2714:	408b      	lsls	r3, r1
    2716:	1e59      	subs	r1, r3, #1
    2718:	418b      	sbcs	r3, r1
    271a:	4323      	orrs	r3, r4
    271c:	199b      	adds	r3, r3, r6
    271e:	0004      	movs	r4, r0
    2720:	e740      	b.n	25a4 <__aeabi_fsub+0x138>
    2722:	2b00      	cmp	r3, #0
    2724:	d11a      	bne.n	275c <__aeabi_fsub+0x2f0>
    2726:	2e00      	cmp	r6, #0
    2728:	d124      	bne.n	2774 <__aeabi_fsub+0x308>
    272a:	2780      	movs	r7, #128	; 0x80
    272c:	2200      	movs	r2, #0
    272e:	03ff      	lsls	r7, r7, #15
    2730:	e71b      	b.n	256a <__aeabi_fsub+0xfe>
    2732:	0033      	movs	r3, r6
    2734:	0004      	movs	r4, r0
    2736:	000d      	movs	r5, r1
    2738:	e6de      	b.n	24f8 <__aeabi_fsub+0x8c>
    273a:	28ff      	cmp	r0, #255	; 0xff
    273c:	d01e      	beq.n	277c <__aeabi_fsub+0x310>
    273e:	2480      	movs	r4, #128	; 0x80
    2740:	04e4      	lsls	r4, r4, #19
    2742:	4249      	negs	r1, r1
    2744:	4323      	orrs	r3, r4
    2746:	e7df      	b.n	2708 <__aeabi_fsub+0x29c>
    2748:	2e00      	cmp	r6, #0
    274a:	d100      	bne.n	274e <__aeabi_fsub+0x2e2>
    274c:	e6d4      	b.n	24f8 <__aeabi_fsub+0x8c>
    274e:	1b9f      	subs	r7, r3, r6
    2750:	017a      	lsls	r2, r7, #5
    2752:	d400      	bmi.n	2756 <__aeabi_fsub+0x2ea>
    2754:	e737      	b.n	25c6 <__aeabi_fsub+0x15a>
    2756:	1af3      	subs	r3, r6, r3
    2758:	000d      	movs	r5, r1
    275a:	e6cd      	b.n	24f8 <__aeabi_fsub+0x8c>
    275c:	24ff      	movs	r4, #255	; 0xff
    275e:	2e00      	cmp	r6, #0
    2760:	d100      	bne.n	2764 <__aeabi_fsub+0x2f8>
    2762:	e6c9      	b.n	24f8 <__aeabi_fsub+0x8c>
    2764:	2280      	movs	r2, #128	; 0x80
    2766:	4650      	mov	r0, sl
    2768:	03d2      	lsls	r2, r2, #15
    276a:	4210      	tst	r0, r2
    276c:	d0a4      	beq.n	26b8 <__aeabi_fsub+0x24c>
    276e:	4660      	mov	r0, ip
    2770:	4210      	tst	r0, r2
    2772:	d1a1      	bne.n	26b8 <__aeabi_fsub+0x24c>
    2774:	0033      	movs	r3, r6
    2776:	000d      	movs	r5, r1
    2778:	24ff      	movs	r4, #255	; 0xff
    277a:	e6bd      	b.n	24f8 <__aeabi_fsub+0x8c>
    277c:	0033      	movs	r3, r6
    277e:	24ff      	movs	r4, #255	; 0xff
    2780:	e6ba      	b.n	24f8 <__aeabi_fsub+0x8c>
    2782:	2301      	movs	r3, #1
    2784:	e76e      	b.n	2664 <__aeabi_fsub+0x1f8>
    2786:	0033      	movs	r3, r6
    2788:	0004      	movs	r4, r0
    278a:	e6b5      	b.n	24f8 <__aeabi_fsub+0x8c>
    278c:	2700      	movs	r7, #0
    278e:	2200      	movs	r2, #0
    2790:	e71c      	b.n	25cc <__aeabi_fsub+0x160>
    2792:	0033      	movs	r3, r6
    2794:	e6b0      	b.n	24f8 <__aeabi_fsub+0x8c>
    2796:	2301      	movs	r3, #1
    2798:	e7c0      	b.n	271c <__aeabi_fsub+0x2b0>
    279a:	46c0      	nop			; (mov r8, r8)
    279c:	7dffffff 	.word	0x7dffffff
    27a0:	fbffffff 	.word	0xfbffffff

000027a4 <__aeabi_f2iz>:
    27a4:	0241      	lsls	r1, r0, #9
    27a6:	0043      	lsls	r3, r0, #1
    27a8:	0fc2      	lsrs	r2, r0, #31
    27aa:	0a49      	lsrs	r1, r1, #9
    27ac:	0e1b      	lsrs	r3, r3, #24
    27ae:	2000      	movs	r0, #0
    27b0:	2b7e      	cmp	r3, #126	; 0x7e
    27b2:	dd0d      	ble.n	27d0 <__aeabi_f2iz+0x2c>
    27b4:	2b9d      	cmp	r3, #157	; 0x9d
    27b6:	dc0c      	bgt.n	27d2 <__aeabi_f2iz+0x2e>
    27b8:	2080      	movs	r0, #128	; 0x80
    27ba:	0400      	lsls	r0, r0, #16
    27bc:	4301      	orrs	r1, r0
    27be:	2b95      	cmp	r3, #149	; 0x95
    27c0:	dc0a      	bgt.n	27d8 <__aeabi_f2iz+0x34>
    27c2:	2096      	movs	r0, #150	; 0x96
    27c4:	1ac3      	subs	r3, r0, r3
    27c6:	40d9      	lsrs	r1, r3
    27c8:	4248      	negs	r0, r1
    27ca:	2a00      	cmp	r2, #0
    27cc:	d100      	bne.n	27d0 <__aeabi_f2iz+0x2c>
    27ce:	0008      	movs	r0, r1
    27d0:	4770      	bx	lr
    27d2:	4b03      	ldr	r3, [pc, #12]	; (27e0 <__aeabi_f2iz+0x3c>)
    27d4:	18d0      	adds	r0, r2, r3
    27d6:	e7fb      	b.n	27d0 <__aeabi_f2iz+0x2c>
    27d8:	3b96      	subs	r3, #150	; 0x96
    27da:	4099      	lsls	r1, r3
    27dc:	e7f4      	b.n	27c8 <__aeabi_f2iz+0x24>
    27de:	46c0      	nop			; (mov r8, r8)
    27e0:	7fffffff 	.word	0x7fffffff

000027e4 <__aeabi_ui2f>:
    27e4:	b510      	push	{r4, lr}
    27e6:	1e04      	subs	r4, r0, #0
    27e8:	d027      	beq.n	283a <__aeabi_ui2f+0x56>
    27ea:	f001 fa83 	bl	3cf4 <__clzsi2>
    27ee:	239e      	movs	r3, #158	; 0x9e
    27f0:	1a1b      	subs	r3, r3, r0
    27f2:	2b96      	cmp	r3, #150	; 0x96
    27f4:	dc0a      	bgt.n	280c <__aeabi_ui2f+0x28>
    27f6:	2296      	movs	r2, #150	; 0x96
    27f8:	1ad2      	subs	r2, r2, r3
    27fa:	4094      	lsls	r4, r2
    27fc:	0264      	lsls	r4, r4, #9
    27fe:	0a64      	lsrs	r4, r4, #9
    2800:	b2db      	uxtb	r3, r3
    2802:	0264      	lsls	r4, r4, #9
    2804:	05db      	lsls	r3, r3, #23
    2806:	0a60      	lsrs	r0, r4, #9
    2808:	4318      	orrs	r0, r3
    280a:	bd10      	pop	{r4, pc}
    280c:	2b99      	cmp	r3, #153	; 0x99
    280e:	dc17      	bgt.n	2840 <__aeabi_ui2f+0x5c>
    2810:	2299      	movs	r2, #153	; 0x99
    2812:	1ad2      	subs	r2, r2, r3
    2814:	2a00      	cmp	r2, #0
    2816:	dd27      	ble.n	2868 <__aeabi_ui2f+0x84>
    2818:	4094      	lsls	r4, r2
    281a:	0022      	movs	r2, r4
    281c:	4c13      	ldr	r4, [pc, #76]	; (286c <__aeabi_ui2f+0x88>)
    281e:	4014      	ands	r4, r2
    2820:	0751      	lsls	r1, r2, #29
    2822:	d004      	beq.n	282e <__aeabi_ui2f+0x4a>
    2824:	210f      	movs	r1, #15
    2826:	400a      	ands	r2, r1
    2828:	2a04      	cmp	r2, #4
    282a:	d000      	beq.n	282e <__aeabi_ui2f+0x4a>
    282c:	3404      	adds	r4, #4
    282e:	0162      	lsls	r2, r4, #5
    2830:	d412      	bmi.n	2858 <__aeabi_ui2f+0x74>
    2832:	01a4      	lsls	r4, r4, #6
    2834:	0a64      	lsrs	r4, r4, #9
    2836:	b2db      	uxtb	r3, r3
    2838:	e7e3      	b.n	2802 <__aeabi_ui2f+0x1e>
    283a:	2300      	movs	r3, #0
    283c:	2400      	movs	r4, #0
    283e:	e7e0      	b.n	2802 <__aeabi_ui2f+0x1e>
    2840:	22b9      	movs	r2, #185	; 0xb9
    2842:	0021      	movs	r1, r4
    2844:	1ad2      	subs	r2, r2, r3
    2846:	4091      	lsls	r1, r2
    2848:	000a      	movs	r2, r1
    284a:	1e51      	subs	r1, r2, #1
    284c:	418a      	sbcs	r2, r1
    284e:	2105      	movs	r1, #5
    2850:	1a09      	subs	r1, r1, r0
    2852:	40cc      	lsrs	r4, r1
    2854:	4314      	orrs	r4, r2
    2856:	e7db      	b.n	2810 <__aeabi_ui2f+0x2c>
    2858:	4b04      	ldr	r3, [pc, #16]	; (286c <__aeabi_ui2f+0x88>)
    285a:	401c      	ands	r4, r3
    285c:	239f      	movs	r3, #159	; 0x9f
    285e:	01a4      	lsls	r4, r4, #6
    2860:	1a1b      	subs	r3, r3, r0
    2862:	0a64      	lsrs	r4, r4, #9
    2864:	b2db      	uxtb	r3, r3
    2866:	e7cc      	b.n	2802 <__aeabi_ui2f+0x1e>
    2868:	0022      	movs	r2, r4
    286a:	e7d7      	b.n	281c <__aeabi_ui2f+0x38>
    286c:	fbffffff 	.word	0xfbffffff

00002870 <__aeabi_ddiv>:
    2870:	b5f0      	push	{r4, r5, r6, r7, lr}
    2872:	4657      	mov	r7, sl
    2874:	4645      	mov	r5, r8
    2876:	46de      	mov	lr, fp
    2878:	464e      	mov	r6, r9
    287a:	b5e0      	push	{r5, r6, r7, lr}
    287c:	004c      	lsls	r4, r1, #1
    287e:	030e      	lsls	r6, r1, #12
    2880:	b087      	sub	sp, #28
    2882:	4683      	mov	fp, r0
    2884:	4692      	mov	sl, r2
    2886:	001d      	movs	r5, r3
    2888:	4680      	mov	r8, r0
    288a:	0b36      	lsrs	r6, r6, #12
    288c:	0d64      	lsrs	r4, r4, #21
    288e:	0fcf      	lsrs	r7, r1, #31
    2890:	2c00      	cmp	r4, #0
    2892:	d04f      	beq.n	2934 <__aeabi_ddiv+0xc4>
    2894:	4b6f      	ldr	r3, [pc, #444]	; (2a54 <__aeabi_ddiv+0x1e4>)
    2896:	429c      	cmp	r4, r3
    2898:	d035      	beq.n	2906 <__aeabi_ddiv+0x96>
    289a:	2380      	movs	r3, #128	; 0x80
    289c:	0f42      	lsrs	r2, r0, #29
    289e:	041b      	lsls	r3, r3, #16
    28a0:	00f6      	lsls	r6, r6, #3
    28a2:	4313      	orrs	r3, r2
    28a4:	4333      	orrs	r3, r6
    28a6:	4699      	mov	r9, r3
    28a8:	00c3      	lsls	r3, r0, #3
    28aa:	4698      	mov	r8, r3
    28ac:	4b6a      	ldr	r3, [pc, #424]	; (2a58 <__aeabi_ddiv+0x1e8>)
    28ae:	2600      	movs	r6, #0
    28b0:	469c      	mov	ip, r3
    28b2:	2300      	movs	r3, #0
    28b4:	4464      	add	r4, ip
    28b6:	9303      	str	r3, [sp, #12]
    28b8:	032b      	lsls	r3, r5, #12
    28ba:	0b1b      	lsrs	r3, r3, #12
    28bc:	469b      	mov	fp, r3
    28be:	006b      	lsls	r3, r5, #1
    28c0:	0fed      	lsrs	r5, r5, #31
    28c2:	4650      	mov	r0, sl
    28c4:	0d5b      	lsrs	r3, r3, #21
    28c6:	9501      	str	r5, [sp, #4]
    28c8:	d05e      	beq.n	2988 <__aeabi_ddiv+0x118>
    28ca:	4a62      	ldr	r2, [pc, #392]	; (2a54 <__aeabi_ddiv+0x1e4>)
    28cc:	4293      	cmp	r3, r2
    28ce:	d053      	beq.n	2978 <__aeabi_ddiv+0x108>
    28d0:	465a      	mov	r2, fp
    28d2:	00d1      	lsls	r1, r2, #3
    28d4:	2280      	movs	r2, #128	; 0x80
    28d6:	0f40      	lsrs	r0, r0, #29
    28d8:	0412      	lsls	r2, r2, #16
    28da:	4302      	orrs	r2, r0
    28dc:	430a      	orrs	r2, r1
    28de:	4693      	mov	fp, r2
    28e0:	4652      	mov	r2, sl
    28e2:	00d1      	lsls	r1, r2, #3
    28e4:	4a5c      	ldr	r2, [pc, #368]	; (2a58 <__aeabi_ddiv+0x1e8>)
    28e6:	4694      	mov	ip, r2
    28e8:	2200      	movs	r2, #0
    28ea:	4463      	add	r3, ip
    28ec:	0038      	movs	r0, r7
    28ee:	4068      	eors	r0, r5
    28f0:	4684      	mov	ip, r0
    28f2:	9002      	str	r0, [sp, #8]
    28f4:	1ae4      	subs	r4, r4, r3
    28f6:	4316      	orrs	r6, r2
    28f8:	2e0f      	cmp	r6, #15
    28fa:	d900      	bls.n	28fe <__aeabi_ddiv+0x8e>
    28fc:	e0b4      	b.n	2a68 <__aeabi_ddiv+0x1f8>
    28fe:	4b57      	ldr	r3, [pc, #348]	; (2a5c <__aeabi_ddiv+0x1ec>)
    2900:	00b6      	lsls	r6, r6, #2
    2902:	599b      	ldr	r3, [r3, r6]
    2904:	469f      	mov	pc, r3
    2906:	0003      	movs	r3, r0
    2908:	4333      	orrs	r3, r6
    290a:	4699      	mov	r9, r3
    290c:	d16c      	bne.n	29e8 <__aeabi_ddiv+0x178>
    290e:	2300      	movs	r3, #0
    2910:	4698      	mov	r8, r3
    2912:	3302      	adds	r3, #2
    2914:	2608      	movs	r6, #8
    2916:	9303      	str	r3, [sp, #12]
    2918:	e7ce      	b.n	28b8 <__aeabi_ddiv+0x48>
    291a:	46cb      	mov	fp, r9
    291c:	4641      	mov	r1, r8
    291e:	9a03      	ldr	r2, [sp, #12]
    2920:	9701      	str	r7, [sp, #4]
    2922:	2a02      	cmp	r2, #2
    2924:	d165      	bne.n	29f2 <__aeabi_ddiv+0x182>
    2926:	9b01      	ldr	r3, [sp, #4]
    2928:	4c4a      	ldr	r4, [pc, #296]	; (2a54 <__aeabi_ddiv+0x1e4>)
    292a:	469c      	mov	ip, r3
    292c:	2300      	movs	r3, #0
    292e:	2200      	movs	r2, #0
    2930:	4698      	mov	r8, r3
    2932:	e06b      	b.n	2a0c <__aeabi_ddiv+0x19c>
    2934:	0003      	movs	r3, r0
    2936:	4333      	orrs	r3, r6
    2938:	4699      	mov	r9, r3
    293a:	d04e      	beq.n	29da <__aeabi_ddiv+0x16a>
    293c:	2e00      	cmp	r6, #0
    293e:	d100      	bne.n	2942 <__aeabi_ddiv+0xd2>
    2940:	e1bc      	b.n	2cbc <__aeabi_ddiv+0x44c>
    2942:	0030      	movs	r0, r6
    2944:	f001 f9d6 	bl	3cf4 <__clzsi2>
    2948:	0003      	movs	r3, r0
    294a:	3b0b      	subs	r3, #11
    294c:	2b1c      	cmp	r3, #28
    294e:	dd00      	ble.n	2952 <__aeabi_ddiv+0xe2>
    2950:	e1ac      	b.n	2cac <__aeabi_ddiv+0x43c>
    2952:	221d      	movs	r2, #29
    2954:	1ad3      	subs	r3, r2, r3
    2956:	465a      	mov	r2, fp
    2958:	0001      	movs	r1, r0
    295a:	40da      	lsrs	r2, r3
    295c:	3908      	subs	r1, #8
    295e:	408e      	lsls	r6, r1
    2960:	0013      	movs	r3, r2
    2962:	4333      	orrs	r3, r6
    2964:	4699      	mov	r9, r3
    2966:	465b      	mov	r3, fp
    2968:	408b      	lsls	r3, r1
    296a:	4698      	mov	r8, r3
    296c:	2300      	movs	r3, #0
    296e:	4c3c      	ldr	r4, [pc, #240]	; (2a60 <__aeabi_ddiv+0x1f0>)
    2970:	2600      	movs	r6, #0
    2972:	1a24      	subs	r4, r4, r0
    2974:	9303      	str	r3, [sp, #12]
    2976:	e79f      	b.n	28b8 <__aeabi_ddiv+0x48>
    2978:	4651      	mov	r1, sl
    297a:	465a      	mov	r2, fp
    297c:	4311      	orrs	r1, r2
    297e:	d129      	bne.n	29d4 <__aeabi_ddiv+0x164>
    2980:	2200      	movs	r2, #0
    2982:	4693      	mov	fp, r2
    2984:	3202      	adds	r2, #2
    2986:	e7b1      	b.n	28ec <__aeabi_ddiv+0x7c>
    2988:	4659      	mov	r1, fp
    298a:	4301      	orrs	r1, r0
    298c:	d01e      	beq.n	29cc <__aeabi_ddiv+0x15c>
    298e:	465b      	mov	r3, fp
    2990:	2b00      	cmp	r3, #0
    2992:	d100      	bne.n	2996 <__aeabi_ddiv+0x126>
    2994:	e19e      	b.n	2cd4 <__aeabi_ddiv+0x464>
    2996:	4658      	mov	r0, fp
    2998:	f001 f9ac 	bl	3cf4 <__clzsi2>
    299c:	0003      	movs	r3, r0
    299e:	3b0b      	subs	r3, #11
    29a0:	2b1c      	cmp	r3, #28
    29a2:	dd00      	ble.n	29a6 <__aeabi_ddiv+0x136>
    29a4:	e18f      	b.n	2cc6 <__aeabi_ddiv+0x456>
    29a6:	0002      	movs	r2, r0
    29a8:	4659      	mov	r1, fp
    29aa:	3a08      	subs	r2, #8
    29ac:	4091      	lsls	r1, r2
    29ae:	468b      	mov	fp, r1
    29b0:	211d      	movs	r1, #29
    29b2:	1acb      	subs	r3, r1, r3
    29b4:	4651      	mov	r1, sl
    29b6:	40d9      	lsrs	r1, r3
    29b8:	000b      	movs	r3, r1
    29ba:	4659      	mov	r1, fp
    29bc:	430b      	orrs	r3, r1
    29be:	4651      	mov	r1, sl
    29c0:	469b      	mov	fp, r3
    29c2:	4091      	lsls	r1, r2
    29c4:	4b26      	ldr	r3, [pc, #152]	; (2a60 <__aeabi_ddiv+0x1f0>)
    29c6:	2200      	movs	r2, #0
    29c8:	1a1b      	subs	r3, r3, r0
    29ca:	e78f      	b.n	28ec <__aeabi_ddiv+0x7c>
    29cc:	2300      	movs	r3, #0
    29ce:	2201      	movs	r2, #1
    29d0:	469b      	mov	fp, r3
    29d2:	e78b      	b.n	28ec <__aeabi_ddiv+0x7c>
    29d4:	4651      	mov	r1, sl
    29d6:	2203      	movs	r2, #3
    29d8:	e788      	b.n	28ec <__aeabi_ddiv+0x7c>
    29da:	2300      	movs	r3, #0
    29dc:	4698      	mov	r8, r3
    29de:	3301      	adds	r3, #1
    29e0:	2604      	movs	r6, #4
    29e2:	2400      	movs	r4, #0
    29e4:	9303      	str	r3, [sp, #12]
    29e6:	e767      	b.n	28b8 <__aeabi_ddiv+0x48>
    29e8:	2303      	movs	r3, #3
    29ea:	46b1      	mov	r9, r6
    29ec:	9303      	str	r3, [sp, #12]
    29ee:	260c      	movs	r6, #12
    29f0:	e762      	b.n	28b8 <__aeabi_ddiv+0x48>
    29f2:	2a03      	cmp	r2, #3
    29f4:	d100      	bne.n	29f8 <__aeabi_ddiv+0x188>
    29f6:	e25c      	b.n	2eb2 <__aeabi_ddiv+0x642>
    29f8:	9b01      	ldr	r3, [sp, #4]
    29fa:	2a01      	cmp	r2, #1
    29fc:	d000      	beq.n	2a00 <__aeabi_ddiv+0x190>
    29fe:	e1e4      	b.n	2dca <__aeabi_ddiv+0x55a>
    2a00:	4013      	ands	r3, r2
    2a02:	469c      	mov	ip, r3
    2a04:	2300      	movs	r3, #0
    2a06:	2400      	movs	r4, #0
    2a08:	2200      	movs	r2, #0
    2a0a:	4698      	mov	r8, r3
    2a0c:	2100      	movs	r1, #0
    2a0e:	0312      	lsls	r2, r2, #12
    2a10:	0b13      	lsrs	r3, r2, #12
    2a12:	0d0a      	lsrs	r2, r1, #20
    2a14:	0512      	lsls	r2, r2, #20
    2a16:	431a      	orrs	r2, r3
    2a18:	0523      	lsls	r3, r4, #20
    2a1a:	4c12      	ldr	r4, [pc, #72]	; (2a64 <__aeabi_ddiv+0x1f4>)
    2a1c:	4640      	mov	r0, r8
    2a1e:	4022      	ands	r2, r4
    2a20:	4313      	orrs	r3, r2
    2a22:	4662      	mov	r2, ip
    2a24:	005b      	lsls	r3, r3, #1
    2a26:	07d2      	lsls	r2, r2, #31
    2a28:	085b      	lsrs	r3, r3, #1
    2a2a:	4313      	orrs	r3, r2
    2a2c:	0019      	movs	r1, r3
    2a2e:	b007      	add	sp, #28
    2a30:	bc3c      	pop	{r2, r3, r4, r5}
    2a32:	4690      	mov	r8, r2
    2a34:	4699      	mov	r9, r3
    2a36:	46a2      	mov	sl, r4
    2a38:	46ab      	mov	fp, r5
    2a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a3c:	2300      	movs	r3, #0
    2a3e:	2280      	movs	r2, #128	; 0x80
    2a40:	469c      	mov	ip, r3
    2a42:	0312      	lsls	r2, r2, #12
    2a44:	4698      	mov	r8, r3
    2a46:	4c03      	ldr	r4, [pc, #12]	; (2a54 <__aeabi_ddiv+0x1e4>)
    2a48:	e7e0      	b.n	2a0c <__aeabi_ddiv+0x19c>
    2a4a:	2300      	movs	r3, #0
    2a4c:	4c01      	ldr	r4, [pc, #4]	; (2a54 <__aeabi_ddiv+0x1e4>)
    2a4e:	2200      	movs	r2, #0
    2a50:	4698      	mov	r8, r3
    2a52:	e7db      	b.n	2a0c <__aeabi_ddiv+0x19c>
    2a54:	000007ff 	.word	0x000007ff
    2a58:	fffffc01 	.word	0xfffffc01
    2a5c:	00006200 	.word	0x00006200
    2a60:	fffffc0d 	.word	0xfffffc0d
    2a64:	800fffff 	.word	0x800fffff
    2a68:	45d9      	cmp	r9, fp
    2a6a:	d900      	bls.n	2a6e <__aeabi_ddiv+0x1fe>
    2a6c:	e139      	b.n	2ce2 <__aeabi_ddiv+0x472>
    2a6e:	d100      	bne.n	2a72 <__aeabi_ddiv+0x202>
    2a70:	e134      	b.n	2cdc <__aeabi_ddiv+0x46c>
    2a72:	2300      	movs	r3, #0
    2a74:	4646      	mov	r6, r8
    2a76:	464d      	mov	r5, r9
    2a78:	469a      	mov	sl, r3
    2a7a:	3c01      	subs	r4, #1
    2a7c:	465b      	mov	r3, fp
    2a7e:	0e0a      	lsrs	r2, r1, #24
    2a80:	021b      	lsls	r3, r3, #8
    2a82:	431a      	orrs	r2, r3
    2a84:	020b      	lsls	r3, r1, #8
    2a86:	0c17      	lsrs	r7, r2, #16
    2a88:	9303      	str	r3, [sp, #12]
    2a8a:	0413      	lsls	r3, r2, #16
    2a8c:	0c1b      	lsrs	r3, r3, #16
    2a8e:	0039      	movs	r1, r7
    2a90:	0028      	movs	r0, r5
    2a92:	4690      	mov	r8, r2
    2a94:	9301      	str	r3, [sp, #4]
    2a96:	f7fe fbbe 	bl	1216 <__aeabi_uidiv>
    2a9a:	0002      	movs	r2, r0
    2a9c:	9b01      	ldr	r3, [sp, #4]
    2a9e:	4683      	mov	fp, r0
    2aa0:	435a      	muls	r2, r3
    2aa2:	0028      	movs	r0, r5
    2aa4:	0039      	movs	r1, r7
    2aa6:	4691      	mov	r9, r2
    2aa8:	f7fe fbec 	bl	1284 <__aeabi_uidivmod>
    2aac:	0c35      	lsrs	r5, r6, #16
    2aae:	0409      	lsls	r1, r1, #16
    2ab0:	430d      	orrs	r5, r1
    2ab2:	45a9      	cmp	r9, r5
    2ab4:	d90d      	bls.n	2ad2 <__aeabi_ddiv+0x262>
    2ab6:	465b      	mov	r3, fp
    2ab8:	4445      	add	r5, r8
    2aba:	3b01      	subs	r3, #1
    2abc:	45a8      	cmp	r8, r5
    2abe:	d900      	bls.n	2ac2 <__aeabi_ddiv+0x252>
    2ac0:	e13a      	b.n	2d38 <__aeabi_ddiv+0x4c8>
    2ac2:	45a9      	cmp	r9, r5
    2ac4:	d800      	bhi.n	2ac8 <__aeabi_ddiv+0x258>
    2ac6:	e137      	b.n	2d38 <__aeabi_ddiv+0x4c8>
    2ac8:	2302      	movs	r3, #2
    2aca:	425b      	negs	r3, r3
    2acc:	469c      	mov	ip, r3
    2ace:	4445      	add	r5, r8
    2ad0:	44e3      	add	fp, ip
    2ad2:	464b      	mov	r3, r9
    2ad4:	1aeb      	subs	r3, r5, r3
    2ad6:	0039      	movs	r1, r7
    2ad8:	0018      	movs	r0, r3
    2ada:	9304      	str	r3, [sp, #16]
    2adc:	f7fe fb9b 	bl	1216 <__aeabi_uidiv>
    2ae0:	9b01      	ldr	r3, [sp, #4]
    2ae2:	0005      	movs	r5, r0
    2ae4:	4343      	muls	r3, r0
    2ae6:	0039      	movs	r1, r7
    2ae8:	9804      	ldr	r0, [sp, #16]
    2aea:	4699      	mov	r9, r3
    2aec:	f7fe fbca 	bl	1284 <__aeabi_uidivmod>
    2af0:	0433      	lsls	r3, r6, #16
    2af2:	0409      	lsls	r1, r1, #16
    2af4:	0c1b      	lsrs	r3, r3, #16
    2af6:	430b      	orrs	r3, r1
    2af8:	4599      	cmp	r9, r3
    2afa:	d909      	bls.n	2b10 <__aeabi_ddiv+0x2a0>
    2afc:	4443      	add	r3, r8
    2afe:	1e6a      	subs	r2, r5, #1
    2b00:	4598      	cmp	r8, r3
    2b02:	d900      	bls.n	2b06 <__aeabi_ddiv+0x296>
    2b04:	e11a      	b.n	2d3c <__aeabi_ddiv+0x4cc>
    2b06:	4599      	cmp	r9, r3
    2b08:	d800      	bhi.n	2b0c <__aeabi_ddiv+0x29c>
    2b0a:	e117      	b.n	2d3c <__aeabi_ddiv+0x4cc>
    2b0c:	3d02      	subs	r5, #2
    2b0e:	4443      	add	r3, r8
    2b10:	464a      	mov	r2, r9
    2b12:	1a9b      	subs	r3, r3, r2
    2b14:	465a      	mov	r2, fp
    2b16:	0412      	lsls	r2, r2, #16
    2b18:	432a      	orrs	r2, r5
    2b1a:	9903      	ldr	r1, [sp, #12]
    2b1c:	4693      	mov	fp, r2
    2b1e:	0c10      	lsrs	r0, r2, #16
    2b20:	0c0a      	lsrs	r2, r1, #16
    2b22:	4691      	mov	r9, r2
    2b24:	0409      	lsls	r1, r1, #16
    2b26:	465a      	mov	r2, fp
    2b28:	0c09      	lsrs	r1, r1, #16
    2b2a:	464e      	mov	r6, r9
    2b2c:	000d      	movs	r5, r1
    2b2e:	0412      	lsls	r2, r2, #16
    2b30:	0c12      	lsrs	r2, r2, #16
    2b32:	4345      	muls	r5, r0
    2b34:	9105      	str	r1, [sp, #20]
    2b36:	4351      	muls	r1, r2
    2b38:	4372      	muls	r2, r6
    2b3a:	4370      	muls	r0, r6
    2b3c:	1952      	adds	r2, r2, r5
    2b3e:	0c0e      	lsrs	r6, r1, #16
    2b40:	18b2      	adds	r2, r6, r2
    2b42:	4295      	cmp	r5, r2
    2b44:	d903      	bls.n	2b4e <__aeabi_ddiv+0x2de>
    2b46:	2580      	movs	r5, #128	; 0x80
    2b48:	026d      	lsls	r5, r5, #9
    2b4a:	46ac      	mov	ip, r5
    2b4c:	4460      	add	r0, ip
    2b4e:	0c15      	lsrs	r5, r2, #16
    2b50:	0409      	lsls	r1, r1, #16
    2b52:	0412      	lsls	r2, r2, #16
    2b54:	0c09      	lsrs	r1, r1, #16
    2b56:	1828      	adds	r0, r5, r0
    2b58:	1852      	adds	r2, r2, r1
    2b5a:	4283      	cmp	r3, r0
    2b5c:	d200      	bcs.n	2b60 <__aeabi_ddiv+0x2f0>
    2b5e:	e0ce      	b.n	2cfe <__aeabi_ddiv+0x48e>
    2b60:	d100      	bne.n	2b64 <__aeabi_ddiv+0x2f4>
    2b62:	e0c8      	b.n	2cf6 <__aeabi_ddiv+0x486>
    2b64:	1a1d      	subs	r5, r3, r0
    2b66:	4653      	mov	r3, sl
    2b68:	1a9e      	subs	r6, r3, r2
    2b6a:	45b2      	cmp	sl, r6
    2b6c:	4192      	sbcs	r2, r2
    2b6e:	4252      	negs	r2, r2
    2b70:	1aab      	subs	r3, r5, r2
    2b72:	469a      	mov	sl, r3
    2b74:	4598      	cmp	r8, r3
    2b76:	d100      	bne.n	2b7a <__aeabi_ddiv+0x30a>
    2b78:	e117      	b.n	2daa <__aeabi_ddiv+0x53a>
    2b7a:	0039      	movs	r1, r7
    2b7c:	0018      	movs	r0, r3
    2b7e:	f7fe fb4a 	bl	1216 <__aeabi_uidiv>
    2b82:	9b01      	ldr	r3, [sp, #4]
    2b84:	0005      	movs	r5, r0
    2b86:	4343      	muls	r3, r0
    2b88:	0039      	movs	r1, r7
    2b8a:	4650      	mov	r0, sl
    2b8c:	9304      	str	r3, [sp, #16]
    2b8e:	f7fe fb79 	bl	1284 <__aeabi_uidivmod>
    2b92:	9804      	ldr	r0, [sp, #16]
    2b94:	040b      	lsls	r3, r1, #16
    2b96:	0c31      	lsrs	r1, r6, #16
    2b98:	4319      	orrs	r1, r3
    2b9a:	4288      	cmp	r0, r1
    2b9c:	d909      	bls.n	2bb2 <__aeabi_ddiv+0x342>
    2b9e:	4441      	add	r1, r8
    2ba0:	1e6b      	subs	r3, r5, #1
    2ba2:	4588      	cmp	r8, r1
    2ba4:	d900      	bls.n	2ba8 <__aeabi_ddiv+0x338>
    2ba6:	e107      	b.n	2db8 <__aeabi_ddiv+0x548>
    2ba8:	4288      	cmp	r0, r1
    2baa:	d800      	bhi.n	2bae <__aeabi_ddiv+0x33e>
    2bac:	e104      	b.n	2db8 <__aeabi_ddiv+0x548>
    2bae:	3d02      	subs	r5, #2
    2bb0:	4441      	add	r1, r8
    2bb2:	9b04      	ldr	r3, [sp, #16]
    2bb4:	1acb      	subs	r3, r1, r3
    2bb6:	0018      	movs	r0, r3
    2bb8:	0039      	movs	r1, r7
    2bba:	9304      	str	r3, [sp, #16]
    2bbc:	f7fe fb2b 	bl	1216 <__aeabi_uidiv>
    2bc0:	9b01      	ldr	r3, [sp, #4]
    2bc2:	4682      	mov	sl, r0
    2bc4:	4343      	muls	r3, r0
    2bc6:	0039      	movs	r1, r7
    2bc8:	9804      	ldr	r0, [sp, #16]
    2bca:	9301      	str	r3, [sp, #4]
    2bcc:	f7fe fb5a 	bl	1284 <__aeabi_uidivmod>
    2bd0:	9801      	ldr	r0, [sp, #4]
    2bd2:	040b      	lsls	r3, r1, #16
    2bd4:	0431      	lsls	r1, r6, #16
    2bd6:	0c09      	lsrs	r1, r1, #16
    2bd8:	4319      	orrs	r1, r3
    2bda:	4288      	cmp	r0, r1
    2bdc:	d90d      	bls.n	2bfa <__aeabi_ddiv+0x38a>
    2bde:	4653      	mov	r3, sl
    2be0:	4441      	add	r1, r8
    2be2:	3b01      	subs	r3, #1
    2be4:	4588      	cmp	r8, r1
    2be6:	d900      	bls.n	2bea <__aeabi_ddiv+0x37a>
    2be8:	e0e8      	b.n	2dbc <__aeabi_ddiv+0x54c>
    2bea:	4288      	cmp	r0, r1
    2bec:	d800      	bhi.n	2bf0 <__aeabi_ddiv+0x380>
    2bee:	e0e5      	b.n	2dbc <__aeabi_ddiv+0x54c>
    2bf0:	2302      	movs	r3, #2
    2bf2:	425b      	negs	r3, r3
    2bf4:	469c      	mov	ip, r3
    2bf6:	4441      	add	r1, r8
    2bf8:	44e2      	add	sl, ip
    2bfa:	9b01      	ldr	r3, [sp, #4]
    2bfc:	042d      	lsls	r5, r5, #16
    2bfe:	1ace      	subs	r6, r1, r3
    2c00:	4651      	mov	r1, sl
    2c02:	4329      	orrs	r1, r5
    2c04:	9d05      	ldr	r5, [sp, #20]
    2c06:	464f      	mov	r7, r9
    2c08:	002a      	movs	r2, r5
    2c0a:	040b      	lsls	r3, r1, #16
    2c0c:	0c08      	lsrs	r0, r1, #16
    2c0e:	0c1b      	lsrs	r3, r3, #16
    2c10:	435a      	muls	r2, r3
    2c12:	4345      	muls	r5, r0
    2c14:	437b      	muls	r3, r7
    2c16:	4378      	muls	r0, r7
    2c18:	195b      	adds	r3, r3, r5
    2c1a:	0c17      	lsrs	r7, r2, #16
    2c1c:	18fb      	adds	r3, r7, r3
    2c1e:	429d      	cmp	r5, r3
    2c20:	d903      	bls.n	2c2a <__aeabi_ddiv+0x3ba>
    2c22:	2580      	movs	r5, #128	; 0x80
    2c24:	026d      	lsls	r5, r5, #9
    2c26:	46ac      	mov	ip, r5
    2c28:	4460      	add	r0, ip
    2c2a:	0c1d      	lsrs	r5, r3, #16
    2c2c:	0412      	lsls	r2, r2, #16
    2c2e:	041b      	lsls	r3, r3, #16
    2c30:	0c12      	lsrs	r2, r2, #16
    2c32:	1828      	adds	r0, r5, r0
    2c34:	189b      	adds	r3, r3, r2
    2c36:	4286      	cmp	r6, r0
    2c38:	d200      	bcs.n	2c3c <__aeabi_ddiv+0x3cc>
    2c3a:	e093      	b.n	2d64 <__aeabi_ddiv+0x4f4>
    2c3c:	d100      	bne.n	2c40 <__aeabi_ddiv+0x3d0>
    2c3e:	e08e      	b.n	2d5e <__aeabi_ddiv+0x4ee>
    2c40:	2301      	movs	r3, #1
    2c42:	4319      	orrs	r1, r3
    2c44:	4ba0      	ldr	r3, [pc, #640]	; (2ec8 <__aeabi_ddiv+0x658>)
    2c46:	18e3      	adds	r3, r4, r3
    2c48:	2b00      	cmp	r3, #0
    2c4a:	dc00      	bgt.n	2c4e <__aeabi_ddiv+0x3de>
    2c4c:	e099      	b.n	2d82 <__aeabi_ddiv+0x512>
    2c4e:	074a      	lsls	r2, r1, #29
    2c50:	d000      	beq.n	2c54 <__aeabi_ddiv+0x3e4>
    2c52:	e09e      	b.n	2d92 <__aeabi_ddiv+0x522>
    2c54:	465a      	mov	r2, fp
    2c56:	01d2      	lsls	r2, r2, #7
    2c58:	d506      	bpl.n	2c68 <__aeabi_ddiv+0x3f8>
    2c5a:	465a      	mov	r2, fp
    2c5c:	4b9b      	ldr	r3, [pc, #620]	; (2ecc <__aeabi_ddiv+0x65c>)
    2c5e:	401a      	ands	r2, r3
    2c60:	2380      	movs	r3, #128	; 0x80
    2c62:	4693      	mov	fp, r2
    2c64:	00db      	lsls	r3, r3, #3
    2c66:	18e3      	adds	r3, r4, r3
    2c68:	4a99      	ldr	r2, [pc, #612]	; (2ed0 <__aeabi_ddiv+0x660>)
    2c6a:	4293      	cmp	r3, r2
    2c6c:	dd68      	ble.n	2d40 <__aeabi_ddiv+0x4d0>
    2c6e:	2301      	movs	r3, #1
    2c70:	9a02      	ldr	r2, [sp, #8]
    2c72:	4c98      	ldr	r4, [pc, #608]	; (2ed4 <__aeabi_ddiv+0x664>)
    2c74:	401a      	ands	r2, r3
    2c76:	2300      	movs	r3, #0
    2c78:	4694      	mov	ip, r2
    2c7a:	4698      	mov	r8, r3
    2c7c:	2200      	movs	r2, #0
    2c7e:	e6c5      	b.n	2a0c <__aeabi_ddiv+0x19c>
    2c80:	2280      	movs	r2, #128	; 0x80
    2c82:	464b      	mov	r3, r9
    2c84:	0312      	lsls	r2, r2, #12
    2c86:	4213      	tst	r3, r2
    2c88:	d00a      	beq.n	2ca0 <__aeabi_ddiv+0x430>
    2c8a:	465b      	mov	r3, fp
    2c8c:	4213      	tst	r3, r2
    2c8e:	d106      	bne.n	2c9e <__aeabi_ddiv+0x42e>
    2c90:	431a      	orrs	r2, r3
    2c92:	0312      	lsls	r2, r2, #12
    2c94:	0b12      	lsrs	r2, r2, #12
    2c96:	46ac      	mov	ip, r5
    2c98:	4688      	mov	r8, r1
    2c9a:	4c8e      	ldr	r4, [pc, #568]	; (2ed4 <__aeabi_ddiv+0x664>)
    2c9c:	e6b6      	b.n	2a0c <__aeabi_ddiv+0x19c>
    2c9e:	464b      	mov	r3, r9
    2ca0:	431a      	orrs	r2, r3
    2ca2:	0312      	lsls	r2, r2, #12
    2ca4:	0b12      	lsrs	r2, r2, #12
    2ca6:	46bc      	mov	ip, r7
    2ca8:	4c8a      	ldr	r4, [pc, #552]	; (2ed4 <__aeabi_ddiv+0x664>)
    2caa:	e6af      	b.n	2a0c <__aeabi_ddiv+0x19c>
    2cac:	0003      	movs	r3, r0
    2cae:	465a      	mov	r2, fp
    2cb0:	3b28      	subs	r3, #40	; 0x28
    2cb2:	409a      	lsls	r2, r3
    2cb4:	2300      	movs	r3, #0
    2cb6:	4691      	mov	r9, r2
    2cb8:	4698      	mov	r8, r3
    2cba:	e657      	b.n	296c <__aeabi_ddiv+0xfc>
    2cbc:	4658      	mov	r0, fp
    2cbe:	f001 f819 	bl	3cf4 <__clzsi2>
    2cc2:	3020      	adds	r0, #32
    2cc4:	e640      	b.n	2948 <__aeabi_ddiv+0xd8>
    2cc6:	0003      	movs	r3, r0
    2cc8:	4652      	mov	r2, sl
    2cca:	3b28      	subs	r3, #40	; 0x28
    2ccc:	409a      	lsls	r2, r3
    2cce:	2100      	movs	r1, #0
    2cd0:	4693      	mov	fp, r2
    2cd2:	e677      	b.n	29c4 <__aeabi_ddiv+0x154>
    2cd4:	f001 f80e 	bl	3cf4 <__clzsi2>
    2cd8:	3020      	adds	r0, #32
    2cda:	e65f      	b.n	299c <__aeabi_ddiv+0x12c>
    2cdc:	4588      	cmp	r8, r1
    2cde:	d200      	bcs.n	2ce2 <__aeabi_ddiv+0x472>
    2ce0:	e6c7      	b.n	2a72 <__aeabi_ddiv+0x202>
    2ce2:	464b      	mov	r3, r9
    2ce4:	07de      	lsls	r6, r3, #31
    2ce6:	085d      	lsrs	r5, r3, #1
    2ce8:	4643      	mov	r3, r8
    2cea:	085b      	lsrs	r3, r3, #1
    2cec:	431e      	orrs	r6, r3
    2cee:	4643      	mov	r3, r8
    2cf0:	07db      	lsls	r3, r3, #31
    2cf2:	469a      	mov	sl, r3
    2cf4:	e6c2      	b.n	2a7c <__aeabi_ddiv+0x20c>
    2cf6:	2500      	movs	r5, #0
    2cf8:	4592      	cmp	sl, r2
    2cfa:	d300      	bcc.n	2cfe <__aeabi_ddiv+0x48e>
    2cfc:	e733      	b.n	2b66 <__aeabi_ddiv+0x2f6>
    2cfe:	9e03      	ldr	r6, [sp, #12]
    2d00:	4659      	mov	r1, fp
    2d02:	46b4      	mov	ip, r6
    2d04:	44e2      	add	sl, ip
    2d06:	45b2      	cmp	sl, r6
    2d08:	41ad      	sbcs	r5, r5
    2d0a:	426d      	negs	r5, r5
    2d0c:	4445      	add	r5, r8
    2d0e:	18eb      	adds	r3, r5, r3
    2d10:	3901      	subs	r1, #1
    2d12:	4598      	cmp	r8, r3
    2d14:	d207      	bcs.n	2d26 <__aeabi_ddiv+0x4b6>
    2d16:	4298      	cmp	r0, r3
    2d18:	d900      	bls.n	2d1c <__aeabi_ddiv+0x4ac>
    2d1a:	e07f      	b.n	2e1c <__aeabi_ddiv+0x5ac>
    2d1c:	d100      	bne.n	2d20 <__aeabi_ddiv+0x4b0>
    2d1e:	e0bc      	b.n	2e9a <__aeabi_ddiv+0x62a>
    2d20:	1a1d      	subs	r5, r3, r0
    2d22:	468b      	mov	fp, r1
    2d24:	e71f      	b.n	2b66 <__aeabi_ddiv+0x2f6>
    2d26:	4598      	cmp	r8, r3
    2d28:	d1fa      	bne.n	2d20 <__aeabi_ddiv+0x4b0>
    2d2a:	9d03      	ldr	r5, [sp, #12]
    2d2c:	4555      	cmp	r5, sl
    2d2e:	d9f2      	bls.n	2d16 <__aeabi_ddiv+0x4a6>
    2d30:	4643      	mov	r3, r8
    2d32:	468b      	mov	fp, r1
    2d34:	1a1d      	subs	r5, r3, r0
    2d36:	e716      	b.n	2b66 <__aeabi_ddiv+0x2f6>
    2d38:	469b      	mov	fp, r3
    2d3a:	e6ca      	b.n	2ad2 <__aeabi_ddiv+0x262>
    2d3c:	0015      	movs	r5, r2
    2d3e:	e6e7      	b.n	2b10 <__aeabi_ddiv+0x2a0>
    2d40:	465a      	mov	r2, fp
    2d42:	08c9      	lsrs	r1, r1, #3
    2d44:	0752      	lsls	r2, r2, #29
    2d46:	430a      	orrs	r2, r1
    2d48:	055b      	lsls	r3, r3, #21
    2d4a:	4690      	mov	r8, r2
    2d4c:	0d5c      	lsrs	r4, r3, #21
    2d4e:	465a      	mov	r2, fp
    2d50:	2301      	movs	r3, #1
    2d52:	9902      	ldr	r1, [sp, #8]
    2d54:	0252      	lsls	r2, r2, #9
    2d56:	4019      	ands	r1, r3
    2d58:	0b12      	lsrs	r2, r2, #12
    2d5a:	468c      	mov	ip, r1
    2d5c:	e656      	b.n	2a0c <__aeabi_ddiv+0x19c>
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d100      	bne.n	2d64 <__aeabi_ddiv+0x4f4>
    2d62:	e76f      	b.n	2c44 <__aeabi_ddiv+0x3d4>
    2d64:	4446      	add	r6, r8
    2d66:	1e4a      	subs	r2, r1, #1
    2d68:	45b0      	cmp	r8, r6
    2d6a:	d929      	bls.n	2dc0 <__aeabi_ddiv+0x550>
    2d6c:	0011      	movs	r1, r2
    2d6e:	4286      	cmp	r6, r0
    2d70:	d000      	beq.n	2d74 <__aeabi_ddiv+0x504>
    2d72:	e765      	b.n	2c40 <__aeabi_ddiv+0x3d0>
    2d74:	9a03      	ldr	r2, [sp, #12]
    2d76:	4293      	cmp	r3, r2
    2d78:	d000      	beq.n	2d7c <__aeabi_ddiv+0x50c>
    2d7a:	e761      	b.n	2c40 <__aeabi_ddiv+0x3d0>
    2d7c:	e762      	b.n	2c44 <__aeabi_ddiv+0x3d4>
    2d7e:	2101      	movs	r1, #1
    2d80:	4249      	negs	r1, r1
    2d82:	2001      	movs	r0, #1
    2d84:	1ac2      	subs	r2, r0, r3
    2d86:	2a38      	cmp	r2, #56	; 0x38
    2d88:	dd21      	ble.n	2dce <__aeabi_ddiv+0x55e>
    2d8a:	9b02      	ldr	r3, [sp, #8]
    2d8c:	4003      	ands	r3, r0
    2d8e:	469c      	mov	ip, r3
    2d90:	e638      	b.n	2a04 <__aeabi_ddiv+0x194>
    2d92:	220f      	movs	r2, #15
    2d94:	400a      	ands	r2, r1
    2d96:	2a04      	cmp	r2, #4
    2d98:	d100      	bne.n	2d9c <__aeabi_ddiv+0x52c>
    2d9a:	e75b      	b.n	2c54 <__aeabi_ddiv+0x3e4>
    2d9c:	000a      	movs	r2, r1
    2d9e:	1d11      	adds	r1, r2, #4
    2da0:	4291      	cmp	r1, r2
    2da2:	4192      	sbcs	r2, r2
    2da4:	4252      	negs	r2, r2
    2da6:	4493      	add	fp, r2
    2da8:	e754      	b.n	2c54 <__aeabi_ddiv+0x3e4>
    2daa:	4b47      	ldr	r3, [pc, #284]	; (2ec8 <__aeabi_ddiv+0x658>)
    2dac:	18e3      	adds	r3, r4, r3
    2dae:	2b00      	cmp	r3, #0
    2db0:	dde5      	ble.n	2d7e <__aeabi_ddiv+0x50e>
    2db2:	2201      	movs	r2, #1
    2db4:	4252      	negs	r2, r2
    2db6:	e7f2      	b.n	2d9e <__aeabi_ddiv+0x52e>
    2db8:	001d      	movs	r5, r3
    2dba:	e6fa      	b.n	2bb2 <__aeabi_ddiv+0x342>
    2dbc:	469a      	mov	sl, r3
    2dbe:	e71c      	b.n	2bfa <__aeabi_ddiv+0x38a>
    2dc0:	42b0      	cmp	r0, r6
    2dc2:	d839      	bhi.n	2e38 <__aeabi_ddiv+0x5c8>
    2dc4:	d06e      	beq.n	2ea4 <__aeabi_ddiv+0x634>
    2dc6:	0011      	movs	r1, r2
    2dc8:	e73a      	b.n	2c40 <__aeabi_ddiv+0x3d0>
    2dca:	9302      	str	r3, [sp, #8]
    2dcc:	e73a      	b.n	2c44 <__aeabi_ddiv+0x3d4>
    2dce:	2a1f      	cmp	r2, #31
    2dd0:	dc3c      	bgt.n	2e4c <__aeabi_ddiv+0x5dc>
    2dd2:	2320      	movs	r3, #32
    2dd4:	1a9b      	subs	r3, r3, r2
    2dd6:	000c      	movs	r4, r1
    2dd8:	4658      	mov	r0, fp
    2dda:	4099      	lsls	r1, r3
    2ddc:	4098      	lsls	r0, r3
    2dde:	1e4b      	subs	r3, r1, #1
    2de0:	4199      	sbcs	r1, r3
    2de2:	465b      	mov	r3, fp
    2de4:	40d4      	lsrs	r4, r2
    2de6:	40d3      	lsrs	r3, r2
    2de8:	4320      	orrs	r0, r4
    2dea:	4308      	orrs	r0, r1
    2dec:	001a      	movs	r2, r3
    2dee:	0743      	lsls	r3, r0, #29
    2df0:	d009      	beq.n	2e06 <__aeabi_ddiv+0x596>
    2df2:	230f      	movs	r3, #15
    2df4:	4003      	ands	r3, r0
    2df6:	2b04      	cmp	r3, #4
    2df8:	d005      	beq.n	2e06 <__aeabi_ddiv+0x596>
    2dfa:	0001      	movs	r1, r0
    2dfc:	1d08      	adds	r0, r1, #4
    2dfe:	4288      	cmp	r0, r1
    2e00:	419b      	sbcs	r3, r3
    2e02:	425b      	negs	r3, r3
    2e04:	18d2      	adds	r2, r2, r3
    2e06:	0213      	lsls	r3, r2, #8
    2e08:	d53a      	bpl.n	2e80 <__aeabi_ddiv+0x610>
    2e0a:	2301      	movs	r3, #1
    2e0c:	9a02      	ldr	r2, [sp, #8]
    2e0e:	2401      	movs	r4, #1
    2e10:	401a      	ands	r2, r3
    2e12:	2300      	movs	r3, #0
    2e14:	4694      	mov	ip, r2
    2e16:	4698      	mov	r8, r3
    2e18:	2200      	movs	r2, #0
    2e1a:	e5f7      	b.n	2a0c <__aeabi_ddiv+0x19c>
    2e1c:	2102      	movs	r1, #2
    2e1e:	4249      	negs	r1, r1
    2e20:	468c      	mov	ip, r1
    2e22:	9d03      	ldr	r5, [sp, #12]
    2e24:	44e3      	add	fp, ip
    2e26:	46ac      	mov	ip, r5
    2e28:	44e2      	add	sl, ip
    2e2a:	45aa      	cmp	sl, r5
    2e2c:	41ad      	sbcs	r5, r5
    2e2e:	426d      	negs	r5, r5
    2e30:	4445      	add	r5, r8
    2e32:	18ed      	adds	r5, r5, r3
    2e34:	1a2d      	subs	r5, r5, r0
    2e36:	e696      	b.n	2b66 <__aeabi_ddiv+0x2f6>
    2e38:	1e8a      	subs	r2, r1, #2
    2e3a:	9903      	ldr	r1, [sp, #12]
    2e3c:	004d      	lsls	r5, r1, #1
    2e3e:	428d      	cmp	r5, r1
    2e40:	4189      	sbcs	r1, r1
    2e42:	4249      	negs	r1, r1
    2e44:	4441      	add	r1, r8
    2e46:	1876      	adds	r6, r6, r1
    2e48:	9503      	str	r5, [sp, #12]
    2e4a:	e78f      	b.n	2d6c <__aeabi_ddiv+0x4fc>
    2e4c:	201f      	movs	r0, #31
    2e4e:	4240      	negs	r0, r0
    2e50:	1ac3      	subs	r3, r0, r3
    2e52:	4658      	mov	r0, fp
    2e54:	40d8      	lsrs	r0, r3
    2e56:	0003      	movs	r3, r0
    2e58:	2a20      	cmp	r2, #32
    2e5a:	d028      	beq.n	2eae <__aeabi_ddiv+0x63e>
    2e5c:	2040      	movs	r0, #64	; 0x40
    2e5e:	465d      	mov	r5, fp
    2e60:	1a82      	subs	r2, r0, r2
    2e62:	4095      	lsls	r5, r2
    2e64:	4329      	orrs	r1, r5
    2e66:	1e4a      	subs	r2, r1, #1
    2e68:	4191      	sbcs	r1, r2
    2e6a:	4319      	orrs	r1, r3
    2e6c:	2307      	movs	r3, #7
    2e6e:	2200      	movs	r2, #0
    2e70:	400b      	ands	r3, r1
    2e72:	d009      	beq.n	2e88 <__aeabi_ddiv+0x618>
    2e74:	230f      	movs	r3, #15
    2e76:	2200      	movs	r2, #0
    2e78:	400b      	ands	r3, r1
    2e7a:	0008      	movs	r0, r1
    2e7c:	2b04      	cmp	r3, #4
    2e7e:	d1bd      	bne.n	2dfc <__aeabi_ddiv+0x58c>
    2e80:	0001      	movs	r1, r0
    2e82:	0753      	lsls	r3, r2, #29
    2e84:	0252      	lsls	r2, r2, #9
    2e86:	0b12      	lsrs	r2, r2, #12
    2e88:	08c9      	lsrs	r1, r1, #3
    2e8a:	4319      	orrs	r1, r3
    2e8c:	2301      	movs	r3, #1
    2e8e:	4688      	mov	r8, r1
    2e90:	9902      	ldr	r1, [sp, #8]
    2e92:	2400      	movs	r4, #0
    2e94:	4019      	ands	r1, r3
    2e96:	468c      	mov	ip, r1
    2e98:	e5b8      	b.n	2a0c <__aeabi_ddiv+0x19c>
    2e9a:	4552      	cmp	r2, sl
    2e9c:	d8be      	bhi.n	2e1c <__aeabi_ddiv+0x5ac>
    2e9e:	468b      	mov	fp, r1
    2ea0:	2500      	movs	r5, #0
    2ea2:	e660      	b.n	2b66 <__aeabi_ddiv+0x2f6>
    2ea4:	9d03      	ldr	r5, [sp, #12]
    2ea6:	429d      	cmp	r5, r3
    2ea8:	d3c6      	bcc.n	2e38 <__aeabi_ddiv+0x5c8>
    2eaa:	0011      	movs	r1, r2
    2eac:	e762      	b.n	2d74 <__aeabi_ddiv+0x504>
    2eae:	2500      	movs	r5, #0
    2eb0:	e7d8      	b.n	2e64 <__aeabi_ddiv+0x5f4>
    2eb2:	2280      	movs	r2, #128	; 0x80
    2eb4:	465b      	mov	r3, fp
    2eb6:	0312      	lsls	r2, r2, #12
    2eb8:	431a      	orrs	r2, r3
    2eba:	9b01      	ldr	r3, [sp, #4]
    2ebc:	0312      	lsls	r2, r2, #12
    2ebe:	0b12      	lsrs	r2, r2, #12
    2ec0:	469c      	mov	ip, r3
    2ec2:	4688      	mov	r8, r1
    2ec4:	4c03      	ldr	r4, [pc, #12]	; (2ed4 <__aeabi_ddiv+0x664>)
    2ec6:	e5a1      	b.n	2a0c <__aeabi_ddiv+0x19c>
    2ec8:	000003ff 	.word	0x000003ff
    2ecc:	feffffff 	.word	0xfeffffff
    2ed0:	000007fe 	.word	0x000007fe
    2ed4:	000007ff 	.word	0x000007ff

00002ed8 <__aeabi_dmul>:
    2ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eda:	4657      	mov	r7, sl
    2edc:	4645      	mov	r5, r8
    2ede:	46de      	mov	lr, fp
    2ee0:	464e      	mov	r6, r9
    2ee2:	b5e0      	push	{r5, r6, r7, lr}
    2ee4:	030c      	lsls	r4, r1, #12
    2ee6:	4698      	mov	r8, r3
    2ee8:	004e      	lsls	r6, r1, #1
    2eea:	0b23      	lsrs	r3, r4, #12
    2eec:	b087      	sub	sp, #28
    2eee:	0007      	movs	r7, r0
    2ef0:	4692      	mov	sl, r2
    2ef2:	469b      	mov	fp, r3
    2ef4:	0d76      	lsrs	r6, r6, #21
    2ef6:	0fcd      	lsrs	r5, r1, #31
    2ef8:	2e00      	cmp	r6, #0
    2efa:	d06b      	beq.n	2fd4 <__aeabi_dmul+0xfc>
    2efc:	4b6d      	ldr	r3, [pc, #436]	; (30b4 <__aeabi_dmul+0x1dc>)
    2efe:	429e      	cmp	r6, r3
    2f00:	d035      	beq.n	2f6e <__aeabi_dmul+0x96>
    2f02:	2480      	movs	r4, #128	; 0x80
    2f04:	465b      	mov	r3, fp
    2f06:	0f42      	lsrs	r2, r0, #29
    2f08:	0424      	lsls	r4, r4, #16
    2f0a:	00db      	lsls	r3, r3, #3
    2f0c:	4314      	orrs	r4, r2
    2f0e:	431c      	orrs	r4, r3
    2f10:	00c3      	lsls	r3, r0, #3
    2f12:	4699      	mov	r9, r3
    2f14:	4b68      	ldr	r3, [pc, #416]	; (30b8 <__aeabi_dmul+0x1e0>)
    2f16:	46a3      	mov	fp, r4
    2f18:	469c      	mov	ip, r3
    2f1a:	2300      	movs	r3, #0
    2f1c:	2700      	movs	r7, #0
    2f1e:	4466      	add	r6, ip
    2f20:	9302      	str	r3, [sp, #8]
    2f22:	4643      	mov	r3, r8
    2f24:	031c      	lsls	r4, r3, #12
    2f26:	005a      	lsls	r2, r3, #1
    2f28:	0fdb      	lsrs	r3, r3, #31
    2f2a:	4650      	mov	r0, sl
    2f2c:	0b24      	lsrs	r4, r4, #12
    2f2e:	0d52      	lsrs	r2, r2, #21
    2f30:	4698      	mov	r8, r3
    2f32:	d100      	bne.n	2f36 <__aeabi_dmul+0x5e>
    2f34:	e076      	b.n	3024 <__aeabi_dmul+0x14c>
    2f36:	4b5f      	ldr	r3, [pc, #380]	; (30b4 <__aeabi_dmul+0x1dc>)
    2f38:	429a      	cmp	r2, r3
    2f3a:	d06d      	beq.n	3018 <__aeabi_dmul+0x140>
    2f3c:	2380      	movs	r3, #128	; 0x80
    2f3e:	0f41      	lsrs	r1, r0, #29
    2f40:	041b      	lsls	r3, r3, #16
    2f42:	430b      	orrs	r3, r1
    2f44:	495c      	ldr	r1, [pc, #368]	; (30b8 <__aeabi_dmul+0x1e0>)
    2f46:	00e4      	lsls	r4, r4, #3
    2f48:	468c      	mov	ip, r1
    2f4a:	431c      	orrs	r4, r3
    2f4c:	00c3      	lsls	r3, r0, #3
    2f4e:	2000      	movs	r0, #0
    2f50:	4462      	add	r2, ip
    2f52:	4641      	mov	r1, r8
    2f54:	18b6      	adds	r6, r6, r2
    2f56:	4069      	eors	r1, r5
    2f58:	1c72      	adds	r2, r6, #1
    2f5a:	9101      	str	r1, [sp, #4]
    2f5c:	4694      	mov	ip, r2
    2f5e:	4307      	orrs	r7, r0
    2f60:	2f0f      	cmp	r7, #15
    2f62:	d900      	bls.n	2f66 <__aeabi_dmul+0x8e>
    2f64:	e0b0      	b.n	30c8 <__aeabi_dmul+0x1f0>
    2f66:	4a55      	ldr	r2, [pc, #340]	; (30bc <__aeabi_dmul+0x1e4>)
    2f68:	00bf      	lsls	r7, r7, #2
    2f6a:	59d2      	ldr	r2, [r2, r7]
    2f6c:	4697      	mov	pc, r2
    2f6e:	465b      	mov	r3, fp
    2f70:	4303      	orrs	r3, r0
    2f72:	4699      	mov	r9, r3
    2f74:	d000      	beq.n	2f78 <__aeabi_dmul+0xa0>
    2f76:	e087      	b.n	3088 <__aeabi_dmul+0x1b0>
    2f78:	2300      	movs	r3, #0
    2f7a:	469b      	mov	fp, r3
    2f7c:	3302      	adds	r3, #2
    2f7e:	2708      	movs	r7, #8
    2f80:	9302      	str	r3, [sp, #8]
    2f82:	e7ce      	b.n	2f22 <__aeabi_dmul+0x4a>
    2f84:	4642      	mov	r2, r8
    2f86:	9201      	str	r2, [sp, #4]
    2f88:	2802      	cmp	r0, #2
    2f8a:	d067      	beq.n	305c <__aeabi_dmul+0x184>
    2f8c:	2803      	cmp	r0, #3
    2f8e:	d100      	bne.n	2f92 <__aeabi_dmul+0xba>
    2f90:	e20e      	b.n	33b0 <__aeabi_dmul+0x4d8>
    2f92:	2801      	cmp	r0, #1
    2f94:	d000      	beq.n	2f98 <__aeabi_dmul+0xc0>
    2f96:	e162      	b.n	325e <__aeabi_dmul+0x386>
    2f98:	2300      	movs	r3, #0
    2f9a:	2400      	movs	r4, #0
    2f9c:	2200      	movs	r2, #0
    2f9e:	4699      	mov	r9, r3
    2fa0:	9901      	ldr	r1, [sp, #4]
    2fa2:	4001      	ands	r1, r0
    2fa4:	b2cd      	uxtb	r5, r1
    2fa6:	2100      	movs	r1, #0
    2fa8:	0312      	lsls	r2, r2, #12
    2faa:	0d0b      	lsrs	r3, r1, #20
    2fac:	0b12      	lsrs	r2, r2, #12
    2fae:	051b      	lsls	r3, r3, #20
    2fb0:	4313      	orrs	r3, r2
    2fb2:	4a43      	ldr	r2, [pc, #268]	; (30c0 <__aeabi_dmul+0x1e8>)
    2fb4:	0524      	lsls	r4, r4, #20
    2fb6:	4013      	ands	r3, r2
    2fb8:	431c      	orrs	r4, r3
    2fba:	0064      	lsls	r4, r4, #1
    2fbc:	07ed      	lsls	r5, r5, #31
    2fbe:	0864      	lsrs	r4, r4, #1
    2fc0:	432c      	orrs	r4, r5
    2fc2:	4648      	mov	r0, r9
    2fc4:	0021      	movs	r1, r4
    2fc6:	b007      	add	sp, #28
    2fc8:	bc3c      	pop	{r2, r3, r4, r5}
    2fca:	4690      	mov	r8, r2
    2fcc:	4699      	mov	r9, r3
    2fce:	46a2      	mov	sl, r4
    2fd0:	46ab      	mov	fp, r5
    2fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fd4:	4303      	orrs	r3, r0
    2fd6:	4699      	mov	r9, r3
    2fd8:	d04f      	beq.n	307a <__aeabi_dmul+0x1a2>
    2fda:	465b      	mov	r3, fp
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d100      	bne.n	2fe2 <__aeabi_dmul+0x10a>
    2fe0:	e189      	b.n	32f6 <__aeabi_dmul+0x41e>
    2fe2:	4658      	mov	r0, fp
    2fe4:	f000 fe86 	bl	3cf4 <__clzsi2>
    2fe8:	0003      	movs	r3, r0
    2fea:	3b0b      	subs	r3, #11
    2fec:	2b1c      	cmp	r3, #28
    2fee:	dd00      	ble.n	2ff2 <__aeabi_dmul+0x11a>
    2ff0:	e17a      	b.n	32e8 <__aeabi_dmul+0x410>
    2ff2:	221d      	movs	r2, #29
    2ff4:	1ad3      	subs	r3, r2, r3
    2ff6:	003a      	movs	r2, r7
    2ff8:	0001      	movs	r1, r0
    2ffa:	465c      	mov	r4, fp
    2ffc:	40da      	lsrs	r2, r3
    2ffe:	3908      	subs	r1, #8
    3000:	408c      	lsls	r4, r1
    3002:	0013      	movs	r3, r2
    3004:	408f      	lsls	r7, r1
    3006:	4323      	orrs	r3, r4
    3008:	469b      	mov	fp, r3
    300a:	46b9      	mov	r9, r7
    300c:	2300      	movs	r3, #0
    300e:	4e2d      	ldr	r6, [pc, #180]	; (30c4 <__aeabi_dmul+0x1ec>)
    3010:	2700      	movs	r7, #0
    3012:	1a36      	subs	r6, r6, r0
    3014:	9302      	str	r3, [sp, #8]
    3016:	e784      	b.n	2f22 <__aeabi_dmul+0x4a>
    3018:	4653      	mov	r3, sl
    301a:	4323      	orrs	r3, r4
    301c:	d12a      	bne.n	3074 <__aeabi_dmul+0x19c>
    301e:	2400      	movs	r4, #0
    3020:	2002      	movs	r0, #2
    3022:	e796      	b.n	2f52 <__aeabi_dmul+0x7a>
    3024:	4653      	mov	r3, sl
    3026:	4323      	orrs	r3, r4
    3028:	d020      	beq.n	306c <__aeabi_dmul+0x194>
    302a:	2c00      	cmp	r4, #0
    302c:	d100      	bne.n	3030 <__aeabi_dmul+0x158>
    302e:	e157      	b.n	32e0 <__aeabi_dmul+0x408>
    3030:	0020      	movs	r0, r4
    3032:	f000 fe5f 	bl	3cf4 <__clzsi2>
    3036:	0003      	movs	r3, r0
    3038:	3b0b      	subs	r3, #11
    303a:	2b1c      	cmp	r3, #28
    303c:	dd00      	ble.n	3040 <__aeabi_dmul+0x168>
    303e:	e149      	b.n	32d4 <__aeabi_dmul+0x3fc>
    3040:	211d      	movs	r1, #29
    3042:	1acb      	subs	r3, r1, r3
    3044:	4651      	mov	r1, sl
    3046:	0002      	movs	r2, r0
    3048:	40d9      	lsrs	r1, r3
    304a:	4653      	mov	r3, sl
    304c:	3a08      	subs	r2, #8
    304e:	4094      	lsls	r4, r2
    3050:	4093      	lsls	r3, r2
    3052:	430c      	orrs	r4, r1
    3054:	4a1b      	ldr	r2, [pc, #108]	; (30c4 <__aeabi_dmul+0x1ec>)
    3056:	1a12      	subs	r2, r2, r0
    3058:	2000      	movs	r0, #0
    305a:	e77a      	b.n	2f52 <__aeabi_dmul+0x7a>
    305c:	2501      	movs	r5, #1
    305e:	9b01      	ldr	r3, [sp, #4]
    3060:	4c14      	ldr	r4, [pc, #80]	; (30b4 <__aeabi_dmul+0x1dc>)
    3062:	401d      	ands	r5, r3
    3064:	2300      	movs	r3, #0
    3066:	2200      	movs	r2, #0
    3068:	4699      	mov	r9, r3
    306a:	e79c      	b.n	2fa6 <__aeabi_dmul+0xce>
    306c:	2400      	movs	r4, #0
    306e:	2200      	movs	r2, #0
    3070:	2001      	movs	r0, #1
    3072:	e76e      	b.n	2f52 <__aeabi_dmul+0x7a>
    3074:	4653      	mov	r3, sl
    3076:	2003      	movs	r0, #3
    3078:	e76b      	b.n	2f52 <__aeabi_dmul+0x7a>
    307a:	2300      	movs	r3, #0
    307c:	469b      	mov	fp, r3
    307e:	3301      	adds	r3, #1
    3080:	2704      	movs	r7, #4
    3082:	2600      	movs	r6, #0
    3084:	9302      	str	r3, [sp, #8]
    3086:	e74c      	b.n	2f22 <__aeabi_dmul+0x4a>
    3088:	2303      	movs	r3, #3
    308a:	4681      	mov	r9, r0
    308c:	270c      	movs	r7, #12
    308e:	9302      	str	r3, [sp, #8]
    3090:	e747      	b.n	2f22 <__aeabi_dmul+0x4a>
    3092:	2280      	movs	r2, #128	; 0x80
    3094:	2300      	movs	r3, #0
    3096:	2500      	movs	r5, #0
    3098:	0312      	lsls	r2, r2, #12
    309a:	4699      	mov	r9, r3
    309c:	4c05      	ldr	r4, [pc, #20]	; (30b4 <__aeabi_dmul+0x1dc>)
    309e:	e782      	b.n	2fa6 <__aeabi_dmul+0xce>
    30a0:	465c      	mov	r4, fp
    30a2:	464b      	mov	r3, r9
    30a4:	9802      	ldr	r0, [sp, #8]
    30a6:	e76f      	b.n	2f88 <__aeabi_dmul+0xb0>
    30a8:	465c      	mov	r4, fp
    30aa:	464b      	mov	r3, r9
    30ac:	9501      	str	r5, [sp, #4]
    30ae:	9802      	ldr	r0, [sp, #8]
    30b0:	e76a      	b.n	2f88 <__aeabi_dmul+0xb0>
    30b2:	46c0      	nop			; (mov r8, r8)
    30b4:	000007ff 	.word	0x000007ff
    30b8:	fffffc01 	.word	0xfffffc01
    30bc:	00006240 	.word	0x00006240
    30c0:	800fffff 	.word	0x800fffff
    30c4:	fffffc0d 	.word	0xfffffc0d
    30c8:	464a      	mov	r2, r9
    30ca:	4649      	mov	r1, r9
    30cc:	0c17      	lsrs	r7, r2, #16
    30ce:	0c1a      	lsrs	r2, r3, #16
    30d0:	041b      	lsls	r3, r3, #16
    30d2:	0c1b      	lsrs	r3, r3, #16
    30d4:	0408      	lsls	r0, r1, #16
    30d6:	0019      	movs	r1, r3
    30d8:	0c00      	lsrs	r0, r0, #16
    30da:	4341      	muls	r1, r0
    30dc:	0015      	movs	r5, r2
    30de:	4688      	mov	r8, r1
    30e0:	0019      	movs	r1, r3
    30e2:	437d      	muls	r5, r7
    30e4:	4379      	muls	r1, r7
    30e6:	9503      	str	r5, [sp, #12]
    30e8:	4689      	mov	r9, r1
    30ea:	0029      	movs	r1, r5
    30ec:	0015      	movs	r5, r2
    30ee:	4345      	muls	r5, r0
    30f0:	444d      	add	r5, r9
    30f2:	9502      	str	r5, [sp, #8]
    30f4:	4645      	mov	r5, r8
    30f6:	0c2d      	lsrs	r5, r5, #16
    30f8:	46aa      	mov	sl, r5
    30fa:	9d02      	ldr	r5, [sp, #8]
    30fc:	4455      	add	r5, sl
    30fe:	45a9      	cmp	r9, r5
    3100:	d906      	bls.n	3110 <__aeabi_dmul+0x238>
    3102:	468a      	mov	sl, r1
    3104:	2180      	movs	r1, #128	; 0x80
    3106:	0249      	lsls	r1, r1, #9
    3108:	4689      	mov	r9, r1
    310a:	44ca      	add	sl, r9
    310c:	4651      	mov	r1, sl
    310e:	9103      	str	r1, [sp, #12]
    3110:	0c29      	lsrs	r1, r5, #16
    3112:	9104      	str	r1, [sp, #16]
    3114:	4641      	mov	r1, r8
    3116:	0409      	lsls	r1, r1, #16
    3118:	042d      	lsls	r5, r5, #16
    311a:	0c09      	lsrs	r1, r1, #16
    311c:	4688      	mov	r8, r1
    311e:	0029      	movs	r1, r5
    3120:	0c25      	lsrs	r5, r4, #16
    3122:	0424      	lsls	r4, r4, #16
    3124:	4441      	add	r1, r8
    3126:	0c24      	lsrs	r4, r4, #16
    3128:	9105      	str	r1, [sp, #20]
    312a:	0021      	movs	r1, r4
    312c:	4341      	muls	r1, r0
    312e:	4688      	mov	r8, r1
    3130:	0021      	movs	r1, r4
    3132:	4379      	muls	r1, r7
    3134:	468a      	mov	sl, r1
    3136:	4368      	muls	r0, r5
    3138:	4641      	mov	r1, r8
    313a:	4450      	add	r0, sl
    313c:	4681      	mov	r9, r0
    313e:	0c08      	lsrs	r0, r1, #16
    3140:	4448      	add	r0, r9
    3142:	436f      	muls	r7, r5
    3144:	4582      	cmp	sl, r0
    3146:	d903      	bls.n	3150 <__aeabi_dmul+0x278>
    3148:	2180      	movs	r1, #128	; 0x80
    314a:	0249      	lsls	r1, r1, #9
    314c:	4689      	mov	r9, r1
    314e:	444f      	add	r7, r9
    3150:	0c01      	lsrs	r1, r0, #16
    3152:	4689      	mov	r9, r1
    3154:	0039      	movs	r1, r7
    3156:	4449      	add	r1, r9
    3158:	9102      	str	r1, [sp, #8]
    315a:	4641      	mov	r1, r8
    315c:	040f      	lsls	r7, r1, #16
    315e:	9904      	ldr	r1, [sp, #16]
    3160:	0c3f      	lsrs	r7, r7, #16
    3162:	4688      	mov	r8, r1
    3164:	0400      	lsls	r0, r0, #16
    3166:	19c0      	adds	r0, r0, r7
    3168:	4480      	add	r8, r0
    316a:	4641      	mov	r1, r8
    316c:	9104      	str	r1, [sp, #16]
    316e:	4659      	mov	r1, fp
    3170:	0c0f      	lsrs	r7, r1, #16
    3172:	0409      	lsls	r1, r1, #16
    3174:	0c09      	lsrs	r1, r1, #16
    3176:	4688      	mov	r8, r1
    3178:	4359      	muls	r1, r3
    317a:	468a      	mov	sl, r1
    317c:	0039      	movs	r1, r7
    317e:	4351      	muls	r1, r2
    3180:	4689      	mov	r9, r1
    3182:	4641      	mov	r1, r8
    3184:	434a      	muls	r2, r1
    3186:	4651      	mov	r1, sl
    3188:	0c09      	lsrs	r1, r1, #16
    318a:	468b      	mov	fp, r1
    318c:	437b      	muls	r3, r7
    318e:	18d2      	adds	r2, r2, r3
    3190:	445a      	add	r2, fp
    3192:	4293      	cmp	r3, r2
    3194:	d903      	bls.n	319e <__aeabi_dmul+0x2c6>
    3196:	2380      	movs	r3, #128	; 0x80
    3198:	025b      	lsls	r3, r3, #9
    319a:	469b      	mov	fp, r3
    319c:	44d9      	add	r9, fp
    319e:	4651      	mov	r1, sl
    31a0:	0409      	lsls	r1, r1, #16
    31a2:	0c09      	lsrs	r1, r1, #16
    31a4:	468a      	mov	sl, r1
    31a6:	4641      	mov	r1, r8
    31a8:	4361      	muls	r1, r4
    31aa:	437c      	muls	r4, r7
    31ac:	0c13      	lsrs	r3, r2, #16
    31ae:	0412      	lsls	r2, r2, #16
    31b0:	444b      	add	r3, r9
    31b2:	4452      	add	r2, sl
    31b4:	46a1      	mov	r9, r4
    31b6:	468a      	mov	sl, r1
    31b8:	003c      	movs	r4, r7
    31ba:	4641      	mov	r1, r8
    31bc:	436c      	muls	r4, r5
    31be:	434d      	muls	r5, r1
    31c0:	4651      	mov	r1, sl
    31c2:	444d      	add	r5, r9
    31c4:	0c0f      	lsrs	r7, r1, #16
    31c6:	197d      	adds	r5, r7, r5
    31c8:	45a9      	cmp	r9, r5
    31ca:	d903      	bls.n	31d4 <__aeabi_dmul+0x2fc>
    31cc:	2180      	movs	r1, #128	; 0x80
    31ce:	0249      	lsls	r1, r1, #9
    31d0:	4688      	mov	r8, r1
    31d2:	4444      	add	r4, r8
    31d4:	9f04      	ldr	r7, [sp, #16]
    31d6:	9903      	ldr	r1, [sp, #12]
    31d8:	46b8      	mov	r8, r7
    31da:	4441      	add	r1, r8
    31dc:	468b      	mov	fp, r1
    31de:	4583      	cmp	fp, r0
    31e0:	4180      	sbcs	r0, r0
    31e2:	4241      	negs	r1, r0
    31e4:	4688      	mov	r8, r1
    31e6:	4651      	mov	r1, sl
    31e8:	0408      	lsls	r0, r1, #16
    31ea:	042f      	lsls	r7, r5, #16
    31ec:	0c00      	lsrs	r0, r0, #16
    31ee:	183f      	adds	r7, r7, r0
    31f0:	4658      	mov	r0, fp
    31f2:	9902      	ldr	r1, [sp, #8]
    31f4:	1810      	adds	r0, r2, r0
    31f6:	4689      	mov	r9, r1
    31f8:	4290      	cmp	r0, r2
    31fa:	4192      	sbcs	r2, r2
    31fc:	444f      	add	r7, r9
    31fe:	46ba      	mov	sl, r7
    3200:	4252      	negs	r2, r2
    3202:	4699      	mov	r9, r3
    3204:	4693      	mov	fp, r2
    3206:	44c2      	add	sl, r8
    3208:	44d1      	add	r9, sl
    320a:	44cb      	add	fp, r9
    320c:	428f      	cmp	r7, r1
    320e:	41bf      	sbcs	r7, r7
    3210:	45c2      	cmp	sl, r8
    3212:	4189      	sbcs	r1, r1
    3214:	4599      	cmp	r9, r3
    3216:	419b      	sbcs	r3, r3
    3218:	4593      	cmp	fp, r2
    321a:	4192      	sbcs	r2, r2
    321c:	427f      	negs	r7, r7
    321e:	4249      	negs	r1, r1
    3220:	0c2d      	lsrs	r5, r5, #16
    3222:	4252      	negs	r2, r2
    3224:	430f      	orrs	r7, r1
    3226:	425b      	negs	r3, r3
    3228:	4313      	orrs	r3, r2
    322a:	197f      	adds	r7, r7, r5
    322c:	18ff      	adds	r7, r7, r3
    322e:	465b      	mov	r3, fp
    3230:	193c      	adds	r4, r7, r4
    3232:	0ddb      	lsrs	r3, r3, #23
    3234:	9a05      	ldr	r2, [sp, #20]
    3236:	0264      	lsls	r4, r4, #9
    3238:	431c      	orrs	r4, r3
    323a:	0243      	lsls	r3, r0, #9
    323c:	4313      	orrs	r3, r2
    323e:	1e5d      	subs	r5, r3, #1
    3240:	41ab      	sbcs	r3, r5
    3242:	465a      	mov	r2, fp
    3244:	0dc0      	lsrs	r0, r0, #23
    3246:	4303      	orrs	r3, r0
    3248:	0252      	lsls	r2, r2, #9
    324a:	4313      	orrs	r3, r2
    324c:	01e2      	lsls	r2, r4, #7
    324e:	d556      	bpl.n	32fe <__aeabi_dmul+0x426>
    3250:	2001      	movs	r0, #1
    3252:	085a      	lsrs	r2, r3, #1
    3254:	4003      	ands	r3, r0
    3256:	4313      	orrs	r3, r2
    3258:	07e2      	lsls	r2, r4, #31
    325a:	4313      	orrs	r3, r2
    325c:	0864      	lsrs	r4, r4, #1
    325e:	485a      	ldr	r0, [pc, #360]	; (33c8 <__aeabi_dmul+0x4f0>)
    3260:	4460      	add	r0, ip
    3262:	2800      	cmp	r0, #0
    3264:	dd4d      	ble.n	3302 <__aeabi_dmul+0x42a>
    3266:	075a      	lsls	r2, r3, #29
    3268:	d009      	beq.n	327e <__aeabi_dmul+0x3a6>
    326a:	220f      	movs	r2, #15
    326c:	401a      	ands	r2, r3
    326e:	2a04      	cmp	r2, #4
    3270:	d005      	beq.n	327e <__aeabi_dmul+0x3a6>
    3272:	1d1a      	adds	r2, r3, #4
    3274:	429a      	cmp	r2, r3
    3276:	419b      	sbcs	r3, r3
    3278:	425b      	negs	r3, r3
    327a:	18e4      	adds	r4, r4, r3
    327c:	0013      	movs	r3, r2
    327e:	01e2      	lsls	r2, r4, #7
    3280:	d504      	bpl.n	328c <__aeabi_dmul+0x3b4>
    3282:	2080      	movs	r0, #128	; 0x80
    3284:	4a51      	ldr	r2, [pc, #324]	; (33cc <__aeabi_dmul+0x4f4>)
    3286:	00c0      	lsls	r0, r0, #3
    3288:	4014      	ands	r4, r2
    328a:	4460      	add	r0, ip
    328c:	4a50      	ldr	r2, [pc, #320]	; (33d0 <__aeabi_dmul+0x4f8>)
    328e:	4290      	cmp	r0, r2
    3290:	dd00      	ble.n	3294 <__aeabi_dmul+0x3bc>
    3292:	e6e3      	b.n	305c <__aeabi_dmul+0x184>
    3294:	2501      	movs	r5, #1
    3296:	08db      	lsrs	r3, r3, #3
    3298:	0762      	lsls	r2, r4, #29
    329a:	431a      	orrs	r2, r3
    329c:	0264      	lsls	r4, r4, #9
    329e:	9b01      	ldr	r3, [sp, #4]
    32a0:	4691      	mov	r9, r2
    32a2:	0b22      	lsrs	r2, r4, #12
    32a4:	0544      	lsls	r4, r0, #21
    32a6:	0d64      	lsrs	r4, r4, #21
    32a8:	401d      	ands	r5, r3
    32aa:	e67c      	b.n	2fa6 <__aeabi_dmul+0xce>
    32ac:	2280      	movs	r2, #128	; 0x80
    32ae:	4659      	mov	r1, fp
    32b0:	0312      	lsls	r2, r2, #12
    32b2:	4211      	tst	r1, r2
    32b4:	d008      	beq.n	32c8 <__aeabi_dmul+0x3f0>
    32b6:	4214      	tst	r4, r2
    32b8:	d106      	bne.n	32c8 <__aeabi_dmul+0x3f0>
    32ba:	4322      	orrs	r2, r4
    32bc:	0312      	lsls	r2, r2, #12
    32be:	0b12      	lsrs	r2, r2, #12
    32c0:	4645      	mov	r5, r8
    32c2:	4699      	mov	r9, r3
    32c4:	4c43      	ldr	r4, [pc, #268]	; (33d4 <__aeabi_dmul+0x4fc>)
    32c6:	e66e      	b.n	2fa6 <__aeabi_dmul+0xce>
    32c8:	465b      	mov	r3, fp
    32ca:	431a      	orrs	r2, r3
    32cc:	0312      	lsls	r2, r2, #12
    32ce:	0b12      	lsrs	r2, r2, #12
    32d0:	4c40      	ldr	r4, [pc, #256]	; (33d4 <__aeabi_dmul+0x4fc>)
    32d2:	e668      	b.n	2fa6 <__aeabi_dmul+0xce>
    32d4:	0003      	movs	r3, r0
    32d6:	4654      	mov	r4, sl
    32d8:	3b28      	subs	r3, #40	; 0x28
    32da:	409c      	lsls	r4, r3
    32dc:	2300      	movs	r3, #0
    32de:	e6b9      	b.n	3054 <__aeabi_dmul+0x17c>
    32e0:	f000 fd08 	bl	3cf4 <__clzsi2>
    32e4:	3020      	adds	r0, #32
    32e6:	e6a6      	b.n	3036 <__aeabi_dmul+0x15e>
    32e8:	0003      	movs	r3, r0
    32ea:	3b28      	subs	r3, #40	; 0x28
    32ec:	409f      	lsls	r7, r3
    32ee:	2300      	movs	r3, #0
    32f0:	46bb      	mov	fp, r7
    32f2:	4699      	mov	r9, r3
    32f4:	e68a      	b.n	300c <__aeabi_dmul+0x134>
    32f6:	f000 fcfd 	bl	3cf4 <__clzsi2>
    32fa:	3020      	adds	r0, #32
    32fc:	e674      	b.n	2fe8 <__aeabi_dmul+0x110>
    32fe:	46b4      	mov	ip, r6
    3300:	e7ad      	b.n	325e <__aeabi_dmul+0x386>
    3302:	2501      	movs	r5, #1
    3304:	1a2a      	subs	r2, r5, r0
    3306:	2a38      	cmp	r2, #56	; 0x38
    3308:	dd06      	ble.n	3318 <__aeabi_dmul+0x440>
    330a:	9b01      	ldr	r3, [sp, #4]
    330c:	2400      	movs	r4, #0
    330e:	401d      	ands	r5, r3
    3310:	2300      	movs	r3, #0
    3312:	2200      	movs	r2, #0
    3314:	4699      	mov	r9, r3
    3316:	e646      	b.n	2fa6 <__aeabi_dmul+0xce>
    3318:	2a1f      	cmp	r2, #31
    331a:	dc21      	bgt.n	3360 <__aeabi_dmul+0x488>
    331c:	2520      	movs	r5, #32
    331e:	0020      	movs	r0, r4
    3320:	1aad      	subs	r5, r5, r2
    3322:	001e      	movs	r6, r3
    3324:	40ab      	lsls	r3, r5
    3326:	40a8      	lsls	r0, r5
    3328:	40d6      	lsrs	r6, r2
    332a:	1e5d      	subs	r5, r3, #1
    332c:	41ab      	sbcs	r3, r5
    332e:	4330      	orrs	r0, r6
    3330:	4318      	orrs	r0, r3
    3332:	40d4      	lsrs	r4, r2
    3334:	0743      	lsls	r3, r0, #29
    3336:	d009      	beq.n	334c <__aeabi_dmul+0x474>
    3338:	230f      	movs	r3, #15
    333a:	4003      	ands	r3, r0
    333c:	2b04      	cmp	r3, #4
    333e:	d005      	beq.n	334c <__aeabi_dmul+0x474>
    3340:	0003      	movs	r3, r0
    3342:	1d18      	adds	r0, r3, #4
    3344:	4298      	cmp	r0, r3
    3346:	419b      	sbcs	r3, r3
    3348:	425b      	negs	r3, r3
    334a:	18e4      	adds	r4, r4, r3
    334c:	0223      	lsls	r3, r4, #8
    334e:	d521      	bpl.n	3394 <__aeabi_dmul+0x4bc>
    3350:	2501      	movs	r5, #1
    3352:	9b01      	ldr	r3, [sp, #4]
    3354:	2401      	movs	r4, #1
    3356:	401d      	ands	r5, r3
    3358:	2300      	movs	r3, #0
    335a:	2200      	movs	r2, #0
    335c:	4699      	mov	r9, r3
    335e:	e622      	b.n	2fa6 <__aeabi_dmul+0xce>
    3360:	251f      	movs	r5, #31
    3362:	0021      	movs	r1, r4
    3364:	426d      	negs	r5, r5
    3366:	1a28      	subs	r0, r5, r0
    3368:	40c1      	lsrs	r1, r0
    336a:	0008      	movs	r0, r1
    336c:	2a20      	cmp	r2, #32
    336e:	d01d      	beq.n	33ac <__aeabi_dmul+0x4d4>
    3370:	355f      	adds	r5, #95	; 0x5f
    3372:	1aaa      	subs	r2, r5, r2
    3374:	4094      	lsls	r4, r2
    3376:	4323      	orrs	r3, r4
    3378:	1e5c      	subs	r4, r3, #1
    337a:	41a3      	sbcs	r3, r4
    337c:	2507      	movs	r5, #7
    337e:	4303      	orrs	r3, r0
    3380:	401d      	ands	r5, r3
    3382:	2200      	movs	r2, #0
    3384:	2d00      	cmp	r5, #0
    3386:	d009      	beq.n	339c <__aeabi_dmul+0x4c4>
    3388:	220f      	movs	r2, #15
    338a:	2400      	movs	r4, #0
    338c:	401a      	ands	r2, r3
    338e:	0018      	movs	r0, r3
    3390:	2a04      	cmp	r2, #4
    3392:	d1d6      	bne.n	3342 <__aeabi_dmul+0x46a>
    3394:	0003      	movs	r3, r0
    3396:	0765      	lsls	r5, r4, #29
    3398:	0264      	lsls	r4, r4, #9
    339a:	0b22      	lsrs	r2, r4, #12
    339c:	08db      	lsrs	r3, r3, #3
    339e:	432b      	orrs	r3, r5
    33a0:	2501      	movs	r5, #1
    33a2:	4699      	mov	r9, r3
    33a4:	9b01      	ldr	r3, [sp, #4]
    33a6:	2400      	movs	r4, #0
    33a8:	401d      	ands	r5, r3
    33aa:	e5fc      	b.n	2fa6 <__aeabi_dmul+0xce>
    33ac:	2400      	movs	r4, #0
    33ae:	e7e2      	b.n	3376 <__aeabi_dmul+0x49e>
    33b0:	2280      	movs	r2, #128	; 0x80
    33b2:	2501      	movs	r5, #1
    33b4:	0312      	lsls	r2, r2, #12
    33b6:	4322      	orrs	r2, r4
    33b8:	9901      	ldr	r1, [sp, #4]
    33ba:	0312      	lsls	r2, r2, #12
    33bc:	0b12      	lsrs	r2, r2, #12
    33be:	400d      	ands	r5, r1
    33c0:	4699      	mov	r9, r3
    33c2:	4c04      	ldr	r4, [pc, #16]	; (33d4 <__aeabi_dmul+0x4fc>)
    33c4:	e5ef      	b.n	2fa6 <__aeabi_dmul+0xce>
    33c6:	46c0      	nop			; (mov r8, r8)
    33c8:	000003ff 	.word	0x000003ff
    33cc:	feffffff 	.word	0xfeffffff
    33d0:	000007fe 	.word	0x000007fe
    33d4:	000007ff 	.word	0x000007ff

000033d8 <__aeabi_dsub>:
    33d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33da:	4646      	mov	r6, r8
    33dc:	46d6      	mov	lr, sl
    33de:	464f      	mov	r7, r9
    33e0:	030c      	lsls	r4, r1, #12
    33e2:	b5c0      	push	{r6, r7, lr}
    33e4:	0fcd      	lsrs	r5, r1, #31
    33e6:	004e      	lsls	r6, r1, #1
    33e8:	0a61      	lsrs	r1, r4, #9
    33ea:	0f44      	lsrs	r4, r0, #29
    33ec:	430c      	orrs	r4, r1
    33ee:	00c1      	lsls	r1, r0, #3
    33f0:	0058      	lsls	r0, r3, #1
    33f2:	0d40      	lsrs	r0, r0, #21
    33f4:	4684      	mov	ip, r0
    33f6:	468a      	mov	sl, r1
    33f8:	000f      	movs	r7, r1
    33fa:	0319      	lsls	r1, r3, #12
    33fc:	0f50      	lsrs	r0, r2, #29
    33fe:	0a49      	lsrs	r1, r1, #9
    3400:	4301      	orrs	r1, r0
    3402:	48c6      	ldr	r0, [pc, #792]	; (371c <__aeabi_dsub+0x344>)
    3404:	0d76      	lsrs	r6, r6, #21
    3406:	46a8      	mov	r8, r5
    3408:	0fdb      	lsrs	r3, r3, #31
    340a:	00d2      	lsls	r2, r2, #3
    340c:	4584      	cmp	ip, r0
    340e:	d100      	bne.n	3412 <__aeabi_dsub+0x3a>
    3410:	e0d8      	b.n	35c4 <__aeabi_dsub+0x1ec>
    3412:	2001      	movs	r0, #1
    3414:	4043      	eors	r3, r0
    3416:	42ab      	cmp	r3, r5
    3418:	d100      	bne.n	341c <__aeabi_dsub+0x44>
    341a:	e0a6      	b.n	356a <__aeabi_dsub+0x192>
    341c:	4660      	mov	r0, ip
    341e:	1a35      	subs	r5, r6, r0
    3420:	2d00      	cmp	r5, #0
    3422:	dc00      	bgt.n	3426 <__aeabi_dsub+0x4e>
    3424:	e105      	b.n	3632 <__aeabi_dsub+0x25a>
    3426:	2800      	cmp	r0, #0
    3428:	d110      	bne.n	344c <__aeabi_dsub+0x74>
    342a:	000b      	movs	r3, r1
    342c:	4313      	orrs	r3, r2
    342e:	d100      	bne.n	3432 <__aeabi_dsub+0x5a>
    3430:	e0d7      	b.n	35e2 <__aeabi_dsub+0x20a>
    3432:	1e6b      	subs	r3, r5, #1
    3434:	2b00      	cmp	r3, #0
    3436:	d000      	beq.n	343a <__aeabi_dsub+0x62>
    3438:	e14b      	b.n	36d2 <__aeabi_dsub+0x2fa>
    343a:	4653      	mov	r3, sl
    343c:	1a9f      	subs	r7, r3, r2
    343e:	45ba      	cmp	sl, r7
    3440:	4180      	sbcs	r0, r0
    3442:	1a64      	subs	r4, r4, r1
    3444:	4240      	negs	r0, r0
    3446:	1a24      	subs	r4, r4, r0
    3448:	2601      	movs	r6, #1
    344a:	e01e      	b.n	348a <__aeabi_dsub+0xb2>
    344c:	4bb3      	ldr	r3, [pc, #716]	; (371c <__aeabi_dsub+0x344>)
    344e:	429e      	cmp	r6, r3
    3450:	d048      	beq.n	34e4 <__aeabi_dsub+0x10c>
    3452:	2380      	movs	r3, #128	; 0x80
    3454:	041b      	lsls	r3, r3, #16
    3456:	4319      	orrs	r1, r3
    3458:	2d38      	cmp	r5, #56	; 0x38
    345a:	dd00      	ble.n	345e <__aeabi_dsub+0x86>
    345c:	e119      	b.n	3692 <__aeabi_dsub+0x2ba>
    345e:	2d1f      	cmp	r5, #31
    3460:	dd00      	ble.n	3464 <__aeabi_dsub+0x8c>
    3462:	e14c      	b.n	36fe <__aeabi_dsub+0x326>
    3464:	2320      	movs	r3, #32
    3466:	000f      	movs	r7, r1
    3468:	1b5b      	subs	r3, r3, r5
    346a:	0010      	movs	r0, r2
    346c:	409a      	lsls	r2, r3
    346e:	409f      	lsls	r7, r3
    3470:	40e8      	lsrs	r0, r5
    3472:	1e53      	subs	r3, r2, #1
    3474:	419a      	sbcs	r2, r3
    3476:	40e9      	lsrs	r1, r5
    3478:	4307      	orrs	r7, r0
    347a:	4317      	orrs	r7, r2
    347c:	4653      	mov	r3, sl
    347e:	1bdf      	subs	r7, r3, r7
    3480:	1a61      	subs	r1, r4, r1
    3482:	45ba      	cmp	sl, r7
    3484:	41a4      	sbcs	r4, r4
    3486:	4264      	negs	r4, r4
    3488:	1b0c      	subs	r4, r1, r4
    348a:	0223      	lsls	r3, r4, #8
    348c:	d400      	bmi.n	3490 <__aeabi_dsub+0xb8>
    348e:	e0c5      	b.n	361c <__aeabi_dsub+0x244>
    3490:	0264      	lsls	r4, r4, #9
    3492:	0a65      	lsrs	r5, r4, #9
    3494:	2d00      	cmp	r5, #0
    3496:	d100      	bne.n	349a <__aeabi_dsub+0xc2>
    3498:	e0f6      	b.n	3688 <__aeabi_dsub+0x2b0>
    349a:	0028      	movs	r0, r5
    349c:	f000 fc2a 	bl	3cf4 <__clzsi2>
    34a0:	0003      	movs	r3, r0
    34a2:	3b08      	subs	r3, #8
    34a4:	2b1f      	cmp	r3, #31
    34a6:	dd00      	ble.n	34aa <__aeabi_dsub+0xd2>
    34a8:	e0e9      	b.n	367e <__aeabi_dsub+0x2a6>
    34aa:	2220      	movs	r2, #32
    34ac:	003c      	movs	r4, r7
    34ae:	1ad2      	subs	r2, r2, r3
    34b0:	409d      	lsls	r5, r3
    34b2:	40d4      	lsrs	r4, r2
    34b4:	409f      	lsls	r7, r3
    34b6:	4325      	orrs	r5, r4
    34b8:	429e      	cmp	r6, r3
    34ba:	dd00      	ble.n	34be <__aeabi_dsub+0xe6>
    34bc:	e0db      	b.n	3676 <__aeabi_dsub+0x29e>
    34be:	1b9e      	subs	r6, r3, r6
    34c0:	1c73      	adds	r3, r6, #1
    34c2:	2b1f      	cmp	r3, #31
    34c4:	dd00      	ble.n	34c8 <__aeabi_dsub+0xf0>
    34c6:	e10a      	b.n	36de <__aeabi_dsub+0x306>
    34c8:	2220      	movs	r2, #32
    34ca:	0038      	movs	r0, r7
    34cc:	1ad2      	subs	r2, r2, r3
    34ce:	0029      	movs	r1, r5
    34d0:	4097      	lsls	r7, r2
    34d2:	002c      	movs	r4, r5
    34d4:	4091      	lsls	r1, r2
    34d6:	40d8      	lsrs	r0, r3
    34d8:	1e7a      	subs	r2, r7, #1
    34da:	4197      	sbcs	r7, r2
    34dc:	40dc      	lsrs	r4, r3
    34de:	2600      	movs	r6, #0
    34e0:	4301      	orrs	r1, r0
    34e2:	430f      	orrs	r7, r1
    34e4:	077b      	lsls	r3, r7, #29
    34e6:	d009      	beq.n	34fc <__aeabi_dsub+0x124>
    34e8:	230f      	movs	r3, #15
    34ea:	403b      	ands	r3, r7
    34ec:	2b04      	cmp	r3, #4
    34ee:	d005      	beq.n	34fc <__aeabi_dsub+0x124>
    34f0:	1d3b      	adds	r3, r7, #4
    34f2:	42bb      	cmp	r3, r7
    34f4:	41bf      	sbcs	r7, r7
    34f6:	427f      	negs	r7, r7
    34f8:	19e4      	adds	r4, r4, r7
    34fa:	001f      	movs	r7, r3
    34fc:	0223      	lsls	r3, r4, #8
    34fe:	d525      	bpl.n	354c <__aeabi_dsub+0x174>
    3500:	4b86      	ldr	r3, [pc, #536]	; (371c <__aeabi_dsub+0x344>)
    3502:	3601      	adds	r6, #1
    3504:	429e      	cmp	r6, r3
    3506:	d100      	bne.n	350a <__aeabi_dsub+0x132>
    3508:	e0af      	b.n	366a <__aeabi_dsub+0x292>
    350a:	4b85      	ldr	r3, [pc, #532]	; (3720 <__aeabi_dsub+0x348>)
    350c:	2501      	movs	r5, #1
    350e:	401c      	ands	r4, r3
    3510:	4643      	mov	r3, r8
    3512:	0762      	lsls	r2, r4, #29
    3514:	08ff      	lsrs	r7, r7, #3
    3516:	0264      	lsls	r4, r4, #9
    3518:	0576      	lsls	r6, r6, #21
    351a:	4317      	orrs	r7, r2
    351c:	0b24      	lsrs	r4, r4, #12
    351e:	0d76      	lsrs	r6, r6, #21
    3520:	401d      	ands	r5, r3
    3522:	2100      	movs	r1, #0
    3524:	0324      	lsls	r4, r4, #12
    3526:	0b23      	lsrs	r3, r4, #12
    3528:	0d0c      	lsrs	r4, r1, #20
    352a:	4a7e      	ldr	r2, [pc, #504]	; (3724 <__aeabi_dsub+0x34c>)
    352c:	0524      	lsls	r4, r4, #20
    352e:	431c      	orrs	r4, r3
    3530:	4014      	ands	r4, r2
    3532:	0533      	lsls	r3, r6, #20
    3534:	4323      	orrs	r3, r4
    3536:	005b      	lsls	r3, r3, #1
    3538:	07ed      	lsls	r5, r5, #31
    353a:	085b      	lsrs	r3, r3, #1
    353c:	432b      	orrs	r3, r5
    353e:	0038      	movs	r0, r7
    3540:	0019      	movs	r1, r3
    3542:	bc1c      	pop	{r2, r3, r4}
    3544:	4690      	mov	r8, r2
    3546:	4699      	mov	r9, r3
    3548:	46a2      	mov	sl, r4
    354a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    354c:	2501      	movs	r5, #1
    354e:	4643      	mov	r3, r8
    3550:	0762      	lsls	r2, r4, #29
    3552:	08ff      	lsrs	r7, r7, #3
    3554:	4317      	orrs	r7, r2
    3556:	08e4      	lsrs	r4, r4, #3
    3558:	401d      	ands	r5, r3
    355a:	4b70      	ldr	r3, [pc, #448]	; (371c <__aeabi_dsub+0x344>)
    355c:	429e      	cmp	r6, r3
    355e:	d036      	beq.n	35ce <__aeabi_dsub+0x1f6>
    3560:	0324      	lsls	r4, r4, #12
    3562:	0576      	lsls	r6, r6, #21
    3564:	0b24      	lsrs	r4, r4, #12
    3566:	0d76      	lsrs	r6, r6, #21
    3568:	e7db      	b.n	3522 <__aeabi_dsub+0x14a>
    356a:	4663      	mov	r3, ip
    356c:	1af3      	subs	r3, r6, r3
    356e:	2b00      	cmp	r3, #0
    3570:	dc00      	bgt.n	3574 <__aeabi_dsub+0x19c>
    3572:	e094      	b.n	369e <__aeabi_dsub+0x2c6>
    3574:	4660      	mov	r0, ip
    3576:	2800      	cmp	r0, #0
    3578:	d035      	beq.n	35e6 <__aeabi_dsub+0x20e>
    357a:	4868      	ldr	r0, [pc, #416]	; (371c <__aeabi_dsub+0x344>)
    357c:	4286      	cmp	r6, r0
    357e:	d0b1      	beq.n	34e4 <__aeabi_dsub+0x10c>
    3580:	2780      	movs	r7, #128	; 0x80
    3582:	043f      	lsls	r7, r7, #16
    3584:	4339      	orrs	r1, r7
    3586:	2b38      	cmp	r3, #56	; 0x38
    3588:	dc00      	bgt.n	358c <__aeabi_dsub+0x1b4>
    358a:	e0fd      	b.n	3788 <__aeabi_dsub+0x3b0>
    358c:	430a      	orrs	r2, r1
    358e:	0017      	movs	r7, r2
    3590:	2100      	movs	r1, #0
    3592:	1e7a      	subs	r2, r7, #1
    3594:	4197      	sbcs	r7, r2
    3596:	4457      	add	r7, sl
    3598:	4557      	cmp	r7, sl
    359a:	4180      	sbcs	r0, r0
    359c:	1909      	adds	r1, r1, r4
    359e:	4244      	negs	r4, r0
    35a0:	190c      	adds	r4, r1, r4
    35a2:	0223      	lsls	r3, r4, #8
    35a4:	d53a      	bpl.n	361c <__aeabi_dsub+0x244>
    35a6:	4b5d      	ldr	r3, [pc, #372]	; (371c <__aeabi_dsub+0x344>)
    35a8:	3601      	adds	r6, #1
    35aa:	429e      	cmp	r6, r3
    35ac:	d100      	bne.n	35b0 <__aeabi_dsub+0x1d8>
    35ae:	e14b      	b.n	3848 <__aeabi_dsub+0x470>
    35b0:	2201      	movs	r2, #1
    35b2:	4b5b      	ldr	r3, [pc, #364]	; (3720 <__aeabi_dsub+0x348>)
    35b4:	401c      	ands	r4, r3
    35b6:	087b      	lsrs	r3, r7, #1
    35b8:	4017      	ands	r7, r2
    35ba:	431f      	orrs	r7, r3
    35bc:	07e2      	lsls	r2, r4, #31
    35be:	4317      	orrs	r7, r2
    35c0:	0864      	lsrs	r4, r4, #1
    35c2:	e78f      	b.n	34e4 <__aeabi_dsub+0x10c>
    35c4:	0008      	movs	r0, r1
    35c6:	4310      	orrs	r0, r2
    35c8:	d000      	beq.n	35cc <__aeabi_dsub+0x1f4>
    35ca:	e724      	b.n	3416 <__aeabi_dsub+0x3e>
    35cc:	e721      	b.n	3412 <__aeabi_dsub+0x3a>
    35ce:	0023      	movs	r3, r4
    35d0:	433b      	orrs	r3, r7
    35d2:	d100      	bne.n	35d6 <__aeabi_dsub+0x1fe>
    35d4:	e1b9      	b.n	394a <__aeabi_dsub+0x572>
    35d6:	2280      	movs	r2, #128	; 0x80
    35d8:	0312      	lsls	r2, r2, #12
    35da:	4314      	orrs	r4, r2
    35dc:	0324      	lsls	r4, r4, #12
    35de:	0b24      	lsrs	r4, r4, #12
    35e0:	e79f      	b.n	3522 <__aeabi_dsub+0x14a>
    35e2:	002e      	movs	r6, r5
    35e4:	e77e      	b.n	34e4 <__aeabi_dsub+0x10c>
    35e6:	0008      	movs	r0, r1
    35e8:	4310      	orrs	r0, r2
    35ea:	d100      	bne.n	35ee <__aeabi_dsub+0x216>
    35ec:	e0ca      	b.n	3784 <__aeabi_dsub+0x3ac>
    35ee:	1e58      	subs	r0, r3, #1
    35f0:	4684      	mov	ip, r0
    35f2:	2800      	cmp	r0, #0
    35f4:	d000      	beq.n	35f8 <__aeabi_dsub+0x220>
    35f6:	e0e7      	b.n	37c8 <__aeabi_dsub+0x3f0>
    35f8:	4452      	add	r2, sl
    35fa:	4552      	cmp	r2, sl
    35fc:	4180      	sbcs	r0, r0
    35fe:	1864      	adds	r4, r4, r1
    3600:	4240      	negs	r0, r0
    3602:	1824      	adds	r4, r4, r0
    3604:	0017      	movs	r7, r2
    3606:	2601      	movs	r6, #1
    3608:	0223      	lsls	r3, r4, #8
    360a:	d507      	bpl.n	361c <__aeabi_dsub+0x244>
    360c:	2602      	movs	r6, #2
    360e:	e7cf      	b.n	35b0 <__aeabi_dsub+0x1d8>
    3610:	4664      	mov	r4, ip
    3612:	432c      	orrs	r4, r5
    3614:	d100      	bne.n	3618 <__aeabi_dsub+0x240>
    3616:	e1b3      	b.n	3980 <__aeabi_dsub+0x5a8>
    3618:	002c      	movs	r4, r5
    361a:	4667      	mov	r7, ip
    361c:	077b      	lsls	r3, r7, #29
    361e:	d000      	beq.n	3622 <__aeabi_dsub+0x24a>
    3620:	e762      	b.n	34e8 <__aeabi_dsub+0x110>
    3622:	0763      	lsls	r3, r4, #29
    3624:	08ff      	lsrs	r7, r7, #3
    3626:	431f      	orrs	r7, r3
    3628:	2501      	movs	r5, #1
    362a:	4643      	mov	r3, r8
    362c:	08e4      	lsrs	r4, r4, #3
    362e:	401d      	ands	r5, r3
    3630:	e793      	b.n	355a <__aeabi_dsub+0x182>
    3632:	2d00      	cmp	r5, #0
    3634:	d178      	bne.n	3728 <__aeabi_dsub+0x350>
    3636:	1c75      	adds	r5, r6, #1
    3638:	056d      	lsls	r5, r5, #21
    363a:	0d6d      	lsrs	r5, r5, #21
    363c:	2d01      	cmp	r5, #1
    363e:	dc00      	bgt.n	3642 <__aeabi_dsub+0x26a>
    3640:	e0f2      	b.n	3828 <__aeabi_dsub+0x450>
    3642:	4650      	mov	r0, sl
    3644:	1a80      	subs	r0, r0, r2
    3646:	4582      	cmp	sl, r0
    3648:	41bf      	sbcs	r7, r7
    364a:	1a65      	subs	r5, r4, r1
    364c:	427f      	negs	r7, r7
    364e:	1bed      	subs	r5, r5, r7
    3650:	4684      	mov	ip, r0
    3652:	0228      	lsls	r0, r5, #8
    3654:	d400      	bmi.n	3658 <__aeabi_dsub+0x280>
    3656:	e08c      	b.n	3772 <__aeabi_dsub+0x39a>
    3658:	4650      	mov	r0, sl
    365a:	1a17      	subs	r7, r2, r0
    365c:	42ba      	cmp	r2, r7
    365e:	4192      	sbcs	r2, r2
    3660:	1b0c      	subs	r4, r1, r4
    3662:	4255      	negs	r5, r2
    3664:	1b65      	subs	r5, r4, r5
    3666:	4698      	mov	r8, r3
    3668:	e714      	b.n	3494 <__aeabi_dsub+0xbc>
    366a:	2501      	movs	r5, #1
    366c:	4643      	mov	r3, r8
    366e:	2400      	movs	r4, #0
    3670:	401d      	ands	r5, r3
    3672:	2700      	movs	r7, #0
    3674:	e755      	b.n	3522 <__aeabi_dsub+0x14a>
    3676:	4c2a      	ldr	r4, [pc, #168]	; (3720 <__aeabi_dsub+0x348>)
    3678:	1af6      	subs	r6, r6, r3
    367a:	402c      	ands	r4, r5
    367c:	e732      	b.n	34e4 <__aeabi_dsub+0x10c>
    367e:	003d      	movs	r5, r7
    3680:	3828      	subs	r0, #40	; 0x28
    3682:	4085      	lsls	r5, r0
    3684:	2700      	movs	r7, #0
    3686:	e717      	b.n	34b8 <__aeabi_dsub+0xe0>
    3688:	0038      	movs	r0, r7
    368a:	f000 fb33 	bl	3cf4 <__clzsi2>
    368e:	3020      	adds	r0, #32
    3690:	e706      	b.n	34a0 <__aeabi_dsub+0xc8>
    3692:	430a      	orrs	r2, r1
    3694:	0017      	movs	r7, r2
    3696:	2100      	movs	r1, #0
    3698:	1e7a      	subs	r2, r7, #1
    369a:	4197      	sbcs	r7, r2
    369c:	e6ee      	b.n	347c <__aeabi_dsub+0xa4>
    369e:	2b00      	cmp	r3, #0
    36a0:	d000      	beq.n	36a4 <__aeabi_dsub+0x2cc>
    36a2:	e0e5      	b.n	3870 <__aeabi_dsub+0x498>
    36a4:	1c73      	adds	r3, r6, #1
    36a6:	469c      	mov	ip, r3
    36a8:	055b      	lsls	r3, r3, #21
    36aa:	0d5b      	lsrs	r3, r3, #21
    36ac:	2b01      	cmp	r3, #1
    36ae:	dc00      	bgt.n	36b2 <__aeabi_dsub+0x2da>
    36b0:	e09f      	b.n	37f2 <__aeabi_dsub+0x41a>
    36b2:	4b1a      	ldr	r3, [pc, #104]	; (371c <__aeabi_dsub+0x344>)
    36b4:	459c      	cmp	ip, r3
    36b6:	d100      	bne.n	36ba <__aeabi_dsub+0x2e2>
    36b8:	e0c5      	b.n	3846 <__aeabi_dsub+0x46e>
    36ba:	4452      	add	r2, sl
    36bc:	4552      	cmp	r2, sl
    36be:	4180      	sbcs	r0, r0
    36c0:	1864      	adds	r4, r4, r1
    36c2:	4240      	negs	r0, r0
    36c4:	1824      	adds	r4, r4, r0
    36c6:	07e7      	lsls	r7, r4, #31
    36c8:	0852      	lsrs	r2, r2, #1
    36ca:	4317      	orrs	r7, r2
    36cc:	0864      	lsrs	r4, r4, #1
    36ce:	4666      	mov	r6, ip
    36d0:	e708      	b.n	34e4 <__aeabi_dsub+0x10c>
    36d2:	4812      	ldr	r0, [pc, #72]	; (371c <__aeabi_dsub+0x344>)
    36d4:	4285      	cmp	r5, r0
    36d6:	d100      	bne.n	36da <__aeabi_dsub+0x302>
    36d8:	e085      	b.n	37e6 <__aeabi_dsub+0x40e>
    36da:	001d      	movs	r5, r3
    36dc:	e6bc      	b.n	3458 <__aeabi_dsub+0x80>
    36de:	0029      	movs	r1, r5
    36e0:	3e1f      	subs	r6, #31
    36e2:	40f1      	lsrs	r1, r6
    36e4:	2b20      	cmp	r3, #32
    36e6:	d100      	bne.n	36ea <__aeabi_dsub+0x312>
    36e8:	e07f      	b.n	37ea <__aeabi_dsub+0x412>
    36ea:	2240      	movs	r2, #64	; 0x40
    36ec:	1ad3      	subs	r3, r2, r3
    36ee:	409d      	lsls	r5, r3
    36f0:	432f      	orrs	r7, r5
    36f2:	1e7d      	subs	r5, r7, #1
    36f4:	41af      	sbcs	r7, r5
    36f6:	2400      	movs	r4, #0
    36f8:	430f      	orrs	r7, r1
    36fa:	2600      	movs	r6, #0
    36fc:	e78e      	b.n	361c <__aeabi_dsub+0x244>
    36fe:	002b      	movs	r3, r5
    3700:	000f      	movs	r7, r1
    3702:	3b20      	subs	r3, #32
    3704:	40df      	lsrs	r7, r3
    3706:	2d20      	cmp	r5, #32
    3708:	d071      	beq.n	37ee <__aeabi_dsub+0x416>
    370a:	2340      	movs	r3, #64	; 0x40
    370c:	1b5d      	subs	r5, r3, r5
    370e:	40a9      	lsls	r1, r5
    3710:	430a      	orrs	r2, r1
    3712:	1e51      	subs	r1, r2, #1
    3714:	418a      	sbcs	r2, r1
    3716:	2100      	movs	r1, #0
    3718:	4317      	orrs	r7, r2
    371a:	e6af      	b.n	347c <__aeabi_dsub+0xa4>
    371c:	000007ff 	.word	0x000007ff
    3720:	ff7fffff 	.word	0xff7fffff
    3724:	800fffff 	.word	0x800fffff
    3728:	2e00      	cmp	r6, #0
    372a:	d03e      	beq.n	37aa <__aeabi_dsub+0x3d2>
    372c:	4eb3      	ldr	r6, [pc, #716]	; (39fc <__aeabi_dsub+0x624>)
    372e:	45b4      	cmp	ip, r6
    3730:	d045      	beq.n	37be <__aeabi_dsub+0x3e6>
    3732:	2680      	movs	r6, #128	; 0x80
    3734:	0436      	lsls	r6, r6, #16
    3736:	426d      	negs	r5, r5
    3738:	4334      	orrs	r4, r6
    373a:	2d38      	cmp	r5, #56	; 0x38
    373c:	dd00      	ble.n	3740 <__aeabi_dsub+0x368>
    373e:	e0a8      	b.n	3892 <__aeabi_dsub+0x4ba>
    3740:	2d1f      	cmp	r5, #31
    3742:	dd00      	ble.n	3746 <__aeabi_dsub+0x36e>
    3744:	e11f      	b.n	3986 <__aeabi_dsub+0x5ae>
    3746:	2620      	movs	r6, #32
    3748:	0027      	movs	r7, r4
    374a:	4650      	mov	r0, sl
    374c:	1b76      	subs	r6, r6, r5
    374e:	40b7      	lsls	r7, r6
    3750:	40e8      	lsrs	r0, r5
    3752:	4307      	orrs	r7, r0
    3754:	4650      	mov	r0, sl
    3756:	40b0      	lsls	r0, r6
    3758:	1e46      	subs	r6, r0, #1
    375a:	41b0      	sbcs	r0, r6
    375c:	40ec      	lsrs	r4, r5
    375e:	4338      	orrs	r0, r7
    3760:	1a17      	subs	r7, r2, r0
    3762:	42ba      	cmp	r2, r7
    3764:	4192      	sbcs	r2, r2
    3766:	1b0c      	subs	r4, r1, r4
    3768:	4252      	negs	r2, r2
    376a:	1aa4      	subs	r4, r4, r2
    376c:	4666      	mov	r6, ip
    376e:	4698      	mov	r8, r3
    3770:	e68b      	b.n	348a <__aeabi_dsub+0xb2>
    3772:	4664      	mov	r4, ip
    3774:	4667      	mov	r7, ip
    3776:	432c      	orrs	r4, r5
    3778:	d000      	beq.n	377c <__aeabi_dsub+0x3a4>
    377a:	e68b      	b.n	3494 <__aeabi_dsub+0xbc>
    377c:	2500      	movs	r5, #0
    377e:	2600      	movs	r6, #0
    3780:	2700      	movs	r7, #0
    3782:	e6ea      	b.n	355a <__aeabi_dsub+0x182>
    3784:	001e      	movs	r6, r3
    3786:	e6ad      	b.n	34e4 <__aeabi_dsub+0x10c>
    3788:	2b1f      	cmp	r3, #31
    378a:	dc60      	bgt.n	384e <__aeabi_dsub+0x476>
    378c:	2720      	movs	r7, #32
    378e:	1af8      	subs	r0, r7, r3
    3790:	000f      	movs	r7, r1
    3792:	4684      	mov	ip, r0
    3794:	4087      	lsls	r7, r0
    3796:	0010      	movs	r0, r2
    3798:	40d8      	lsrs	r0, r3
    379a:	4307      	orrs	r7, r0
    379c:	4660      	mov	r0, ip
    379e:	4082      	lsls	r2, r0
    37a0:	1e50      	subs	r0, r2, #1
    37a2:	4182      	sbcs	r2, r0
    37a4:	40d9      	lsrs	r1, r3
    37a6:	4317      	orrs	r7, r2
    37a8:	e6f5      	b.n	3596 <__aeabi_dsub+0x1be>
    37aa:	0026      	movs	r6, r4
    37ac:	4650      	mov	r0, sl
    37ae:	4306      	orrs	r6, r0
    37b0:	d005      	beq.n	37be <__aeabi_dsub+0x3e6>
    37b2:	43ed      	mvns	r5, r5
    37b4:	2d00      	cmp	r5, #0
    37b6:	d0d3      	beq.n	3760 <__aeabi_dsub+0x388>
    37b8:	4e90      	ldr	r6, [pc, #576]	; (39fc <__aeabi_dsub+0x624>)
    37ba:	45b4      	cmp	ip, r6
    37bc:	d1bd      	bne.n	373a <__aeabi_dsub+0x362>
    37be:	000c      	movs	r4, r1
    37c0:	0017      	movs	r7, r2
    37c2:	4666      	mov	r6, ip
    37c4:	4698      	mov	r8, r3
    37c6:	e68d      	b.n	34e4 <__aeabi_dsub+0x10c>
    37c8:	488c      	ldr	r0, [pc, #560]	; (39fc <__aeabi_dsub+0x624>)
    37ca:	4283      	cmp	r3, r0
    37cc:	d00b      	beq.n	37e6 <__aeabi_dsub+0x40e>
    37ce:	4663      	mov	r3, ip
    37d0:	e6d9      	b.n	3586 <__aeabi_dsub+0x1ae>
    37d2:	2d00      	cmp	r5, #0
    37d4:	d000      	beq.n	37d8 <__aeabi_dsub+0x400>
    37d6:	e096      	b.n	3906 <__aeabi_dsub+0x52e>
    37d8:	0008      	movs	r0, r1
    37da:	4310      	orrs	r0, r2
    37dc:	d100      	bne.n	37e0 <__aeabi_dsub+0x408>
    37de:	e0e2      	b.n	39a6 <__aeabi_dsub+0x5ce>
    37e0:	000c      	movs	r4, r1
    37e2:	0017      	movs	r7, r2
    37e4:	4698      	mov	r8, r3
    37e6:	4e85      	ldr	r6, [pc, #532]	; (39fc <__aeabi_dsub+0x624>)
    37e8:	e67c      	b.n	34e4 <__aeabi_dsub+0x10c>
    37ea:	2500      	movs	r5, #0
    37ec:	e780      	b.n	36f0 <__aeabi_dsub+0x318>
    37ee:	2100      	movs	r1, #0
    37f0:	e78e      	b.n	3710 <__aeabi_dsub+0x338>
    37f2:	0023      	movs	r3, r4
    37f4:	4650      	mov	r0, sl
    37f6:	4303      	orrs	r3, r0
    37f8:	2e00      	cmp	r6, #0
    37fa:	d000      	beq.n	37fe <__aeabi_dsub+0x426>
    37fc:	e0a8      	b.n	3950 <__aeabi_dsub+0x578>
    37fe:	2b00      	cmp	r3, #0
    3800:	d100      	bne.n	3804 <__aeabi_dsub+0x42c>
    3802:	e0de      	b.n	39c2 <__aeabi_dsub+0x5ea>
    3804:	000b      	movs	r3, r1
    3806:	4313      	orrs	r3, r2
    3808:	d100      	bne.n	380c <__aeabi_dsub+0x434>
    380a:	e66b      	b.n	34e4 <__aeabi_dsub+0x10c>
    380c:	4452      	add	r2, sl
    380e:	4552      	cmp	r2, sl
    3810:	4180      	sbcs	r0, r0
    3812:	1864      	adds	r4, r4, r1
    3814:	4240      	negs	r0, r0
    3816:	1824      	adds	r4, r4, r0
    3818:	0017      	movs	r7, r2
    381a:	0223      	lsls	r3, r4, #8
    381c:	d400      	bmi.n	3820 <__aeabi_dsub+0x448>
    381e:	e6fd      	b.n	361c <__aeabi_dsub+0x244>
    3820:	4b77      	ldr	r3, [pc, #476]	; (3a00 <__aeabi_dsub+0x628>)
    3822:	4666      	mov	r6, ip
    3824:	401c      	ands	r4, r3
    3826:	e65d      	b.n	34e4 <__aeabi_dsub+0x10c>
    3828:	0025      	movs	r5, r4
    382a:	4650      	mov	r0, sl
    382c:	4305      	orrs	r5, r0
    382e:	2e00      	cmp	r6, #0
    3830:	d1cf      	bne.n	37d2 <__aeabi_dsub+0x3fa>
    3832:	2d00      	cmp	r5, #0
    3834:	d14f      	bne.n	38d6 <__aeabi_dsub+0x4fe>
    3836:	000c      	movs	r4, r1
    3838:	4314      	orrs	r4, r2
    383a:	d100      	bne.n	383e <__aeabi_dsub+0x466>
    383c:	e0a0      	b.n	3980 <__aeabi_dsub+0x5a8>
    383e:	000c      	movs	r4, r1
    3840:	0017      	movs	r7, r2
    3842:	4698      	mov	r8, r3
    3844:	e64e      	b.n	34e4 <__aeabi_dsub+0x10c>
    3846:	4666      	mov	r6, ip
    3848:	2400      	movs	r4, #0
    384a:	2700      	movs	r7, #0
    384c:	e685      	b.n	355a <__aeabi_dsub+0x182>
    384e:	001f      	movs	r7, r3
    3850:	0008      	movs	r0, r1
    3852:	3f20      	subs	r7, #32
    3854:	40f8      	lsrs	r0, r7
    3856:	0007      	movs	r7, r0
    3858:	2b20      	cmp	r3, #32
    385a:	d100      	bne.n	385e <__aeabi_dsub+0x486>
    385c:	e08e      	b.n	397c <__aeabi_dsub+0x5a4>
    385e:	2040      	movs	r0, #64	; 0x40
    3860:	1ac3      	subs	r3, r0, r3
    3862:	4099      	lsls	r1, r3
    3864:	430a      	orrs	r2, r1
    3866:	1e51      	subs	r1, r2, #1
    3868:	418a      	sbcs	r2, r1
    386a:	2100      	movs	r1, #0
    386c:	4317      	orrs	r7, r2
    386e:	e692      	b.n	3596 <__aeabi_dsub+0x1be>
    3870:	2e00      	cmp	r6, #0
    3872:	d114      	bne.n	389e <__aeabi_dsub+0x4c6>
    3874:	0026      	movs	r6, r4
    3876:	4650      	mov	r0, sl
    3878:	4306      	orrs	r6, r0
    387a:	d062      	beq.n	3942 <__aeabi_dsub+0x56a>
    387c:	43db      	mvns	r3, r3
    387e:	2b00      	cmp	r3, #0
    3880:	d15c      	bne.n	393c <__aeabi_dsub+0x564>
    3882:	1887      	adds	r7, r0, r2
    3884:	4297      	cmp	r7, r2
    3886:	4192      	sbcs	r2, r2
    3888:	1864      	adds	r4, r4, r1
    388a:	4252      	negs	r2, r2
    388c:	18a4      	adds	r4, r4, r2
    388e:	4666      	mov	r6, ip
    3890:	e687      	b.n	35a2 <__aeabi_dsub+0x1ca>
    3892:	4650      	mov	r0, sl
    3894:	4320      	orrs	r0, r4
    3896:	1e44      	subs	r4, r0, #1
    3898:	41a0      	sbcs	r0, r4
    389a:	2400      	movs	r4, #0
    389c:	e760      	b.n	3760 <__aeabi_dsub+0x388>
    389e:	4e57      	ldr	r6, [pc, #348]	; (39fc <__aeabi_dsub+0x624>)
    38a0:	45b4      	cmp	ip, r6
    38a2:	d04e      	beq.n	3942 <__aeabi_dsub+0x56a>
    38a4:	2680      	movs	r6, #128	; 0x80
    38a6:	0436      	lsls	r6, r6, #16
    38a8:	425b      	negs	r3, r3
    38aa:	4334      	orrs	r4, r6
    38ac:	2b38      	cmp	r3, #56	; 0x38
    38ae:	dd00      	ble.n	38b2 <__aeabi_dsub+0x4da>
    38b0:	e07f      	b.n	39b2 <__aeabi_dsub+0x5da>
    38b2:	2b1f      	cmp	r3, #31
    38b4:	dd00      	ble.n	38b8 <__aeabi_dsub+0x4e0>
    38b6:	e08b      	b.n	39d0 <__aeabi_dsub+0x5f8>
    38b8:	2620      	movs	r6, #32
    38ba:	0027      	movs	r7, r4
    38bc:	4650      	mov	r0, sl
    38be:	1af6      	subs	r6, r6, r3
    38c0:	40b7      	lsls	r7, r6
    38c2:	40d8      	lsrs	r0, r3
    38c4:	4307      	orrs	r7, r0
    38c6:	4650      	mov	r0, sl
    38c8:	40b0      	lsls	r0, r6
    38ca:	1e46      	subs	r6, r0, #1
    38cc:	41b0      	sbcs	r0, r6
    38ce:	4307      	orrs	r7, r0
    38d0:	40dc      	lsrs	r4, r3
    38d2:	18bf      	adds	r7, r7, r2
    38d4:	e7d6      	b.n	3884 <__aeabi_dsub+0x4ac>
    38d6:	000d      	movs	r5, r1
    38d8:	4315      	orrs	r5, r2
    38da:	d100      	bne.n	38de <__aeabi_dsub+0x506>
    38dc:	e602      	b.n	34e4 <__aeabi_dsub+0x10c>
    38de:	4650      	mov	r0, sl
    38e0:	1a80      	subs	r0, r0, r2
    38e2:	4582      	cmp	sl, r0
    38e4:	41bf      	sbcs	r7, r7
    38e6:	1a65      	subs	r5, r4, r1
    38e8:	427f      	negs	r7, r7
    38ea:	1bed      	subs	r5, r5, r7
    38ec:	4684      	mov	ip, r0
    38ee:	0228      	lsls	r0, r5, #8
    38f0:	d400      	bmi.n	38f4 <__aeabi_dsub+0x51c>
    38f2:	e68d      	b.n	3610 <__aeabi_dsub+0x238>
    38f4:	4650      	mov	r0, sl
    38f6:	1a17      	subs	r7, r2, r0
    38f8:	42ba      	cmp	r2, r7
    38fa:	4192      	sbcs	r2, r2
    38fc:	1b0c      	subs	r4, r1, r4
    38fe:	4252      	negs	r2, r2
    3900:	1aa4      	subs	r4, r4, r2
    3902:	4698      	mov	r8, r3
    3904:	e5ee      	b.n	34e4 <__aeabi_dsub+0x10c>
    3906:	000d      	movs	r5, r1
    3908:	4315      	orrs	r5, r2
    390a:	d100      	bne.n	390e <__aeabi_dsub+0x536>
    390c:	e76b      	b.n	37e6 <__aeabi_dsub+0x40e>
    390e:	4650      	mov	r0, sl
    3910:	0767      	lsls	r7, r4, #29
    3912:	08c0      	lsrs	r0, r0, #3
    3914:	4307      	orrs	r7, r0
    3916:	2080      	movs	r0, #128	; 0x80
    3918:	08e4      	lsrs	r4, r4, #3
    391a:	0300      	lsls	r0, r0, #12
    391c:	4204      	tst	r4, r0
    391e:	d007      	beq.n	3930 <__aeabi_dsub+0x558>
    3920:	08cd      	lsrs	r5, r1, #3
    3922:	4205      	tst	r5, r0
    3924:	d104      	bne.n	3930 <__aeabi_dsub+0x558>
    3926:	002c      	movs	r4, r5
    3928:	4698      	mov	r8, r3
    392a:	08d7      	lsrs	r7, r2, #3
    392c:	0749      	lsls	r1, r1, #29
    392e:	430f      	orrs	r7, r1
    3930:	0f7b      	lsrs	r3, r7, #29
    3932:	00e4      	lsls	r4, r4, #3
    3934:	431c      	orrs	r4, r3
    3936:	00ff      	lsls	r7, r7, #3
    3938:	4e30      	ldr	r6, [pc, #192]	; (39fc <__aeabi_dsub+0x624>)
    393a:	e5d3      	b.n	34e4 <__aeabi_dsub+0x10c>
    393c:	4e2f      	ldr	r6, [pc, #188]	; (39fc <__aeabi_dsub+0x624>)
    393e:	45b4      	cmp	ip, r6
    3940:	d1b4      	bne.n	38ac <__aeabi_dsub+0x4d4>
    3942:	000c      	movs	r4, r1
    3944:	0017      	movs	r7, r2
    3946:	4666      	mov	r6, ip
    3948:	e5cc      	b.n	34e4 <__aeabi_dsub+0x10c>
    394a:	2700      	movs	r7, #0
    394c:	2400      	movs	r4, #0
    394e:	e5e8      	b.n	3522 <__aeabi_dsub+0x14a>
    3950:	2b00      	cmp	r3, #0
    3952:	d039      	beq.n	39c8 <__aeabi_dsub+0x5f0>
    3954:	000b      	movs	r3, r1
    3956:	4313      	orrs	r3, r2
    3958:	d100      	bne.n	395c <__aeabi_dsub+0x584>
    395a:	e744      	b.n	37e6 <__aeabi_dsub+0x40e>
    395c:	08c0      	lsrs	r0, r0, #3
    395e:	0767      	lsls	r7, r4, #29
    3960:	4307      	orrs	r7, r0
    3962:	2080      	movs	r0, #128	; 0x80
    3964:	08e4      	lsrs	r4, r4, #3
    3966:	0300      	lsls	r0, r0, #12
    3968:	4204      	tst	r4, r0
    396a:	d0e1      	beq.n	3930 <__aeabi_dsub+0x558>
    396c:	08cb      	lsrs	r3, r1, #3
    396e:	4203      	tst	r3, r0
    3970:	d1de      	bne.n	3930 <__aeabi_dsub+0x558>
    3972:	08d7      	lsrs	r7, r2, #3
    3974:	0749      	lsls	r1, r1, #29
    3976:	430f      	orrs	r7, r1
    3978:	001c      	movs	r4, r3
    397a:	e7d9      	b.n	3930 <__aeabi_dsub+0x558>
    397c:	2100      	movs	r1, #0
    397e:	e771      	b.n	3864 <__aeabi_dsub+0x48c>
    3980:	2500      	movs	r5, #0
    3982:	2700      	movs	r7, #0
    3984:	e5e9      	b.n	355a <__aeabi_dsub+0x182>
    3986:	002e      	movs	r6, r5
    3988:	0027      	movs	r7, r4
    398a:	3e20      	subs	r6, #32
    398c:	40f7      	lsrs	r7, r6
    398e:	2d20      	cmp	r5, #32
    3990:	d02f      	beq.n	39f2 <__aeabi_dsub+0x61a>
    3992:	2640      	movs	r6, #64	; 0x40
    3994:	1b75      	subs	r5, r6, r5
    3996:	40ac      	lsls	r4, r5
    3998:	4650      	mov	r0, sl
    399a:	4320      	orrs	r0, r4
    399c:	1e44      	subs	r4, r0, #1
    399e:	41a0      	sbcs	r0, r4
    39a0:	2400      	movs	r4, #0
    39a2:	4338      	orrs	r0, r7
    39a4:	e6dc      	b.n	3760 <__aeabi_dsub+0x388>
    39a6:	2480      	movs	r4, #128	; 0x80
    39a8:	2500      	movs	r5, #0
    39aa:	0324      	lsls	r4, r4, #12
    39ac:	4e13      	ldr	r6, [pc, #76]	; (39fc <__aeabi_dsub+0x624>)
    39ae:	2700      	movs	r7, #0
    39b0:	e5d3      	b.n	355a <__aeabi_dsub+0x182>
    39b2:	4650      	mov	r0, sl
    39b4:	4320      	orrs	r0, r4
    39b6:	0007      	movs	r7, r0
    39b8:	1e78      	subs	r0, r7, #1
    39ba:	4187      	sbcs	r7, r0
    39bc:	2400      	movs	r4, #0
    39be:	18bf      	adds	r7, r7, r2
    39c0:	e760      	b.n	3884 <__aeabi_dsub+0x4ac>
    39c2:	000c      	movs	r4, r1
    39c4:	0017      	movs	r7, r2
    39c6:	e58d      	b.n	34e4 <__aeabi_dsub+0x10c>
    39c8:	000c      	movs	r4, r1
    39ca:	0017      	movs	r7, r2
    39cc:	4e0b      	ldr	r6, [pc, #44]	; (39fc <__aeabi_dsub+0x624>)
    39ce:	e589      	b.n	34e4 <__aeabi_dsub+0x10c>
    39d0:	001e      	movs	r6, r3
    39d2:	0027      	movs	r7, r4
    39d4:	3e20      	subs	r6, #32
    39d6:	40f7      	lsrs	r7, r6
    39d8:	2b20      	cmp	r3, #32
    39da:	d00c      	beq.n	39f6 <__aeabi_dsub+0x61e>
    39dc:	2640      	movs	r6, #64	; 0x40
    39de:	1af3      	subs	r3, r6, r3
    39e0:	409c      	lsls	r4, r3
    39e2:	4650      	mov	r0, sl
    39e4:	4320      	orrs	r0, r4
    39e6:	1e44      	subs	r4, r0, #1
    39e8:	41a0      	sbcs	r0, r4
    39ea:	4307      	orrs	r7, r0
    39ec:	2400      	movs	r4, #0
    39ee:	18bf      	adds	r7, r7, r2
    39f0:	e748      	b.n	3884 <__aeabi_dsub+0x4ac>
    39f2:	2400      	movs	r4, #0
    39f4:	e7d0      	b.n	3998 <__aeabi_dsub+0x5c0>
    39f6:	2400      	movs	r4, #0
    39f8:	e7f3      	b.n	39e2 <__aeabi_dsub+0x60a>
    39fa:	46c0      	nop			; (mov r8, r8)
    39fc:	000007ff 	.word	0x000007ff
    3a00:	ff7fffff 	.word	0xff7fffff

00003a04 <__aeabi_d2iz>:
    3a04:	b530      	push	{r4, r5, lr}
    3a06:	4d13      	ldr	r5, [pc, #76]	; (3a54 <__aeabi_d2iz+0x50>)
    3a08:	030a      	lsls	r2, r1, #12
    3a0a:	004b      	lsls	r3, r1, #1
    3a0c:	0b12      	lsrs	r2, r2, #12
    3a0e:	0d5b      	lsrs	r3, r3, #21
    3a10:	0fc9      	lsrs	r1, r1, #31
    3a12:	2400      	movs	r4, #0
    3a14:	42ab      	cmp	r3, r5
    3a16:	dd10      	ble.n	3a3a <__aeabi_d2iz+0x36>
    3a18:	4c0f      	ldr	r4, [pc, #60]	; (3a58 <__aeabi_d2iz+0x54>)
    3a1a:	42a3      	cmp	r3, r4
    3a1c:	dc0f      	bgt.n	3a3e <__aeabi_d2iz+0x3a>
    3a1e:	2480      	movs	r4, #128	; 0x80
    3a20:	4d0e      	ldr	r5, [pc, #56]	; (3a5c <__aeabi_d2iz+0x58>)
    3a22:	0364      	lsls	r4, r4, #13
    3a24:	4322      	orrs	r2, r4
    3a26:	1aed      	subs	r5, r5, r3
    3a28:	2d1f      	cmp	r5, #31
    3a2a:	dd0b      	ble.n	3a44 <__aeabi_d2iz+0x40>
    3a2c:	480c      	ldr	r0, [pc, #48]	; (3a60 <__aeabi_d2iz+0x5c>)
    3a2e:	1ac3      	subs	r3, r0, r3
    3a30:	40da      	lsrs	r2, r3
    3a32:	4254      	negs	r4, r2
    3a34:	2900      	cmp	r1, #0
    3a36:	d100      	bne.n	3a3a <__aeabi_d2iz+0x36>
    3a38:	0014      	movs	r4, r2
    3a3a:	0020      	movs	r0, r4
    3a3c:	bd30      	pop	{r4, r5, pc}
    3a3e:	4b09      	ldr	r3, [pc, #36]	; (3a64 <__aeabi_d2iz+0x60>)
    3a40:	18cc      	adds	r4, r1, r3
    3a42:	e7fa      	b.n	3a3a <__aeabi_d2iz+0x36>
    3a44:	4c08      	ldr	r4, [pc, #32]	; (3a68 <__aeabi_d2iz+0x64>)
    3a46:	40e8      	lsrs	r0, r5
    3a48:	46a4      	mov	ip, r4
    3a4a:	4463      	add	r3, ip
    3a4c:	409a      	lsls	r2, r3
    3a4e:	4302      	orrs	r2, r0
    3a50:	e7ef      	b.n	3a32 <__aeabi_d2iz+0x2e>
    3a52:	46c0      	nop			; (mov r8, r8)
    3a54:	000003fe 	.word	0x000003fe
    3a58:	0000041d 	.word	0x0000041d
    3a5c:	00000433 	.word	0x00000433
    3a60:	00000413 	.word	0x00000413
    3a64:	7fffffff 	.word	0x7fffffff
    3a68:	fffffbed 	.word	0xfffffbed

00003a6c <__aeabi_i2d>:
    3a6c:	b570      	push	{r4, r5, r6, lr}
    3a6e:	2800      	cmp	r0, #0
    3a70:	d030      	beq.n	3ad4 <__aeabi_i2d+0x68>
    3a72:	17c3      	asrs	r3, r0, #31
    3a74:	18c4      	adds	r4, r0, r3
    3a76:	405c      	eors	r4, r3
    3a78:	0fc5      	lsrs	r5, r0, #31
    3a7a:	0020      	movs	r0, r4
    3a7c:	f000 f93a 	bl	3cf4 <__clzsi2>
    3a80:	4b17      	ldr	r3, [pc, #92]	; (3ae0 <__aeabi_i2d+0x74>)
    3a82:	4a18      	ldr	r2, [pc, #96]	; (3ae4 <__aeabi_i2d+0x78>)
    3a84:	1a1b      	subs	r3, r3, r0
    3a86:	1ad2      	subs	r2, r2, r3
    3a88:	2a1f      	cmp	r2, #31
    3a8a:	dd18      	ble.n	3abe <__aeabi_i2d+0x52>
    3a8c:	4a16      	ldr	r2, [pc, #88]	; (3ae8 <__aeabi_i2d+0x7c>)
    3a8e:	1ad2      	subs	r2, r2, r3
    3a90:	4094      	lsls	r4, r2
    3a92:	2200      	movs	r2, #0
    3a94:	0324      	lsls	r4, r4, #12
    3a96:	055b      	lsls	r3, r3, #21
    3a98:	0b24      	lsrs	r4, r4, #12
    3a9a:	0d5b      	lsrs	r3, r3, #21
    3a9c:	2100      	movs	r1, #0
    3a9e:	0010      	movs	r0, r2
    3aa0:	0324      	lsls	r4, r4, #12
    3aa2:	0d0a      	lsrs	r2, r1, #20
    3aa4:	0b24      	lsrs	r4, r4, #12
    3aa6:	0512      	lsls	r2, r2, #20
    3aa8:	4322      	orrs	r2, r4
    3aaa:	4c10      	ldr	r4, [pc, #64]	; (3aec <__aeabi_i2d+0x80>)
    3aac:	051b      	lsls	r3, r3, #20
    3aae:	4022      	ands	r2, r4
    3ab0:	4313      	orrs	r3, r2
    3ab2:	005b      	lsls	r3, r3, #1
    3ab4:	07ed      	lsls	r5, r5, #31
    3ab6:	085b      	lsrs	r3, r3, #1
    3ab8:	432b      	orrs	r3, r5
    3aba:	0019      	movs	r1, r3
    3abc:	bd70      	pop	{r4, r5, r6, pc}
    3abe:	0021      	movs	r1, r4
    3ac0:	4091      	lsls	r1, r2
    3ac2:	000a      	movs	r2, r1
    3ac4:	210b      	movs	r1, #11
    3ac6:	1a08      	subs	r0, r1, r0
    3ac8:	40c4      	lsrs	r4, r0
    3aca:	055b      	lsls	r3, r3, #21
    3acc:	0324      	lsls	r4, r4, #12
    3ace:	0b24      	lsrs	r4, r4, #12
    3ad0:	0d5b      	lsrs	r3, r3, #21
    3ad2:	e7e3      	b.n	3a9c <__aeabi_i2d+0x30>
    3ad4:	2500      	movs	r5, #0
    3ad6:	2300      	movs	r3, #0
    3ad8:	2400      	movs	r4, #0
    3ada:	2200      	movs	r2, #0
    3adc:	e7de      	b.n	3a9c <__aeabi_i2d+0x30>
    3ade:	46c0      	nop			; (mov r8, r8)
    3ae0:	0000041e 	.word	0x0000041e
    3ae4:	00000433 	.word	0x00000433
    3ae8:	00000413 	.word	0x00000413
    3aec:	800fffff 	.word	0x800fffff

00003af0 <__aeabi_ui2d>:
    3af0:	b510      	push	{r4, lr}
    3af2:	1e04      	subs	r4, r0, #0
    3af4:	d028      	beq.n	3b48 <__aeabi_ui2d+0x58>
    3af6:	f000 f8fd 	bl	3cf4 <__clzsi2>
    3afa:	4b15      	ldr	r3, [pc, #84]	; (3b50 <__aeabi_ui2d+0x60>)
    3afc:	4a15      	ldr	r2, [pc, #84]	; (3b54 <__aeabi_ui2d+0x64>)
    3afe:	1a1b      	subs	r3, r3, r0
    3b00:	1ad2      	subs	r2, r2, r3
    3b02:	2a1f      	cmp	r2, #31
    3b04:	dd15      	ble.n	3b32 <__aeabi_ui2d+0x42>
    3b06:	4a14      	ldr	r2, [pc, #80]	; (3b58 <__aeabi_ui2d+0x68>)
    3b08:	1ad2      	subs	r2, r2, r3
    3b0a:	4094      	lsls	r4, r2
    3b0c:	2200      	movs	r2, #0
    3b0e:	0324      	lsls	r4, r4, #12
    3b10:	055b      	lsls	r3, r3, #21
    3b12:	0b24      	lsrs	r4, r4, #12
    3b14:	0d5b      	lsrs	r3, r3, #21
    3b16:	2100      	movs	r1, #0
    3b18:	0010      	movs	r0, r2
    3b1a:	0324      	lsls	r4, r4, #12
    3b1c:	0d0a      	lsrs	r2, r1, #20
    3b1e:	0b24      	lsrs	r4, r4, #12
    3b20:	0512      	lsls	r2, r2, #20
    3b22:	4322      	orrs	r2, r4
    3b24:	4c0d      	ldr	r4, [pc, #52]	; (3b5c <__aeabi_ui2d+0x6c>)
    3b26:	051b      	lsls	r3, r3, #20
    3b28:	4022      	ands	r2, r4
    3b2a:	4313      	orrs	r3, r2
    3b2c:	005b      	lsls	r3, r3, #1
    3b2e:	0859      	lsrs	r1, r3, #1
    3b30:	bd10      	pop	{r4, pc}
    3b32:	0021      	movs	r1, r4
    3b34:	4091      	lsls	r1, r2
    3b36:	000a      	movs	r2, r1
    3b38:	210b      	movs	r1, #11
    3b3a:	1a08      	subs	r0, r1, r0
    3b3c:	40c4      	lsrs	r4, r0
    3b3e:	055b      	lsls	r3, r3, #21
    3b40:	0324      	lsls	r4, r4, #12
    3b42:	0b24      	lsrs	r4, r4, #12
    3b44:	0d5b      	lsrs	r3, r3, #21
    3b46:	e7e6      	b.n	3b16 <__aeabi_ui2d+0x26>
    3b48:	2300      	movs	r3, #0
    3b4a:	2400      	movs	r4, #0
    3b4c:	2200      	movs	r2, #0
    3b4e:	e7e2      	b.n	3b16 <__aeabi_ui2d+0x26>
    3b50:	0000041e 	.word	0x0000041e
    3b54:	00000433 	.word	0x00000433
    3b58:	00000413 	.word	0x00000413
    3b5c:	800fffff 	.word	0x800fffff

00003b60 <__aeabi_f2d>:
    3b60:	0041      	lsls	r1, r0, #1
    3b62:	0e09      	lsrs	r1, r1, #24
    3b64:	1c4b      	adds	r3, r1, #1
    3b66:	b570      	push	{r4, r5, r6, lr}
    3b68:	b2db      	uxtb	r3, r3
    3b6a:	0246      	lsls	r6, r0, #9
    3b6c:	0a75      	lsrs	r5, r6, #9
    3b6e:	0fc4      	lsrs	r4, r0, #31
    3b70:	2b01      	cmp	r3, #1
    3b72:	dd14      	ble.n	3b9e <__aeabi_f2d+0x3e>
    3b74:	23e0      	movs	r3, #224	; 0xe0
    3b76:	009b      	lsls	r3, r3, #2
    3b78:	076d      	lsls	r5, r5, #29
    3b7a:	0b36      	lsrs	r6, r6, #12
    3b7c:	18cb      	adds	r3, r1, r3
    3b7e:	2100      	movs	r1, #0
    3b80:	0d0a      	lsrs	r2, r1, #20
    3b82:	0028      	movs	r0, r5
    3b84:	0512      	lsls	r2, r2, #20
    3b86:	4d1c      	ldr	r5, [pc, #112]	; (3bf8 <__aeabi_f2d+0x98>)
    3b88:	4332      	orrs	r2, r6
    3b8a:	055b      	lsls	r3, r3, #21
    3b8c:	402a      	ands	r2, r5
    3b8e:	085b      	lsrs	r3, r3, #1
    3b90:	4313      	orrs	r3, r2
    3b92:	005b      	lsls	r3, r3, #1
    3b94:	07e4      	lsls	r4, r4, #31
    3b96:	085b      	lsrs	r3, r3, #1
    3b98:	4323      	orrs	r3, r4
    3b9a:	0019      	movs	r1, r3
    3b9c:	bd70      	pop	{r4, r5, r6, pc}
    3b9e:	2900      	cmp	r1, #0
    3ba0:	d114      	bne.n	3bcc <__aeabi_f2d+0x6c>
    3ba2:	2d00      	cmp	r5, #0
    3ba4:	d01e      	beq.n	3be4 <__aeabi_f2d+0x84>
    3ba6:	0028      	movs	r0, r5
    3ba8:	f000 f8a4 	bl	3cf4 <__clzsi2>
    3bac:	280a      	cmp	r0, #10
    3bae:	dc1c      	bgt.n	3bea <__aeabi_f2d+0x8a>
    3bb0:	230b      	movs	r3, #11
    3bb2:	002a      	movs	r2, r5
    3bb4:	1a1b      	subs	r3, r3, r0
    3bb6:	40da      	lsrs	r2, r3
    3bb8:	0003      	movs	r3, r0
    3bba:	3315      	adds	r3, #21
    3bbc:	409d      	lsls	r5, r3
    3bbe:	4b0f      	ldr	r3, [pc, #60]	; (3bfc <__aeabi_f2d+0x9c>)
    3bc0:	0312      	lsls	r2, r2, #12
    3bc2:	1a1b      	subs	r3, r3, r0
    3bc4:	055b      	lsls	r3, r3, #21
    3bc6:	0b16      	lsrs	r6, r2, #12
    3bc8:	0d5b      	lsrs	r3, r3, #21
    3bca:	e7d8      	b.n	3b7e <__aeabi_f2d+0x1e>
    3bcc:	2d00      	cmp	r5, #0
    3bce:	d006      	beq.n	3bde <__aeabi_f2d+0x7e>
    3bd0:	0b32      	lsrs	r2, r6, #12
    3bd2:	2680      	movs	r6, #128	; 0x80
    3bd4:	0336      	lsls	r6, r6, #12
    3bd6:	076d      	lsls	r5, r5, #29
    3bd8:	4316      	orrs	r6, r2
    3bda:	4b09      	ldr	r3, [pc, #36]	; (3c00 <__aeabi_f2d+0xa0>)
    3bdc:	e7cf      	b.n	3b7e <__aeabi_f2d+0x1e>
    3bde:	4b08      	ldr	r3, [pc, #32]	; (3c00 <__aeabi_f2d+0xa0>)
    3be0:	2600      	movs	r6, #0
    3be2:	e7cc      	b.n	3b7e <__aeabi_f2d+0x1e>
    3be4:	2300      	movs	r3, #0
    3be6:	2600      	movs	r6, #0
    3be8:	e7c9      	b.n	3b7e <__aeabi_f2d+0x1e>
    3bea:	0003      	movs	r3, r0
    3bec:	002a      	movs	r2, r5
    3bee:	3b0b      	subs	r3, #11
    3bf0:	409a      	lsls	r2, r3
    3bf2:	2500      	movs	r5, #0
    3bf4:	e7e3      	b.n	3bbe <__aeabi_f2d+0x5e>
    3bf6:	46c0      	nop			; (mov r8, r8)
    3bf8:	800fffff 	.word	0x800fffff
    3bfc:	00000389 	.word	0x00000389
    3c00:	000007ff 	.word	0x000007ff

00003c04 <__aeabi_cdrcmple>:
    3c04:	4684      	mov	ip, r0
    3c06:	1c10      	adds	r0, r2, #0
    3c08:	4662      	mov	r2, ip
    3c0a:	468c      	mov	ip, r1
    3c0c:	1c19      	adds	r1, r3, #0
    3c0e:	4663      	mov	r3, ip
    3c10:	e000      	b.n	3c14 <__aeabi_cdcmpeq>
    3c12:	46c0      	nop			; (mov r8, r8)

00003c14 <__aeabi_cdcmpeq>:
    3c14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3c16:	f000 f9d1 	bl	3fbc <__ledf2>
    3c1a:	2800      	cmp	r0, #0
    3c1c:	d401      	bmi.n	3c22 <__aeabi_cdcmpeq+0xe>
    3c1e:	2100      	movs	r1, #0
    3c20:	42c8      	cmn	r0, r1
    3c22:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003c24 <__aeabi_dcmpeq>:
    3c24:	b510      	push	{r4, lr}
    3c26:	f000 f92b 	bl	3e80 <__eqdf2>
    3c2a:	4240      	negs	r0, r0
    3c2c:	3001      	adds	r0, #1
    3c2e:	bd10      	pop	{r4, pc}

00003c30 <__aeabi_dcmplt>:
    3c30:	b510      	push	{r4, lr}
    3c32:	f000 f9c3 	bl	3fbc <__ledf2>
    3c36:	2800      	cmp	r0, #0
    3c38:	db01      	blt.n	3c3e <__aeabi_dcmplt+0xe>
    3c3a:	2000      	movs	r0, #0
    3c3c:	bd10      	pop	{r4, pc}
    3c3e:	2001      	movs	r0, #1
    3c40:	bd10      	pop	{r4, pc}
    3c42:	46c0      	nop			; (mov r8, r8)

00003c44 <__aeabi_dcmple>:
    3c44:	b510      	push	{r4, lr}
    3c46:	f000 f9b9 	bl	3fbc <__ledf2>
    3c4a:	2800      	cmp	r0, #0
    3c4c:	dd01      	ble.n	3c52 <__aeabi_dcmple+0xe>
    3c4e:	2000      	movs	r0, #0
    3c50:	bd10      	pop	{r4, pc}
    3c52:	2001      	movs	r0, #1
    3c54:	bd10      	pop	{r4, pc}
    3c56:	46c0      	nop			; (mov r8, r8)

00003c58 <__aeabi_dcmpgt>:
    3c58:	b510      	push	{r4, lr}
    3c5a:	f000 f94b 	bl	3ef4 <__gedf2>
    3c5e:	2800      	cmp	r0, #0
    3c60:	dc01      	bgt.n	3c66 <__aeabi_dcmpgt+0xe>
    3c62:	2000      	movs	r0, #0
    3c64:	bd10      	pop	{r4, pc}
    3c66:	2001      	movs	r0, #1
    3c68:	bd10      	pop	{r4, pc}
    3c6a:	46c0      	nop			; (mov r8, r8)

00003c6c <__aeabi_dcmpge>:
    3c6c:	b510      	push	{r4, lr}
    3c6e:	f000 f941 	bl	3ef4 <__gedf2>
    3c72:	2800      	cmp	r0, #0
    3c74:	da01      	bge.n	3c7a <__aeabi_dcmpge+0xe>
    3c76:	2000      	movs	r0, #0
    3c78:	bd10      	pop	{r4, pc}
    3c7a:	2001      	movs	r0, #1
    3c7c:	bd10      	pop	{r4, pc}
    3c7e:	46c0      	nop			; (mov r8, r8)

00003c80 <__aeabi_cfrcmple>:
    3c80:	4684      	mov	ip, r0
    3c82:	1c08      	adds	r0, r1, #0
    3c84:	4661      	mov	r1, ip
    3c86:	e7ff      	b.n	3c88 <__aeabi_cfcmpeq>

00003c88 <__aeabi_cfcmpeq>:
    3c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3c8a:	f000 f8b7 	bl	3dfc <__lesf2>
    3c8e:	2800      	cmp	r0, #0
    3c90:	d401      	bmi.n	3c96 <__aeabi_cfcmpeq+0xe>
    3c92:	2100      	movs	r1, #0
    3c94:	42c8      	cmn	r0, r1
    3c96:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003c98 <__aeabi_fcmpeq>:
    3c98:	b510      	push	{r4, lr}
    3c9a:	f000 f849 	bl	3d30 <__eqsf2>
    3c9e:	4240      	negs	r0, r0
    3ca0:	3001      	adds	r0, #1
    3ca2:	bd10      	pop	{r4, pc}

00003ca4 <__aeabi_fcmplt>:
    3ca4:	b510      	push	{r4, lr}
    3ca6:	f000 f8a9 	bl	3dfc <__lesf2>
    3caa:	2800      	cmp	r0, #0
    3cac:	db01      	blt.n	3cb2 <__aeabi_fcmplt+0xe>
    3cae:	2000      	movs	r0, #0
    3cb0:	bd10      	pop	{r4, pc}
    3cb2:	2001      	movs	r0, #1
    3cb4:	bd10      	pop	{r4, pc}
    3cb6:	46c0      	nop			; (mov r8, r8)

00003cb8 <__aeabi_fcmple>:
    3cb8:	b510      	push	{r4, lr}
    3cba:	f000 f89f 	bl	3dfc <__lesf2>
    3cbe:	2800      	cmp	r0, #0
    3cc0:	dd01      	ble.n	3cc6 <__aeabi_fcmple+0xe>
    3cc2:	2000      	movs	r0, #0
    3cc4:	bd10      	pop	{r4, pc}
    3cc6:	2001      	movs	r0, #1
    3cc8:	bd10      	pop	{r4, pc}
    3cca:	46c0      	nop			; (mov r8, r8)

00003ccc <__aeabi_fcmpgt>:
    3ccc:	b510      	push	{r4, lr}
    3cce:	f000 f855 	bl	3d7c <__gesf2>
    3cd2:	2800      	cmp	r0, #0
    3cd4:	dc01      	bgt.n	3cda <__aeabi_fcmpgt+0xe>
    3cd6:	2000      	movs	r0, #0
    3cd8:	bd10      	pop	{r4, pc}
    3cda:	2001      	movs	r0, #1
    3cdc:	bd10      	pop	{r4, pc}
    3cde:	46c0      	nop			; (mov r8, r8)

00003ce0 <__aeabi_fcmpge>:
    3ce0:	b510      	push	{r4, lr}
    3ce2:	f000 f84b 	bl	3d7c <__gesf2>
    3ce6:	2800      	cmp	r0, #0
    3ce8:	da01      	bge.n	3cee <__aeabi_fcmpge+0xe>
    3cea:	2000      	movs	r0, #0
    3cec:	bd10      	pop	{r4, pc}
    3cee:	2001      	movs	r0, #1
    3cf0:	bd10      	pop	{r4, pc}
    3cf2:	46c0      	nop			; (mov r8, r8)

00003cf4 <__clzsi2>:
    3cf4:	211c      	movs	r1, #28
    3cf6:	2301      	movs	r3, #1
    3cf8:	041b      	lsls	r3, r3, #16
    3cfa:	4298      	cmp	r0, r3
    3cfc:	d301      	bcc.n	3d02 <__clzsi2+0xe>
    3cfe:	0c00      	lsrs	r0, r0, #16
    3d00:	3910      	subs	r1, #16
    3d02:	0a1b      	lsrs	r3, r3, #8
    3d04:	4298      	cmp	r0, r3
    3d06:	d301      	bcc.n	3d0c <__clzsi2+0x18>
    3d08:	0a00      	lsrs	r0, r0, #8
    3d0a:	3908      	subs	r1, #8
    3d0c:	091b      	lsrs	r3, r3, #4
    3d0e:	4298      	cmp	r0, r3
    3d10:	d301      	bcc.n	3d16 <__clzsi2+0x22>
    3d12:	0900      	lsrs	r0, r0, #4
    3d14:	3904      	subs	r1, #4
    3d16:	a202      	add	r2, pc, #8	; (adr r2, 3d20 <__clzsi2+0x2c>)
    3d18:	5c10      	ldrb	r0, [r2, r0]
    3d1a:	1840      	adds	r0, r0, r1
    3d1c:	4770      	bx	lr
    3d1e:	46c0      	nop			; (mov r8, r8)
    3d20:	02020304 	.word	0x02020304
    3d24:	01010101 	.word	0x01010101
	...

00003d30 <__eqsf2>:
    3d30:	b570      	push	{r4, r5, r6, lr}
    3d32:	0042      	lsls	r2, r0, #1
    3d34:	0245      	lsls	r5, r0, #9
    3d36:	024e      	lsls	r6, r1, #9
    3d38:	004c      	lsls	r4, r1, #1
    3d3a:	0fc3      	lsrs	r3, r0, #31
    3d3c:	0a6d      	lsrs	r5, r5, #9
    3d3e:	0e12      	lsrs	r2, r2, #24
    3d40:	0a76      	lsrs	r6, r6, #9
    3d42:	0e24      	lsrs	r4, r4, #24
    3d44:	0fc9      	lsrs	r1, r1, #31
    3d46:	2001      	movs	r0, #1
    3d48:	2aff      	cmp	r2, #255	; 0xff
    3d4a:	d006      	beq.n	3d5a <__eqsf2+0x2a>
    3d4c:	2cff      	cmp	r4, #255	; 0xff
    3d4e:	d003      	beq.n	3d58 <__eqsf2+0x28>
    3d50:	42a2      	cmp	r2, r4
    3d52:	d101      	bne.n	3d58 <__eqsf2+0x28>
    3d54:	42b5      	cmp	r5, r6
    3d56:	d006      	beq.n	3d66 <__eqsf2+0x36>
    3d58:	bd70      	pop	{r4, r5, r6, pc}
    3d5a:	2d00      	cmp	r5, #0
    3d5c:	d1fc      	bne.n	3d58 <__eqsf2+0x28>
    3d5e:	2cff      	cmp	r4, #255	; 0xff
    3d60:	d1fa      	bne.n	3d58 <__eqsf2+0x28>
    3d62:	2e00      	cmp	r6, #0
    3d64:	d1f8      	bne.n	3d58 <__eqsf2+0x28>
    3d66:	428b      	cmp	r3, r1
    3d68:	d006      	beq.n	3d78 <__eqsf2+0x48>
    3d6a:	2001      	movs	r0, #1
    3d6c:	2a00      	cmp	r2, #0
    3d6e:	d1f3      	bne.n	3d58 <__eqsf2+0x28>
    3d70:	0028      	movs	r0, r5
    3d72:	1e45      	subs	r5, r0, #1
    3d74:	41a8      	sbcs	r0, r5
    3d76:	e7ef      	b.n	3d58 <__eqsf2+0x28>
    3d78:	2000      	movs	r0, #0
    3d7a:	e7ed      	b.n	3d58 <__eqsf2+0x28>

00003d7c <__gesf2>:
    3d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d7e:	0042      	lsls	r2, r0, #1
    3d80:	0245      	lsls	r5, r0, #9
    3d82:	024c      	lsls	r4, r1, #9
    3d84:	0fc3      	lsrs	r3, r0, #31
    3d86:	0048      	lsls	r0, r1, #1
    3d88:	0a6d      	lsrs	r5, r5, #9
    3d8a:	0e12      	lsrs	r2, r2, #24
    3d8c:	0a64      	lsrs	r4, r4, #9
    3d8e:	0e00      	lsrs	r0, r0, #24
    3d90:	0fc9      	lsrs	r1, r1, #31
    3d92:	2aff      	cmp	r2, #255	; 0xff
    3d94:	d01e      	beq.n	3dd4 <__gesf2+0x58>
    3d96:	28ff      	cmp	r0, #255	; 0xff
    3d98:	d021      	beq.n	3dde <__gesf2+0x62>
    3d9a:	2a00      	cmp	r2, #0
    3d9c:	d10a      	bne.n	3db4 <__gesf2+0x38>
    3d9e:	426e      	negs	r6, r5
    3da0:	416e      	adcs	r6, r5
    3da2:	b2f6      	uxtb	r6, r6
    3da4:	2800      	cmp	r0, #0
    3da6:	d10f      	bne.n	3dc8 <__gesf2+0x4c>
    3da8:	2c00      	cmp	r4, #0
    3daa:	d10d      	bne.n	3dc8 <__gesf2+0x4c>
    3dac:	2000      	movs	r0, #0
    3dae:	2d00      	cmp	r5, #0
    3db0:	d009      	beq.n	3dc6 <__gesf2+0x4a>
    3db2:	e005      	b.n	3dc0 <__gesf2+0x44>
    3db4:	2800      	cmp	r0, #0
    3db6:	d101      	bne.n	3dbc <__gesf2+0x40>
    3db8:	2c00      	cmp	r4, #0
    3dba:	d001      	beq.n	3dc0 <__gesf2+0x44>
    3dbc:	428b      	cmp	r3, r1
    3dbe:	d011      	beq.n	3de4 <__gesf2+0x68>
    3dc0:	2101      	movs	r1, #1
    3dc2:	4258      	negs	r0, r3
    3dc4:	4308      	orrs	r0, r1
    3dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dc8:	2e00      	cmp	r6, #0
    3dca:	d0f7      	beq.n	3dbc <__gesf2+0x40>
    3dcc:	2001      	movs	r0, #1
    3dce:	3901      	subs	r1, #1
    3dd0:	4308      	orrs	r0, r1
    3dd2:	e7f8      	b.n	3dc6 <__gesf2+0x4a>
    3dd4:	2d00      	cmp	r5, #0
    3dd6:	d0de      	beq.n	3d96 <__gesf2+0x1a>
    3dd8:	2002      	movs	r0, #2
    3dda:	4240      	negs	r0, r0
    3ddc:	e7f3      	b.n	3dc6 <__gesf2+0x4a>
    3dde:	2c00      	cmp	r4, #0
    3de0:	d0db      	beq.n	3d9a <__gesf2+0x1e>
    3de2:	e7f9      	b.n	3dd8 <__gesf2+0x5c>
    3de4:	4282      	cmp	r2, r0
    3de6:	dceb      	bgt.n	3dc0 <__gesf2+0x44>
    3de8:	db04      	blt.n	3df4 <__gesf2+0x78>
    3dea:	42a5      	cmp	r5, r4
    3dec:	d8e8      	bhi.n	3dc0 <__gesf2+0x44>
    3dee:	2000      	movs	r0, #0
    3df0:	42a5      	cmp	r5, r4
    3df2:	d2e8      	bcs.n	3dc6 <__gesf2+0x4a>
    3df4:	2101      	movs	r1, #1
    3df6:	1e58      	subs	r0, r3, #1
    3df8:	4308      	orrs	r0, r1
    3dfa:	e7e4      	b.n	3dc6 <__gesf2+0x4a>

00003dfc <__lesf2>:
    3dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dfe:	0042      	lsls	r2, r0, #1
    3e00:	024d      	lsls	r5, r1, #9
    3e02:	004c      	lsls	r4, r1, #1
    3e04:	0246      	lsls	r6, r0, #9
    3e06:	0a76      	lsrs	r6, r6, #9
    3e08:	0e12      	lsrs	r2, r2, #24
    3e0a:	0fc3      	lsrs	r3, r0, #31
    3e0c:	0a6d      	lsrs	r5, r5, #9
    3e0e:	0e24      	lsrs	r4, r4, #24
    3e10:	0fc9      	lsrs	r1, r1, #31
    3e12:	2aff      	cmp	r2, #255	; 0xff
    3e14:	d016      	beq.n	3e44 <__lesf2+0x48>
    3e16:	2cff      	cmp	r4, #255	; 0xff
    3e18:	d018      	beq.n	3e4c <__lesf2+0x50>
    3e1a:	2a00      	cmp	r2, #0
    3e1c:	d10a      	bne.n	3e34 <__lesf2+0x38>
    3e1e:	4270      	negs	r0, r6
    3e20:	4170      	adcs	r0, r6
    3e22:	b2c0      	uxtb	r0, r0
    3e24:	2c00      	cmp	r4, #0
    3e26:	d015      	beq.n	3e54 <__lesf2+0x58>
    3e28:	2800      	cmp	r0, #0
    3e2a:	d005      	beq.n	3e38 <__lesf2+0x3c>
    3e2c:	2001      	movs	r0, #1
    3e2e:	3901      	subs	r1, #1
    3e30:	4308      	orrs	r0, r1
    3e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e34:	2c00      	cmp	r4, #0
    3e36:	d013      	beq.n	3e60 <__lesf2+0x64>
    3e38:	4299      	cmp	r1, r3
    3e3a:	d014      	beq.n	3e66 <__lesf2+0x6a>
    3e3c:	2001      	movs	r0, #1
    3e3e:	425b      	negs	r3, r3
    3e40:	4318      	orrs	r0, r3
    3e42:	e7f6      	b.n	3e32 <__lesf2+0x36>
    3e44:	2002      	movs	r0, #2
    3e46:	2e00      	cmp	r6, #0
    3e48:	d1f3      	bne.n	3e32 <__lesf2+0x36>
    3e4a:	e7e4      	b.n	3e16 <__lesf2+0x1a>
    3e4c:	2002      	movs	r0, #2
    3e4e:	2d00      	cmp	r5, #0
    3e50:	d1ef      	bne.n	3e32 <__lesf2+0x36>
    3e52:	e7e2      	b.n	3e1a <__lesf2+0x1e>
    3e54:	2d00      	cmp	r5, #0
    3e56:	d1e7      	bne.n	3e28 <__lesf2+0x2c>
    3e58:	2000      	movs	r0, #0
    3e5a:	2e00      	cmp	r6, #0
    3e5c:	d0e9      	beq.n	3e32 <__lesf2+0x36>
    3e5e:	e7ed      	b.n	3e3c <__lesf2+0x40>
    3e60:	2d00      	cmp	r5, #0
    3e62:	d1e9      	bne.n	3e38 <__lesf2+0x3c>
    3e64:	e7ea      	b.n	3e3c <__lesf2+0x40>
    3e66:	42a2      	cmp	r2, r4
    3e68:	dc06      	bgt.n	3e78 <__lesf2+0x7c>
    3e6a:	dbdf      	blt.n	3e2c <__lesf2+0x30>
    3e6c:	42ae      	cmp	r6, r5
    3e6e:	d803      	bhi.n	3e78 <__lesf2+0x7c>
    3e70:	2000      	movs	r0, #0
    3e72:	42ae      	cmp	r6, r5
    3e74:	d3da      	bcc.n	3e2c <__lesf2+0x30>
    3e76:	e7dc      	b.n	3e32 <__lesf2+0x36>
    3e78:	2001      	movs	r0, #1
    3e7a:	4249      	negs	r1, r1
    3e7c:	4308      	orrs	r0, r1
    3e7e:	e7d8      	b.n	3e32 <__lesf2+0x36>

00003e80 <__eqdf2>:
    3e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e82:	464f      	mov	r7, r9
    3e84:	4646      	mov	r6, r8
    3e86:	46d6      	mov	lr, sl
    3e88:	005c      	lsls	r4, r3, #1
    3e8a:	b5c0      	push	{r6, r7, lr}
    3e8c:	031f      	lsls	r7, r3, #12
    3e8e:	0fdb      	lsrs	r3, r3, #31
    3e90:	469a      	mov	sl, r3
    3e92:	4b17      	ldr	r3, [pc, #92]	; (3ef0 <__eqdf2+0x70>)
    3e94:	030e      	lsls	r6, r1, #12
    3e96:	004d      	lsls	r5, r1, #1
    3e98:	4684      	mov	ip, r0
    3e9a:	4680      	mov	r8, r0
    3e9c:	0b36      	lsrs	r6, r6, #12
    3e9e:	0d6d      	lsrs	r5, r5, #21
    3ea0:	0fc9      	lsrs	r1, r1, #31
    3ea2:	4691      	mov	r9, r2
    3ea4:	0b3f      	lsrs	r7, r7, #12
    3ea6:	0d64      	lsrs	r4, r4, #21
    3ea8:	2001      	movs	r0, #1
    3eaa:	429d      	cmp	r5, r3
    3eac:	d008      	beq.n	3ec0 <__eqdf2+0x40>
    3eae:	429c      	cmp	r4, r3
    3eb0:	d001      	beq.n	3eb6 <__eqdf2+0x36>
    3eb2:	42a5      	cmp	r5, r4
    3eb4:	d00b      	beq.n	3ece <__eqdf2+0x4e>
    3eb6:	bc1c      	pop	{r2, r3, r4}
    3eb8:	4690      	mov	r8, r2
    3eba:	4699      	mov	r9, r3
    3ebc:	46a2      	mov	sl, r4
    3ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ec0:	4663      	mov	r3, ip
    3ec2:	4333      	orrs	r3, r6
    3ec4:	d1f7      	bne.n	3eb6 <__eqdf2+0x36>
    3ec6:	42ac      	cmp	r4, r5
    3ec8:	d1f5      	bne.n	3eb6 <__eqdf2+0x36>
    3eca:	433a      	orrs	r2, r7
    3ecc:	d1f3      	bne.n	3eb6 <__eqdf2+0x36>
    3ece:	2001      	movs	r0, #1
    3ed0:	42be      	cmp	r6, r7
    3ed2:	d1f0      	bne.n	3eb6 <__eqdf2+0x36>
    3ed4:	45c8      	cmp	r8, r9
    3ed6:	d1ee      	bne.n	3eb6 <__eqdf2+0x36>
    3ed8:	4551      	cmp	r1, sl
    3eda:	d007      	beq.n	3eec <__eqdf2+0x6c>
    3edc:	2d00      	cmp	r5, #0
    3ede:	d1ea      	bne.n	3eb6 <__eqdf2+0x36>
    3ee0:	4663      	mov	r3, ip
    3ee2:	431e      	orrs	r6, r3
    3ee4:	0030      	movs	r0, r6
    3ee6:	1e46      	subs	r6, r0, #1
    3ee8:	41b0      	sbcs	r0, r6
    3eea:	e7e4      	b.n	3eb6 <__eqdf2+0x36>
    3eec:	2000      	movs	r0, #0
    3eee:	e7e2      	b.n	3eb6 <__eqdf2+0x36>
    3ef0:	000007ff 	.word	0x000007ff

00003ef4 <__gedf2>:
    3ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ef6:	4645      	mov	r5, r8
    3ef8:	46de      	mov	lr, fp
    3efa:	4657      	mov	r7, sl
    3efc:	464e      	mov	r6, r9
    3efe:	b5e0      	push	{r5, r6, r7, lr}
    3f00:	031f      	lsls	r7, r3, #12
    3f02:	0b3d      	lsrs	r5, r7, #12
    3f04:	4f2c      	ldr	r7, [pc, #176]	; (3fb8 <__gedf2+0xc4>)
    3f06:	030e      	lsls	r6, r1, #12
    3f08:	004c      	lsls	r4, r1, #1
    3f0a:	46ab      	mov	fp, r5
    3f0c:	005d      	lsls	r5, r3, #1
    3f0e:	4684      	mov	ip, r0
    3f10:	0b36      	lsrs	r6, r6, #12
    3f12:	0d64      	lsrs	r4, r4, #21
    3f14:	0fc9      	lsrs	r1, r1, #31
    3f16:	4690      	mov	r8, r2
    3f18:	0d6d      	lsrs	r5, r5, #21
    3f1a:	0fdb      	lsrs	r3, r3, #31
    3f1c:	42bc      	cmp	r4, r7
    3f1e:	d02a      	beq.n	3f76 <__gedf2+0x82>
    3f20:	4f25      	ldr	r7, [pc, #148]	; (3fb8 <__gedf2+0xc4>)
    3f22:	42bd      	cmp	r5, r7
    3f24:	d02d      	beq.n	3f82 <__gedf2+0x8e>
    3f26:	2c00      	cmp	r4, #0
    3f28:	d10f      	bne.n	3f4a <__gedf2+0x56>
    3f2a:	4330      	orrs	r0, r6
    3f2c:	0007      	movs	r7, r0
    3f2e:	4681      	mov	r9, r0
    3f30:	4278      	negs	r0, r7
    3f32:	4178      	adcs	r0, r7
    3f34:	b2c0      	uxtb	r0, r0
    3f36:	2d00      	cmp	r5, #0
    3f38:	d117      	bne.n	3f6a <__gedf2+0x76>
    3f3a:	465f      	mov	r7, fp
    3f3c:	433a      	orrs	r2, r7
    3f3e:	d114      	bne.n	3f6a <__gedf2+0x76>
    3f40:	464b      	mov	r3, r9
    3f42:	2000      	movs	r0, #0
    3f44:	2b00      	cmp	r3, #0
    3f46:	d00a      	beq.n	3f5e <__gedf2+0x6a>
    3f48:	e006      	b.n	3f58 <__gedf2+0x64>
    3f4a:	2d00      	cmp	r5, #0
    3f4c:	d102      	bne.n	3f54 <__gedf2+0x60>
    3f4e:	4658      	mov	r0, fp
    3f50:	4302      	orrs	r2, r0
    3f52:	d001      	beq.n	3f58 <__gedf2+0x64>
    3f54:	4299      	cmp	r1, r3
    3f56:	d018      	beq.n	3f8a <__gedf2+0x96>
    3f58:	4248      	negs	r0, r1
    3f5a:	2101      	movs	r1, #1
    3f5c:	4308      	orrs	r0, r1
    3f5e:	bc3c      	pop	{r2, r3, r4, r5}
    3f60:	4690      	mov	r8, r2
    3f62:	4699      	mov	r9, r3
    3f64:	46a2      	mov	sl, r4
    3f66:	46ab      	mov	fp, r5
    3f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f6a:	2800      	cmp	r0, #0
    3f6c:	d0f2      	beq.n	3f54 <__gedf2+0x60>
    3f6e:	2001      	movs	r0, #1
    3f70:	3b01      	subs	r3, #1
    3f72:	4318      	orrs	r0, r3
    3f74:	e7f3      	b.n	3f5e <__gedf2+0x6a>
    3f76:	0037      	movs	r7, r6
    3f78:	4307      	orrs	r7, r0
    3f7a:	d0d1      	beq.n	3f20 <__gedf2+0x2c>
    3f7c:	2002      	movs	r0, #2
    3f7e:	4240      	negs	r0, r0
    3f80:	e7ed      	b.n	3f5e <__gedf2+0x6a>
    3f82:	465f      	mov	r7, fp
    3f84:	4317      	orrs	r7, r2
    3f86:	d0ce      	beq.n	3f26 <__gedf2+0x32>
    3f88:	e7f8      	b.n	3f7c <__gedf2+0x88>
    3f8a:	42ac      	cmp	r4, r5
    3f8c:	dce4      	bgt.n	3f58 <__gedf2+0x64>
    3f8e:	da03      	bge.n	3f98 <__gedf2+0xa4>
    3f90:	1e48      	subs	r0, r1, #1
    3f92:	2101      	movs	r1, #1
    3f94:	4308      	orrs	r0, r1
    3f96:	e7e2      	b.n	3f5e <__gedf2+0x6a>
    3f98:	455e      	cmp	r6, fp
    3f9a:	d8dd      	bhi.n	3f58 <__gedf2+0x64>
    3f9c:	d006      	beq.n	3fac <__gedf2+0xb8>
    3f9e:	2000      	movs	r0, #0
    3fa0:	455e      	cmp	r6, fp
    3fa2:	d2dc      	bcs.n	3f5e <__gedf2+0x6a>
    3fa4:	2301      	movs	r3, #1
    3fa6:	1e48      	subs	r0, r1, #1
    3fa8:	4318      	orrs	r0, r3
    3faa:	e7d8      	b.n	3f5e <__gedf2+0x6a>
    3fac:	45c4      	cmp	ip, r8
    3fae:	d8d3      	bhi.n	3f58 <__gedf2+0x64>
    3fb0:	2000      	movs	r0, #0
    3fb2:	45c4      	cmp	ip, r8
    3fb4:	d3f6      	bcc.n	3fa4 <__gedf2+0xb0>
    3fb6:	e7d2      	b.n	3f5e <__gedf2+0x6a>
    3fb8:	000007ff 	.word	0x000007ff

00003fbc <__ledf2>:
    3fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fbe:	464e      	mov	r6, r9
    3fc0:	4645      	mov	r5, r8
    3fc2:	46de      	mov	lr, fp
    3fc4:	4657      	mov	r7, sl
    3fc6:	005c      	lsls	r4, r3, #1
    3fc8:	b5e0      	push	{r5, r6, r7, lr}
    3fca:	031f      	lsls	r7, r3, #12
    3fcc:	0fdb      	lsrs	r3, r3, #31
    3fce:	4699      	mov	r9, r3
    3fd0:	4b2a      	ldr	r3, [pc, #168]	; (407c <__ledf2+0xc0>)
    3fd2:	030e      	lsls	r6, r1, #12
    3fd4:	004d      	lsls	r5, r1, #1
    3fd6:	0fc9      	lsrs	r1, r1, #31
    3fd8:	4684      	mov	ip, r0
    3fda:	0b36      	lsrs	r6, r6, #12
    3fdc:	0d6d      	lsrs	r5, r5, #21
    3fde:	468b      	mov	fp, r1
    3fe0:	4690      	mov	r8, r2
    3fe2:	0b3f      	lsrs	r7, r7, #12
    3fe4:	0d64      	lsrs	r4, r4, #21
    3fe6:	429d      	cmp	r5, r3
    3fe8:	d020      	beq.n	402c <__ledf2+0x70>
    3fea:	4b24      	ldr	r3, [pc, #144]	; (407c <__ledf2+0xc0>)
    3fec:	429c      	cmp	r4, r3
    3fee:	d022      	beq.n	4036 <__ledf2+0x7a>
    3ff0:	2d00      	cmp	r5, #0
    3ff2:	d112      	bne.n	401a <__ledf2+0x5e>
    3ff4:	4330      	orrs	r0, r6
    3ff6:	4243      	negs	r3, r0
    3ff8:	4143      	adcs	r3, r0
    3ffa:	b2db      	uxtb	r3, r3
    3ffc:	2c00      	cmp	r4, #0
    3ffe:	d01f      	beq.n	4040 <__ledf2+0x84>
    4000:	2b00      	cmp	r3, #0
    4002:	d00c      	beq.n	401e <__ledf2+0x62>
    4004:	464b      	mov	r3, r9
    4006:	2001      	movs	r0, #1
    4008:	3b01      	subs	r3, #1
    400a:	4303      	orrs	r3, r0
    400c:	0018      	movs	r0, r3
    400e:	bc3c      	pop	{r2, r3, r4, r5}
    4010:	4690      	mov	r8, r2
    4012:	4699      	mov	r9, r3
    4014:	46a2      	mov	sl, r4
    4016:	46ab      	mov	fp, r5
    4018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    401a:	2c00      	cmp	r4, #0
    401c:	d016      	beq.n	404c <__ledf2+0x90>
    401e:	45cb      	cmp	fp, r9
    4020:	d017      	beq.n	4052 <__ledf2+0x96>
    4022:	465b      	mov	r3, fp
    4024:	4259      	negs	r1, r3
    4026:	2301      	movs	r3, #1
    4028:	430b      	orrs	r3, r1
    402a:	e7ef      	b.n	400c <__ledf2+0x50>
    402c:	0031      	movs	r1, r6
    402e:	2302      	movs	r3, #2
    4030:	4301      	orrs	r1, r0
    4032:	d1eb      	bne.n	400c <__ledf2+0x50>
    4034:	e7d9      	b.n	3fea <__ledf2+0x2e>
    4036:	0039      	movs	r1, r7
    4038:	2302      	movs	r3, #2
    403a:	4311      	orrs	r1, r2
    403c:	d1e6      	bne.n	400c <__ledf2+0x50>
    403e:	e7d7      	b.n	3ff0 <__ledf2+0x34>
    4040:	433a      	orrs	r2, r7
    4042:	d1dd      	bne.n	4000 <__ledf2+0x44>
    4044:	2300      	movs	r3, #0
    4046:	2800      	cmp	r0, #0
    4048:	d0e0      	beq.n	400c <__ledf2+0x50>
    404a:	e7ea      	b.n	4022 <__ledf2+0x66>
    404c:	433a      	orrs	r2, r7
    404e:	d1e6      	bne.n	401e <__ledf2+0x62>
    4050:	e7e7      	b.n	4022 <__ledf2+0x66>
    4052:	42a5      	cmp	r5, r4
    4054:	dce5      	bgt.n	4022 <__ledf2+0x66>
    4056:	db05      	blt.n	4064 <__ledf2+0xa8>
    4058:	42be      	cmp	r6, r7
    405a:	d8e2      	bhi.n	4022 <__ledf2+0x66>
    405c:	d007      	beq.n	406e <__ledf2+0xb2>
    405e:	2300      	movs	r3, #0
    4060:	42be      	cmp	r6, r7
    4062:	d2d3      	bcs.n	400c <__ledf2+0x50>
    4064:	4659      	mov	r1, fp
    4066:	2301      	movs	r3, #1
    4068:	3901      	subs	r1, #1
    406a:	430b      	orrs	r3, r1
    406c:	e7ce      	b.n	400c <__ledf2+0x50>
    406e:	45c4      	cmp	ip, r8
    4070:	d8d7      	bhi.n	4022 <__ledf2+0x66>
    4072:	2300      	movs	r3, #0
    4074:	45c4      	cmp	ip, r8
    4076:	d3f5      	bcc.n	4064 <__ledf2+0xa8>
    4078:	e7c8      	b.n	400c <__ledf2+0x50>
    407a:	46c0      	nop			; (mov r8, r8)
    407c:	000007ff 	.word	0x000007ff

00004080 <gcvt>:
    4080:	b5f0      	push	{r4, r5, r6, r7, lr}
    4082:	001c      	movs	r4, r3
    4084:	b085      	sub	sp, #20
    4086:	2300      	movs	r3, #0
    4088:	0015      	movs	r5, r2
    408a:	2200      	movs	r2, #0
    408c:	0006      	movs	r6, r0
    408e:	000f      	movs	r7, r1
    4090:	f7ff fdce 	bl	3c30 <__aeabi_dcmplt>
    4094:	0023      	movs	r3, r4
    4096:	2800      	cmp	r0, #0
    4098:	d003      	beq.n	40a2 <gcvt+0x22>
    409a:	232d      	movs	r3, #45	; 0x2d
    409c:	3d01      	subs	r5, #1
    409e:	7023      	strb	r3, [r4, #0]
    40a0:	1c63      	adds	r3, r4, #1
    40a2:	2200      	movs	r2, #0
    40a4:	4908      	ldr	r1, [pc, #32]	; (40c8 <gcvt+0x48>)
    40a6:	9203      	str	r2, [sp, #12]
    40a8:	3267      	adds	r2, #103	; 0x67
    40aa:	9202      	str	r2, [sp, #8]
    40ac:	9301      	str	r3, [sp, #4]
    40ae:	9500      	str	r5, [sp, #0]
    40b0:	003b      	movs	r3, r7
    40b2:	0032      	movs	r2, r6
    40b4:	6808      	ldr	r0, [r1, #0]
    40b6:	f000 f93b 	bl	4330 <_gcvt>
    40ba:	1e43      	subs	r3, r0, #1
    40bc:	4198      	sbcs	r0, r3
    40be:	4240      	negs	r0, r0
    40c0:	4004      	ands	r4, r0
    40c2:	0020      	movs	r0, r4
    40c4:	b005      	add	sp, #20
    40c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40c8:	200000fc 	.word	0x200000fc

000040cc <__libc_init_array>:
    40cc:	b570      	push	{r4, r5, r6, lr}
    40ce:	2600      	movs	r6, #0
    40d0:	4d0c      	ldr	r5, [pc, #48]	; (4104 <__libc_init_array+0x38>)
    40d2:	4c0d      	ldr	r4, [pc, #52]	; (4108 <__libc_init_array+0x3c>)
    40d4:	1b64      	subs	r4, r4, r5
    40d6:	10a4      	asrs	r4, r4, #2
    40d8:	42a6      	cmp	r6, r4
    40da:	d109      	bne.n	40f0 <__libc_init_array+0x24>
    40dc:	2600      	movs	r6, #0
    40de:	f002 f985 	bl	63ec <_init>
    40e2:	4d0a      	ldr	r5, [pc, #40]	; (410c <__libc_init_array+0x40>)
    40e4:	4c0a      	ldr	r4, [pc, #40]	; (4110 <__libc_init_array+0x44>)
    40e6:	1b64      	subs	r4, r4, r5
    40e8:	10a4      	asrs	r4, r4, #2
    40ea:	42a6      	cmp	r6, r4
    40ec:	d105      	bne.n	40fa <__libc_init_array+0x2e>
    40ee:	bd70      	pop	{r4, r5, r6, pc}
    40f0:	00b3      	lsls	r3, r6, #2
    40f2:	58eb      	ldr	r3, [r5, r3]
    40f4:	4798      	blx	r3
    40f6:	3601      	adds	r6, #1
    40f8:	e7ee      	b.n	40d8 <__libc_init_array+0xc>
    40fa:	00b3      	lsls	r3, r6, #2
    40fc:	58eb      	ldr	r3, [r5, r3]
    40fe:	4798      	blx	r3
    4100:	3601      	adds	r6, #1
    4102:	e7f2      	b.n	40ea <__libc_init_array+0x1e>
    4104:	000063f8 	.word	0x000063f8
    4108:	000063f8 	.word	0x000063f8
    410c:	000063f8 	.word	0x000063f8
    4110:	000063fc 	.word	0x000063fc

00004114 <malloc>:
    4114:	b510      	push	{r4, lr}
    4116:	4b03      	ldr	r3, [pc, #12]	; (4124 <malloc+0x10>)
    4118:	0001      	movs	r1, r0
    411a:	6818      	ldr	r0, [r3, #0]
    411c:	f000 f816 	bl	414c <_malloc_r>
    4120:	bd10      	pop	{r4, pc}
    4122:	46c0      	nop			; (mov r8, r8)
    4124:	200000fc 	.word	0x200000fc

00004128 <memcpy>:
    4128:	2300      	movs	r3, #0
    412a:	b510      	push	{r4, lr}
    412c:	429a      	cmp	r2, r3
    412e:	d100      	bne.n	4132 <memcpy+0xa>
    4130:	bd10      	pop	{r4, pc}
    4132:	5ccc      	ldrb	r4, [r1, r3]
    4134:	54c4      	strb	r4, [r0, r3]
    4136:	3301      	adds	r3, #1
    4138:	e7f8      	b.n	412c <memcpy+0x4>

0000413a <memset>:
    413a:	0003      	movs	r3, r0
    413c:	1882      	adds	r2, r0, r2
    413e:	4293      	cmp	r3, r2
    4140:	d100      	bne.n	4144 <memset+0xa>
    4142:	4770      	bx	lr
    4144:	7019      	strb	r1, [r3, #0]
    4146:	3301      	adds	r3, #1
    4148:	e7f9      	b.n	413e <memset+0x4>
	...

0000414c <_malloc_r>:
    414c:	2303      	movs	r3, #3
    414e:	b570      	push	{r4, r5, r6, lr}
    4150:	1ccd      	adds	r5, r1, #3
    4152:	439d      	bics	r5, r3
    4154:	3508      	adds	r5, #8
    4156:	0006      	movs	r6, r0
    4158:	2d0c      	cmp	r5, #12
    415a:	d21e      	bcs.n	419a <_malloc_r+0x4e>
    415c:	250c      	movs	r5, #12
    415e:	42a9      	cmp	r1, r5
    4160:	d81d      	bhi.n	419e <_malloc_r+0x52>
    4162:	0030      	movs	r0, r6
    4164:	f000 f9b2 	bl	44cc <__malloc_lock>
    4168:	4a25      	ldr	r2, [pc, #148]	; (4200 <_malloc_r+0xb4>)
    416a:	6814      	ldr	r4, [r2, #0]
    416c:	0021      	movs	r1, r4
    416e:	2900      	cmp	r1, #0
    4170:	d119      	bne.n	41a6 <_malloc_r+0x5a>
    4172:	4c24      	ldr	r4, [pc, #144]	; (4204 <_malloc_r+0xb8>)
    4174:	6823      	ldr	r3, [r4, #0]
    4176:	2b00      	cmp	r3, #0
    4178:	d103      	bne.n	4182 <_malloc_r+0x36>
    417a:	0030      	movs	r0, r6
    417c:	f000 f844 	bl	4208 <_sbrk_r>
    4180:	6020      	str	r0, [r4, #0]
    4182:	0029      	movs	r1, r5
    4184:	0030      	movs	r0, r6
    4186:	f000 f83f 	bl	4208 <_sbrk_r>
    418a:	1c43      	adds	r3, r0, #1
    418c:	d12c      	bne.n	41e8 <_malloc_r+0x9c>
    418e:	230c      	movs	r3, #12
    4190:	0030      	movs	r0, r6
    4192:	6033      	str	r3, [r6, #0]
    4194:	f000 f99b 	bl	44ce <__malloc_unlock>
    4198:	e003      	b.n	41a2 <_malloc_r+0x56>
    419a:	2d00      	cmp	r5, #0
    419c:	dadf      	bge.n	415e <_malloc_r+0x12>
    419e:	230c      	movs	r3, #12
    41a0:	6033      	str	r3, [r6, #0]
    41a2:	2000      	movs	r0, #0
    41a4:	bd70      	pop	{r4, r5, r6, pc}
    41a6:	680b      	ldr	r3, [r1, #0]
    41a8:	1b5b      	subs	r3, r3, r5
    41aa:	d41a      	bmi.n	41e2 <_malloc_r+0x96>
    41ac:	2b0b      	cmp	r3, #11
    41ae:	d903      	bls.n	41b8 <_malloc_r+0x6c>
    41b0:	600b      	str	r3, [r1, #0]
    41b2:	18cc      	adds	r4, r1, r3
    41b4:	6025      	str	r5, [r4, #0]
    41b6:	e003      	b.n	41c0 <_malloc_r+0x74>
    41b8:	428c      	cmp	r4, r1
    41ba:	d10e      	bne.n	41da <_malloc_r+0x8e>
    41bc:	6863      	ldr	r3, [r4, #4]
    41be:	6013      	str	r3, [r2, #0]
    41c0:	0030      	movs	r0, r6
    41c2:	f000 f984 	bl	44ce <__malloc_unlock>
    41c6:	0020      	movs	r0, r4
    41c8:	2207      	movs	r2, #7
    41ca:	300b      	adds	r0, #11
    41cc:	1d23      	adds	r3, r4, #4
    41ce:	4390      	bics	r0, r2
    41d0:	1ac3      	subs	r3, r0, r3
    41d2:	d0e7      	beq.n	41a4 <_malloc_r+0x58>
    41d4:	425a      	negs	r2, r3
    41d6:	50e2      	str	r2, [r4, r3]
    41d8:	e7e4      	b.n	41a4 <_malloc_r+0x58>
    41da:	684b      	ldr	r3, [r1, #4]
    41dc:	6063      	str	r3, [r4, #4]
    41de:	000c      	movs	r4, r1
    41e0:	e7ee      	b.n	41c0 <_malloc_r+0x74>
    41e2:	000c      	movs	r4, r1
    41e4:	6849      	ldr	r1, [r1, #4]
    41e6:	e7c2      	b.n	416e <_malloc_r+0x22>
    41e8:	2303      	movs	r3, #3
    41ea:	1cc4      	adds	r4, r0, #3
    41ec:	439c      	bics	r4, r3
    41ee:	42a0      	cmp	r0, r4
    41f0:	d0e0      	beq.n	41b4 <_malloc_r+0x68>
    41f2:	1a21      	subs	r1, r4, r0
    41f4:	0030      	movs	r0, r6
    41f6:	f000 f807 	bl	4208 <_sbrk_r>
    41fa:	1c43      	adds	r3, r0, #1
    41fc:	d1da      	bne.n	41b4 <_malloc_r+0x68>
    41fe:	e7c6      	b.n	418e <_malloc_r+0x42>
    4200:	200002c0 	.word	0x200002c0
    4204:	200002c4 	.word	0x200002c4

00004208 <_sbrk_r>:
    4208:	2300      	movs	r3, #0
    420a:	b570      	push	{r4, r5, r6, lr}
    420c:	4c06      	ldr	r4, [pc, #24]	; (4228 <_sbrk_r+0x20>)
    420e:	0005      	movs	r5, r0
    4210:	0008      	movs	r0, r1
    4212:	6023      	str	r3, [r4, #0]
    4214:	f7fc fdde 	bl	dd4 <_sbrk>
    4218:	1c43      	adds	r3, r0, #1
    421a:	d103      	bne.n	4224 <_sbrk_r+0x1c>
    421c:	6823      	ldr	r3, [r4, #0]
    421e:	2b00      	cmp	r3, #0
    4220:	d000      	beq.n	4224 <_sbrk_r+0x1c>
    4222:	602b      	str	r3, [r5, #0]
    4224:	bd70      	pop	{r4, r5, r6, pc}
    4226:	46c0      	nop			; (mov r8, r8)
    4228:	200003a4 	.word	0x200003a4

0000422c <strlen>:
    422c:	2300      	movs	r3, #0
    422e:	5cc2      	ldrb	r2, [r0, r3]
    4230:	3301      	adds	r3, #1
    4232:	2a00      	cmp	r2, #0
    4234:	d1fb      	bne.n	422e <strlen+0x2>
    4236:	1e58      	subs	r0, r3, #1
    4238:	4770      	bx	lr
	...

0000423c <print_e>:
    423c:	b5f0      	push	{r4, r5, r6, r7, lr}
    423e:	b08b      	sub	sp, #44	; 0x2c
    4240:	000e      	movs	r6, r1
    4242:	a910      	add	r1, sp, #64	; 0x40
    4244:	c910      	ldmia	r1!, {r4}
    4246:	780d      	ldrb	r5, [r1, #0]
    4248:	a908      	add	r1, sp, #32
    424a:	9104      	str	r1, [sp, #16]
    424c:	a907      	add	r1, sp, #28
    424e:	9103      	str	r1, [sp, #12]
    4250:	a909      	add	r1, sp, #36	; 0x24
    4252:	9102      	str	r1, [sp, #8]
    4254:	1c61      	adds	r1, r4, #1
    4256:	9101      	str	r1, [sp, #4]
    4258:	2102      	movs	r1, #2
    425a:	9100      	str	r1, [sp, #0]
    425c:	f000 fcce 	bl	4bfc <_dtoa_r>
    4260:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4262:	4b32      	ldr	r3, [pc, #200]	; (432c <print_e+0xf0>)
    4264:	429f      	cmp	r7, r3
    4266:	d105      	bne.n	4274 <print_e+0x38>
    4268:	0001      	movs	r1, r0
    426a:	0030      	movs	r0, r6
    426c:	f000 fc3a 	bl	4ae4 <strcpy>
    4270:	b00b      	add	sp, #44	; 0x2c
    4272:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4274:	7803      	ldrb	r3, [r0, #0]
    4276:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4278:	1c41      	adds	r1, r0, #1
    427a:	7033      	strb	r3, [r6, #0]
    427c:	4322      	orrs	r2, r4
    427e:	d109      	bne.n	4294 <print_e+0x58>
    4280:	0014      	movs	r4, r2
    4282:	1c73      	adds	r3, r6, #1
    4284:	7808      	ldrb	r0, [r1, #0]
    4286:	001a      	movs	r2, r3
    4288:	2800      	cmp	r0, #0
    428a:	d107      	bne.n	429c <print_e+0x60>
    428c:	2d67      	cmp	r5, #103	; 0x67
    428e:	d10c      	bne.n	42aa <print_e+0x6e>
    4290:	2565      	movs	r5, #101	; 0x65
    4292:	e014      	b.n	42be <print_e+0x82>
    4294:	222e      	movs	r2, #46	; 0x2e
    4296:	1cb3      	adds	r3, r6, #2
    4298:	7072      	strb	r2, [r6, #1]
    429a:	e7f3      	b.n	4284 <print_e+0x48>
    429c:	2c00      	cmp	r4, #0
    429e:	ddf5      	ble.n	428c <print_e+0x50>
    42a0:	7018      	strb	r0, [r3, #0]
    42a2:	3101      	adds	r1, #1
    42a4:	3c01      	subs	r4, #1
    42a6:	3301      	adds	r3, #1
    42a8:	e7ec      	b.n	4284 <print_e+0x48>
    42aa:	2d47      	cmp	r5, #71	; 0x47
    42ac:	d039      	beq.n	4322 <print_e+0xe6>
    42ae:	0021      	movs	r1, r4
    42b0:	2030      	movs	r0, #48	; 0x30
    42b2:	2900      	cmp	r1, #0
    42b4:	dc31      	bgt.n	431a <print_e+0xde>
    42b6:	43e3      	mvns	r3, r4
    42b8:	17db      	asrs	r3, r3, #31
    42ba:	401c      	ands	r4, r3
    42bc:	1912      	adds	r2, r2, r4
    42be:	7015      	strb	r5, [r2, #0]
    42c0:	1e7b      	subs	r3, r7, #1
    42c2:	1c95      	adds	r5, r2, #2
    42c4:	9309      	str	r3, [sp, #36]	; 0x24
    42c6:	002c      	movs	r4, r5
    42c8:	2b00      	cmp	r3, #0
    42ca:	da2c      	bge.n	4326 <print_e+0xea>
    42cc:	232d      	movs	r3, #45	; 0x2d
    42ce:	7053      	strb	r3, [r2, #1]
    42d0:	3b2c      	subs	r3, #44	; 0x2c
    42d2:	1bdf      	subs	r7, r3, r7
    42d4:	9709      	str	r7, [sp, #36]	; 0x24
    42d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
    42d8:	2e63      	cmp	r6, #99	; 0x63
    42da:	dd0c      	ble.n	42f6 <print_e+0xba>
    42dc:	2164      	movs	r1, #100	; 0x64
    42de:	0030      	movs	r0, r6
    42e0:	f7fc ff7f 	bl	11e2 <__aeabi_idiv>
    42e4:	0003      	movs	r3, r0
    42e6:	3330      	adds	r3, #48	; 0x30
    42e8:	702b      	strb	r3, [r5, #0]
    42ea:	2364      	movs	r3, #100	; 0x64
    42ec:	425b      	negs	r3, r3
    42ee:	4358      	muls	r0, r3
    42f0:	1980      	adds	r0, r0, r6
    42f2:	9009      	str	r0, [sp, #36]	; 0x24
    42f4:	1c6c      	adds	r4, r5, #1
    42f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    42f8:	210a      	movs	r1, #10
    42fa:	0028      	movs	r0, r5
    42fc:	f7fc ff71 	bl	11e2 <__aeabi_idiv>
    4300:	0003      	movs	r3, r0
    4302:	0002      	movs	r2, r0
    4304:	200a      	movs	r0, #10
    4306:	4240      	negs	r0, r0
    4308:	4358      	muls	r0, r3
    430a:	2300      	movs	r3, #0
    430c:	1940      	adds	r0, r0, r5
    430e:	3230      	adds	r2, #48	; 0x30
    4310:	3030      	adds	r0, #48	; 0x30
    4312:	7022      	strb	r2, [r4, #0]
    4314:	7060      	strb	r0, [r4, #1]
    4316:	70a3      	strb	r3, [r4, #2]
    4318:	e7aa      	b.n	4270 <print_e+0x34>
    431a:	7018      	strb	r0, [r3, #0]
    431c:	3901      	subs	r1, #1
    431e:	3301      	adds	r3, #1
    4320:	e7c7      	b.n	42b2 <print_e+0x76>
    4322:	2545      	movs	r5, #69	; 0x45
    4324:	e7cb      	b.n	42be <print_e+0x82>
    4326:	232b      	movs	r3, #43	; 0x2b
    4328:	7053      	strb	r3, [r2, #1]
    432a:	e7d4      	b.n	42d6 <print_e+0x9a>
    432c:	0000270f 	.word	0x0000270f

00004330 <_gcvt>:
    4330:	b5f0      	push	{r4, r5, r6, r7, lr}
    4332:	0015      	movs	r5, r2
    4334:	001c      	movs	r4, r3
    4336:	b08d      	sub	sp, #52	; 0x34
    4338:	ab14      	add	r3, sp, #80	; 0x50
    433a:	781b      	ldrb	r3, [r3, #0]
    433c:	0006      	movs	r6, r0
    433e:	9307      	str	r3, [sp, #28]
    4340:	2200      	movs	r2, #0
    4342:	2300      	movs	r3, #0
    4344:	0028      	movs	r0, r5
    4346:	0021      	movs	r1, r4
    4348:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    434a:	f7ff fc71 	bl	3c30 <__aeabi_dcmplt>
    434e:	2800      	cmp	r0, #0
    4350:	d002      	beq.n	4358 <_gcvt+0x28>
    4352:	2380      	movs	r3, #128	; 0x80
    4354:	061b      	lsls	r3, r3, #24
    4356:	18e4      	adds	r4, r4, r3
    4358:	2200      	movs	r2, #0
    435a:	2300      	movs	r3, #0
    435c:	0028      	movs	r0, r5
    435e:	0021      	movs	r1, r4
    4360:	f7ff fc60 	bl	3c24 <__aeabi_dcmpeq>
    4364:	2800      	cmp	r0, #0
    4366:	d006      	beq.n	4376 <_gcvt+0x46>
    4368:	2330      	movs	r3, #48	; 0x30
    436a:	703b      	strb	r3, [r7, #0]
    436c:	2300      	movs	r3, #0
    436e:	707b      	strb	r3, [r7, #1]
    4370:	0038      	movs	r0, r7
    4372:	b00d      	add	sp, #52	; 0x34
    4374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4376:	4a51      	ldr	r2, [pc, #324]	; (44bc <_gcvt+0x18c>)
    4378:	4b51      	ldr	r3, [pc, #324]	; (44c0 <_gcvt+0x190>)
    437a:	0028      	movs	r0, r5
    437c:	0021      	movs	r1, r4
    437e:	f7ff fc61 	bl	3c44 <__aeabi_dcmple>
    4382:	2800      	cmp	r0, #0
    4384:	d00d      	beq.n	43a2 <_gcvt+0x72>
    4386:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4388:	002a      	movs	r2, r5
    438a:	9302      	str	r3, [sp, #8]
    438c:	9b07      	ldr	r3, [sp, #28]
    438e:	0039      	movs	r1, r7
    4390:	9301      	str	r3, [sp, #4]
    4392:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4394:	0030      	movs	r0, r6
    4396:	3b01      	subs	r3, #1
    4398:	9300      	str	r3, [sp, #0]
    439a:	0023      	movs	r3, r4
    439c:	f7ff ff4e 	bl	423c <print_e>
    43a0:	e7e6      	b.n	4370 <_gcvt+0x40>
    43a2:	9812      	ldr	r0, [sp, #72]	; 0x48
    43a4:	f000 fb76 	bl	4a94 <_mprec_log10>
    43a8:	0002      	movs	r2, r0
    43aa:	000b      	movs	r3, r1
    43ac:	0028      	movs	r0, r5
    43ae:	0021      	movs	r1, r4
    43b0:	f7ff fc5c 	bl	3c6c <__aeabi_dcmpge>
    43b4:	2800      	cmp	r0, #0
    43b6:	d1e6      	bne.n	4386 <_gcvt+0x56>
    43b8:	2200      	movs	r2, #0
    43ba:	4b42      	ldr	r3, [pc, #264]	; (44c4 <_gcvt+0x194>)
    43bc:	0028      	movs	r0, r5
    43be:	0021      	movs	r1, r4
    43c0:	f7ff fc36 	bl	3c30 <__aeabi_dcmplt>
    43c4:	ab0a      	add	r3, sp, #40	; 0x28
    43c6:	9303      	str	r3, [sp, #12]
    43c8:	ab09      	add	r3, sp, #36	; 0x24
    43ca:	9302      	str	r3, [sp, #8]
    43cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    43ce:	aa0b      	add	r2, sp, #44	; 0x2c
    43d0:	9301      	str	r3, [sp, #4]
    43d2:	9204      	str	r2, [sp, #16]
    43d4:	2303      	movs	r3, #3
    43d6:	2800      	cmp	r0, #0
    43d8:	d100      	bne.n	43dc <_gcvt+0xac>
    43da:	2302      	movs	r3, #2
    43dc:	9300      	str	r3, [sp, #0]
    43de:	002a      	movs	r2, r5
    43e0:	0023      	movs	r3, r4
    43e2:	0030      	movs	r0, r6
    43e4:	f000 fc0a 	bl	4bfc <_dtoa_r>
    43e8:	4b37      	ldr	r3, [pc, #220]	; (44c8 <_gcvt+0x198>)
    43ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    43ec:	429a      	cmp	r2, r3
    43ee:	d013      	beq.n	4418 <_gcvt+0xe8>
    43f0:	003a      	movs	r2, r7
    43f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    43f4:	7804      	ldrb	r4, [r0, #0]
    43f6:	1a9b      	subs	r3, r3, r2
    43f8:	0011      	movs	r1, r2
    43fa:	18fb      	adds	r3, r7, r3
    43fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
    43fe:	2c00      	cmp	r4, #0
    4400:	d115      	bne.n	442e <_gcvt+0xfe>
    4402:	2101      	movs	r1, #1
    4404:	468c      	mov	ip, r1
    4406:	1aed      	subs	r5, r5, r3
    4408:	18ee      	adds	r6, r5, r3
    440a:	0011      	movs	r1, r2
    440c:	2e00      	cmp	r6, #0
    440e:	dc3b      	bgt.n	4488 <_gcvt+0x158>
    4410:	2c00      	cmp	r4, #0
    4412:	d00e      	beq.n	4432 <_gcvt+0x102>
    4414:	9609      	str	r6, [sp, #36]	; 0x24
    4416:	e00c      	b.n	4432 <_gcvt+0x102>
    4418:	0001      	movs	r1, r0
    441a:	0038      	movs	r0, r7
    441c:	f000 fb62 	bl	4ae4 <strcpy>
    4420:	e7a6      	b.n	4370 <_gcvt+0x40>
    4422:	3d01      	subs	r5, #1
    4424:	7014      	strb	r4, [r2, #0]
    4426:	3001      	adds	r0, #1
    4428:	9509      	str	r5, [sp, #36]	; 0x24
    442a:	3201      	adds	r2, #1
    442c:	e7e1      	b.n	43f2 <_gcvt+0xc2>
    442e:	2d00      	cmp	r5, #0
    4430:	dcf7      	bgt.n	4422 <_gcvt+0xf2>
    4432:	9c15      	ldr	r4, [sp, #84]	; 0x54
    4434:	2c00      	cmp	r4, #0
    4436:	d102      	bne.n	443e <_gcvt+0x10e>
    4438:	7804      	ldrb	r4, [r0, #0]
    443a:	2c00      	cmp	r4, #0
    443c:	d021      	beq.n	4482 <_gcvt+0x152>
    443e:	4297      	cmp	r7, r2
    4440:	d102      	bne.n	4448 <_gcvt+0x118>
    4442:	2230      	movs	r2, #48	; 0x30
    4444:	1c79      	adds	r1, r7, #1
    4446:	703a      	strb	r2, [r7, #0]
    4448:	222e      	movs	r2, #46	; 0x2e
    444a:	2530      	movs	r5, #48	; 0x30
    444c:	700a      	strb	r2, [r1, #0]
    444e:	2601      	movs	r6, #1
    4450:	1c4a      	adds	r2, r1, #1
    4452:	2100      	movs	r1, #0
    4454:	9c09      	ldr	r4, [sp, #36]	; 0x24
    4456:	2c00      	cmp	r4, #0
    4458:	db1e      	blt.n	4498 <_gcvt+0x168>
    445a:	2900      	cmp	r1, #0
    445c:	d000      	beq.n	4460 <_gcvt+0x130>
    445e:	9409      	str	r4, [sp, #36]	; 0x24
    4460:	7804      	ldrb	r4, [r0, #0]
    4462:	0011      	movs	r1, r2
    4464:	2c00      	cmp	r4, #0
    4466:	d001      	beq.n	446c <_gcvt+0x13c>
    4468:	2b00      	cmp	r3, #0
    446a:	dc1d      	bgt.n	44a8 <_gcvt+0x178>
    446c:	9815      	ldr	r0, [sp, #84]	; 0x54
    446e:	2800      	cmp	r0, #0
    4470:	d007      	beq.n	4482 <_gcvt+0x152>
    4472:	0018      	movs	r0, r3
    4474:	2430      	movs	r4, #48	; 0x30
    4476:	2800      	cmp	r0, #0
    4478:	dc1b      	bgt.n	44b2 <_gcvt+0x182>
    447a:	43da      	mvns	r2, r3
    447c:	17d2      	asrs	r2, r2, #31
    447e:	4013      	ands	r3, r2
    4480:	18c9      	adds	r1, r1, r3
    4482:	2300      	movs	r3, #0
    4484:	700b      	strb	r3, [r1, #0]
    4486:	e773      	b.n	4370 <_gcvt+0x40>
    4488:	2b00      	cmp	r3, #0
    448a:	ddc1      	ble.n	4410 <_gcvt+0xe0>
    448c:	2130      	movs	r1, #48	; 0x30
    448e:	3b01      	subs	r3, #1
    4490:	7011      	strb	r1, [r2, #0]
    4492:	4664      	mov	r4, ip
    4494:	3201      	adds	r2, #1
    4496:	e7b7      	b.n	4408 <_gcvt+0xd8>
    4498:	2b00      	cmp	r3, #0
    449a:	ddde      	ble.n	445a <_gcvt+0x12a>
    449c:	7015      	strb	r5, [r2, #0]
    449e:	3401      	adds	r4, #1
    44a0:	3b01      	subs	r3, #1
    44a2:	3201      	adds	r2, #1
    44a4:	0031      	movs	r1, r6
    44a6:	e7d6      	b.n	4456 <_gcvt+0x126>
    44a8:	7014      	strb	r4, [r2, #0]
    44aa:	3001      	adds	r0, #1
    44ac:	3b01      	subs	r3, #1
    44ae:	3201      	adds	r2, #1
    44b0:	e7d6      	b.n	4460 <_gcvt+0x130>
    44b2:	7014      	strb	r4, [r2, #0]
    44b4:	3801      	subs	r0, #1
    44b6:	3201      	adds	r2, #1
    44b8:	e7dd      	b.n	4476 <_gcvt+0x146>
    44ba:	46c0      	nop			; (mov r8, r8)
    44bc:	eb1c432d 	.word	0xeb1c432d
    44c0:	3f1a36e2 	.word	0x3f1a36e2
    44c4:	3ff00000 	.word	0x3ff00000
    44c8:	0000270f 	.word	0x0000270f

000044cc <__malloc_lock>:
    44cc:	4770      	bx	lr

000044ce <__malloc_unlock>:
    44ce:	4770      	bx	lr

000044d0 <_Balloc>:
    44d0:	b570      	push	{r4, r5, r6, lr}
    44d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
    44d4:	0004      	movs	r4, r0
    44d6:	000d      	movs	r5, r1
    44d8:	2e00      	cmp	r6, #0
    44da:	d107      	bne.n	44ec <_Balloc+0x1c>
    44dc:	2010      	movs	r0, #16
    44de:	f7ff fe19 	bl	4114 <malloc>
    44e2:	6260      	str	r0, [r4, #36]	; 0x24
    44e4:	6046      	str	r6, [r0, #4]
    44e6:	6086      	str	r6, [r0, #8]
    44e8:	6006      	str	r6, [r0, #0]
    44ea:	60c6      	str	r6, [r0, #12]
    44ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
    44ee:	68f3      	ldr	r3, [r6, #12]
    44f0:	2b00      	cmp	r3, #0
    44f2:	d013      	beq.n	451c <_Balloc+0x4c>
    44f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    44f6:	00aa      	lsls	r2, r5, #2
    44f8:	68db      	ldr	r3, [r3, #12]
    44fa:	189b      	adds	r3, r3, r2
    44fc:	6818      	ldr	r0, [r3, #0]
    44fe:	2800      	cmp	r0, #0
    4500:	d118      	bne.n	4534 <_Balloc+0x64>
    4502:	2101      	movs	r1, #1
    4504:	000e      	movs	r6, r1
    4506:	40ae      	lsls	r6, r5
    4508:	1d72      	adds	r2, r6, #5
    450a:	0092      	lsls	r2, r2, #2
    450c:	0020      	movs	r0, r4
    450e:	f000 fadb 	bl	4ac8 <_calloc_r>
    4512:	2800      	cmp	r0, #0
    4514:	d00c      	beq.n	4530 <_Balloc+0x60>
    4516:	6045      	str	r5, [r0, #4]
    4518:	6086      	str	r6, [r0, #8]
    451a:	e00d      	b.n	4538 <_Balloc+0x68>
    451c:	2221      	movs	r2, #33	; 0x21
    451e:	2104      	movs	r1, #4
    4520:	0020      	movs	r0, r4
    4522:	f000 fad1 	bl	4ac8 <_calloc_r>
    4526:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4528:	60f0      	str	r0, [r6, #12]
    452a:	68db      	ldr	r3, [r3, #12]
    452c:	2b00      	cmp	r3, #0
    452e:	d1e1      	bne.n	44f4 <_Balloc+0x24>
    4530:	2000      	movs	r0, #0
    4532:	bd70      	pop	{r4, r5, r6, pc}
    4534:	6802      	ldr	r2, [r0, #0]
    4536:	601a      	str	r2, [r3, #0]
    4538:	2300      	movs	r3, #0
    453a:	6103      	str	r3, [r0, #16]
    453c:	60c3      	str	r3, [r0, #12]
    453e:	e7f8      	b.n	4532 <_Balloc+0x62>

00004540 <_Bfree>:
    4540:	b570      	push	{r4, r5, r6, lr}
    4542:	6a44      	ldr	r4, [r0, #36]	; 0x24
    4544:	0006      	movs	r6, r0
    4546:	000d      	movs	r5, r1
    4548:	2c00      	cmp	r4, #0
    454a:	d107      	bne.n	455c <_Bfree+0x1c>
    454c:	2010      	movs	r0, #16
    454e:	f7ff fde1 	bl	4114 <malloc>
    4552:	6270      	str	r0, [r6, #36]	; 0x24
    4554:	6044      	str	r4, [r0, #4]
    4556:	6084      	str	r4, [r0, #8]
    4558:	6004      	str	r4, [r0, #0]
    455a:	60c4      	str	r4, [r0, #12]
    455c:	2d00      	cmp	r5, #0
    455e:	d007      	beq.n	4570 <_Bfree+0x30>
    4560:	6a73      	ldr	r3, [r6, #36]	; 0x24
    4562:	686a      	ldr	r2, [r5, #4]
    4564:	68db      	ldr	r3, [r3, #12]
    4566:	0092      	lsls	r2, r2, #2
    4568:	189b      	adds	r3, r3, r2
    456a:	681a      	ldr	r2, [r3, #0]
    456c:	602a      	str	r2, [r5, #0]
    456e:	601d      	str	r5, [r3, #0]
    4570:	bd70      	pop	{r4, r5, r6, pc}

00004572 <__multadd>:
    4572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4574:	001e      	movs	r6, r3
    4576:	2314      	movs	r3, #20
    4578:	469c      	mov	ip, r3
    457a:	0007      	movs	r7, r0
    457c:	000c      	movs	r4, r1
    457e:	2000      	movs	r0, #0
    4580:	690d      	ldr	r5, [r1, #16]
    4582:	448c      	add	ip, r1
    4584:	4663      	mov	r3, ip
    4586:	8819      	ldrh	r1, [r3, #0]
    4588:	681b      	ldr	r3, [r3, #0]
    458a:	4351      	muls	r1, r2
    458c:	0c1b      	lsrs	r3, r3, #16
    458e:	4353      	muls	r3, r2
    4590:	1989      	adds	r1, r1, r6
    4592:	0c0e      	lsrs	r6, r1, #16
    4594:	199b      	adds	r3, r3, r6
    4596:	b289      	uxth	r1, r1
    4598:	0c1e      	lsrs	r6, r3, #16
    459a:	041b      	lsls	r3, r3, #16
    459c:	185b      	adds	r3, r3, r1
    459e:	4661      	mov	r1, ip
    45a0:	3001      	adds	r0, #1
    45a2:	c108      	stmia	r1!, {r3}
    45a4:	468c      	mov	ip, r1
    45a6:	4285      	cmp	r5, r0
    45a8:	dcec      	bgt.n	4584 <__multadd+0x12>
    45aa:	2e00      	cmp	r6, #0
    45ac:	d01b      	beq.n	45e6 <__multadd+0x74>
    45ae:	68a3      	ldr	r3, [r4, #8]
    45b0:	429d      	cmp	r5, r3
    45b2:	db12      	blt.n	45da <__multadd+0x68>
    45b4:	6863      	ldr	r3, [r4, #4]
    45b6:	0038      	movs	r0, r7
    45b8:	1c59      	adds	r1, r3, #1
    45ba:	f7ff ff89 	bl	44d0 <_Balloc>
    45be:	0021      	movs	r1, r4
    45c0:	6923      	ldr	r3, [r4, #16]
    45c2:	9001      	str	r0, [sp, #4]
    45c4:	1c9a      	adds	r2, r3, #2
    45c6:	0092      	lsls	r2, r2, #2
    45c8:	310c      	adds	r1, #12
    45ca:	300c      	adds	r0, #12
    45cc:	f7ff fdac 	bl	4128 <memcpy>
    45d0:	0021      	movs	r1, r4
    45d2:	0038      	movs	r0, r7
    45d4:	f7ff ffb4 	bl	4540 <_Bfree>
    45d8:	9c01      	ldr	r4, [sp, #4]
    45da:	1d2b      	adds	r3, r5, #4
    45dc:	009b      	lsls	r3, r3, #2
    45de:	18e3      	adds	r3, r4, r3
    45e0:	3501      	adds	r5, #1
    45e2:	605e      	str	r6, [r3, #4]
    45e4:	6125      	str	r5, [r4, #16]
    45e6:	0020      	movs	r0, r4
    45e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000045ea <__hi0bits>:
    45ea:	0003      	movs	r3, r0
    45ec:	0c02      	lsrs	r2, r0, #16
    45ee:	2000      	movs	r0, #0
    45f0:	4282      	cmp	r2, r0
    45f2:	d101      	bne.n	45f8 <__hi0bits+0xe>
    45f4:	041b      	lsls	r3, r3, #16
    45f6:	3010      	adds	r0, #16
    45f8:	0e1a      	lsrs	r2, r3, #24
    45fa:	d101      	bne.n	4600 <__hi0bits+0x16>
    45fc:	3008      	adds	r0, #8
    45fe:	021b      	lsls	r3, r3, #8
    4600:	0f1a      	lsrs	r2, r3, #28
    4602:	d101      	bne.n	4608 <__hi0bits+0x1e>
    4604:	3004      	adds	r0, #4
    4606:	011b      	lsls	r3, r3, #4
    4608:	0f9a      	lsrs	r2, r3, #30
    460a:	d101      	bne.n	4610 <__hi0bits+0x26>
    460c:	3002      	adds	r0, #2
    460e:	009b      	lsls	r3, r3, #2
    4610:	2b00      	cmp	r3, #0
    4612:	db03      	blt.n	461c <__hi0bits+0x32>
    4614:	3001      	adds	r0, #1
    4616:	005b      	lsls	r3, r3, #1
    4618:	d400      	bmi.n	461c <__hi0bits+0x32>
    461a:	2020      	movs	r0, #32
    461c:	4770      	bx	lr

0000461e <__lo0bits>:
    461e:	2207      	movs	r2, #7
    4620:	6803      	ldr	r3, [r0, #0]
    4622:	b510      	push	{r4, lr}
    4624:	0001      	movs	r1, r0
    4626:	401a      	ands	r2, r3
    4628:	d00d      	beq.n	4646 <__lo0bits+0x28>
    462a:	2401      	movs	r4, #1
    462c:	2000      	movs	r0, #0
    462e:	4223      	tst	r3, r4
    4630:	d105      	bne.n	463e <__lo0bits+0x20>
    4632:	3002      	adds	r0, #2
    4634:	4203      	tst	r3, r0
    4636:	d003      	beq.n	4640 <__lo0bits+0x22>
    4638:	40e3      	lsrs	r3, r4
    463a:	0020      	movs	r0, r4
    463c:	600b      	str	r3, [r1, #0]
    463e:	bd10      	pop	{r4, pc}
    4640:	089b      	lsrs	r3, r3, #2
    4642:	600b      	str	r3, [r1, #0]
    4644:	e7fb      	b.n	463e <__lo0bits+0x20>
    4646:	b29c      	uxth	r4, r3
    4648:	0010      	movs	r0, r2
    464a:	2c00      	cmp	r4, #0
    464c:	d101      	bne.n	4652 <__lo0bits+0x34>
    464e:	2010      	movs	r0, #16
    4650:	0c1b      	lsrs	r3, r3, #16
    4652:	b2da      	uxtb	r2, r3
    4654:	2a00      	cmp	r2, #0
    4656:	d101      	bne.n	465c <__lo0bits+0x3e>
    4658:	3008      	adds	r0, #8
    465a:	0a1b      	lsrs	r3, r3, #8
    465c:	071a      	lsls	r2, r3, #28
    465e:	d101      	bne.n	4664 <__lo0bits+0x46>
    4660:	3004      	adds	r0, #4
    4662:	091b      	lsrs	r3, r3, #4
    4664:	079a      	lsls	r2, r3, #30
    4666:	d101      	bne.n	466c <__lo0bits+0x4e>
    4668:	3002      	adds	r0, #2
    466a:	089b      	lsrs	r3, r3, #2
    466c:	07da      	lsls	r2, r3, #31
    466e:	d4e8      	bmi.n	4642 <__lo0bits+0x24>
    4670:	085b      	lsrs	r3, r3, #1
    4672:	d001      	beq.n	4678 <__lo0bits+0x5a>
    4674:	3001      	adds	r0, #1
    4676:	e7e4      	b.n	4642 <__lo0bits+0x24>
    4678:	2020      	movs	r0, #32
    467a:	e7e0      	b.n	463e <__lo0bits+0x20>

0000467c <__i2b>:
    467c:	b510      	push	{r4, lr}
    467e:	000c      	movs	r4, r1
    4680:	2101      	movs	r1, #1
    4682:	f7ff ff25 	bl	44d0 <_Balloc>
    4686:	2301      	movs	r3, #1
    4688:	6144      	str	r4, [r0, #20]
    468a:	6103      	str	r3, [r0, #16]
    468c:	bd10      	pop	{r4, pc}

0000468e <__multiply>:
    468e:	b5f0      	push	{r4, r5, r6, r7, lr}
    4690:	690b      	ldr	r3, [r1, #16]
    4692:	0015      	movs	r5, r2
    4694:	6912      	ldr	r2, [r2, #16]
    4696:	b089      	sub	sp, #36	; 0x24
    4698:	000c      	movs	r4, r1
    469a:	4293      	cmp	r3, r2
    469c:	da01      	bge.n	46a2 <__multiply+0x14>
    469e:	002c      	movs	r4, r5
    46a0:	000d      	movs	r5, r1
    46a2:	6927      	ldr	r7, [r4, #16]
    46a4:	692e      	ldr	r6, [r5, #16]
    46a6:	68a2      	ldr	r2, [r4, #8]
    46a8:	19bb      	adds	r3, r7, r6
    46aa:	6861      	ldr	r1, [r4, #4]
    46ac:	9301      	str	r3, [sp, #4]
    46ae:	4293      	cmp	r3, r2
    46b0:	dd00      	ble.n	46b4 <__multiply+0x26>
    46b2:	3101      	adds	r1, #1
    46b4:	f7ff ff0c 	bl	44d0 <_Balloc>
    46b8:	0003      	movs	r3, r0
    46ba:	3314      	adds	r3, #20
    46bc:	9300      	str	r3, [sp, #0]
    46be:	9a00      	ldr	r2, [sp, #0]
    46c0:	19bb      	adds	r3, r7, r6
    46c2:	4694      	mov	ip, r2
    46c4:	009b      	lsls	r3, r3, #2
    46c6:	449c      	add	ip, r3
    46c8:	0013      	movs	r3, r2
    46ca:	2200      	movs	r2, #0
    46cc:	9004      	str	r0, [sp, #16]
    46ce:	4563      	cmp	r3, ip
    46d0:	d31c      	bcc.n	470c <__multiply+0x7e>
    46d2:	002a      	movs	r2, r5
    46d4:	3414      	adds	r4, #20
    46d6:	00bf      	lsls	r7, r7, #2
    46d8:	19e3      	adds	r3, r4, r7
    46da:	3214      	adds	r2, #20
    46dc:	00b6      	lsls	r6, r6, #2
    46de:	9305      	str	r3, [sp, #20]
    46e0:	1993      	adds	r3, r2, r6
    46e2:	9402      	str	r4, [sp, #8]
    46e4:	9306      	str	r3, [sp, #24]
    46e6:	9b06      	ldr	r3, [sp, #24]
    46e8:	429a      	cmp	r2, r3
    46ea:	d311      	bcc.n	4710 <__multiply+0x82>
    46ec:	9b01      	ldr	r3, [sp, #4]
    46ee:	2b00      	cmp	r3, #0
    46f0:	dd06      	ble.n	4700 <__multiply+0x72>
    46f2:	2304      	movs	r3, #4
    46f4:	425b      	negs	r3, r3
    46f6:	449c      	add	ip, r3
    46f8:	4663      	mov	r3, ip
    46fa:	681b      	ldr	r3, [r3, #0]
    46fc:	2b00      	cmp	r3, #0
    46fe:	d051      	beq.n	47a4 <__multiply+0x116>
    4700:	9b04      	ldr	r3, [sp, #16]
    4702:	9a01      	ldr	r2, [sp, #4]
    4704:	0018      	movs	r0, r3
    4706:	611a      	str	r2, [r3, #16]
    4708:	b009      	add	sp, #36	; 0x24
    470a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    470c:	c304      	stmia	r3!, {r2}
    470e:	e7de      	b.n	46ce <__multiply+0x40>
    4710:	8814      	ldrh	r4, [r2, #0]
    4712:	2c00      	cmp	r4, #0
    4714:	d01e      	beq.n	4754 <__multiply+0xc6>
    4716:	2600      	movs	r6, #0
    4718:	9d00      	ldr	r5, [sp, #0]
    471a:	9f02      	ldr	r7, [sp, #8]
    471c:	cf01      	ldmia	r7!, {r0}
    471e:	9507      	str	r5, [sp, #28]
    4720:	cd08      	ldmia	r5!, {r3}
    4722:	9303      	str	r3, [sp, #12]
    4724:	b283      	uxth	r3, r0
    4726:	4363      	muls	r3, r4
    4728:	0019      	movs	r1, r3
    472a:	466b      	mov	r3, sp
    472c:	0c00      	lsrs	r0, r0, #16
    472e:	899b      	ldrh	r3, [r3, #12]
    4730:	4360      	muls	r0, r4
    4732:	18cb      	adds	r3, r1, r3
    4734:	9903      	ldr	r1, [sp, #12]
    4736:	199b      	adds	r3, r3, r6
    4738:	0c09      	lsrs	r1, r1, #16
    473a:	1841      	adds	r1, r0, r1
    473c:	0c18      	lsrs	r0, r3, #16
    473e:	1809      	adds	r1, r1, r0
    4740:	0c0e      	lsrs	r6, r1, #16
    4742:	b29b      	uxth	r3, r3
    4744:	0409      	lsls	r1, r1, #16
    4746:	430b      	orrs	r3, r1
    4748:	9907      	ldr	r1, [sp, #28]
    474a:	600b      	str	r3, [r1, #0]
    474c:	9b05      	ldr	r3, [sp, #20]
    474e:	42bb      	cmp	r3, r7
    4750:	d8e4      	bhi.n	471c <__multiply+0x8e>
    4752:	602e      	str	r6, [r5, #0]
    4754:	6813      	ldr	r3, [r2, #0]
    4756:	0c1b      	lsrs	r3, r3, #16
    4758:	9303      	str	r3, [sp, #12]
    475a:	d01e      	beq.n	479a <__multiply+0x10c>
    475c:	2600      	movs	r6, #0
    475e:	9b00      	ldr	r3, [sp, #0]
    4760:	9c02      	ldr	r4, [sp, #8]
    4762:	681b      	ldr	r3, [r3, #0]
    4764:	9800      	ldr	r0, [sp, #0]
    4766:	0007      	movs	r7, r0
    4768:	8821      	ldrh	r1, [r4, #0]
    476a:	9d03      	ldr	r5, [sp, #12]
    476c:	b29b      	uxth	r3, r3
    476e:	4369      	muls	r1, r5
    4770:	c820      	ldmia	r0!, {r5}
    4772:	0c2d      	lsrs	r5, r5, #16
    4774:	1949      	adds	r1, r1, r5
    4776:	198e      	adds	r6, r1, r6
    4778:	0431      	lsls	r1, r6, #16
    477a:	430b      	orrs	r3, r1
    477c:	603b      	str	r3, [r7, #0]
    477e:	cc08      	ldmia	r4!, {r3}
    4780:	9903      	ldr	r1, [sp, #12]
    4782:	0c1b      	lsrs	r3, r3, #16
    4784:	434b      	muls	r3, r1
    4786:	6879      	ldr	r1, [r7, #4]
    4788:	0c36      	lsrs	r6, r6, #16
    478a:	b289      	uxth	r1, r1
    478c:	185b      	adds	r3, r3, r1
    478e:	9905      	ldr	r1, [sp, #20]
    4790:	199b      	adds	r3, r3, r6
    4792:	0c1e      	lsrs	r6, r3, #16
    4794:	42a1      	cmp	r1, r4
    4796:	d8e6      	bhi.n	4766 <__multiply+0xd8>
    4798:	6003      	str	r3, [r0, #0]
    479a:	9b00      	ldr	r3, [sp, #0]
    479c:	3204      	adds	r2, #4
    479e:	3304      	adds	r3, #4
    47a0:	9300      	str	r3, [sp, #0]
    47a2:	e7a0      	b.n	46e6 <__multiply+0x58>
    47a4:	9b01      	ldr	r3, [sp, #4]
    47a6:	3b01      	subs	r3, #1
    47a8:	9301      	str	r3, [sp, #4]
    47aa:	e79f      	b.n	46ec <__multiply+0x5e>

000047ac <__pow5mult>:
    47ac:	2303      	movs	r3, #3
    47ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    47b0:	4013      	ands	r3, r2
    47b2:	0005      	movs	r5, r0
    47b4:	000e      	movs	r6, r1
    47b6:	0014      	movs	r4, r2
    47b8:	2b00      	cmp	r3, #0
    47ba:	d008      	beq.n	47ce <__pow5mult+0x22>
    47bc:	4922      	ldr	r1, [pc, #136]	; (4848 <__pow5mult+0x9c>)
    47be:	3b01      	subs	r3, #1
    47c0:	009a      	lsls	r2, r3, #2
    47c2:	5852      	ldr	r2, [r2, r1]
    47c4:	2300      	movs	r3, #0
    47c6:	0031      	movs	r1, r6
    47c8:	f7ff fed3 	bl	4572 <__multadd>
    47cc:	0006      	movs	r6, r0
    47ce:	10a3      	asrs	r3, r4, #2
    47d0:	9301      	str	r3, [sp, #4]
    47d2:	d036      	beq.n	4842 <__pow5mult+0x96>
    47d4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    47d6:	2c00      	cmp	r4, #0
    47d8:	d107      	bne.n	47ea <__pow5mult+0x3e>
    47da:	2010      	movs	r0, #16
    47dc:	f7ff fc9a 	bl	4114 <malloc>
    47e0:	6268      	str	r0, [r5, #36]	; 0x24
    47e2:	6044      	str	r4, [r0, #4]
    47e4:	6084      	str	r4, [r0, #8]
    47e6:	6004      	str	r4, [r0, #0]
    47e8:	60c4      	str	r4, [r0, #12]
    47ea:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    47ec:	68bc      	ldr	r4, [r7, #8]
    47ee:	2c00      	cmp	r4, #0
    47f0:	d107      	bne.n	4802 <__pow5mult+0x56>
    47f2:	4916      	ldr	r1, [pc, #88]	; (484c <__pow5mult+0xa0>)
    47f4:	0028      	movs	r0, r5
    47f6:	f7ff ff41 	bl	467c <__i2b>
    47fa:	2300      	movs	r3, #0
    47fc:	0004      	movs	r4, r0
    47fe:	60b8      	str	r0, [r7, #8]
    4800:	6003      	str	r3, [r0, #0]
    4802:	2201      	movs	r2, #1
    4804:	9b01      	ldr	r3, [sp, #4]
    4806:	4213      	tst	r3, r2
    4808:	d00a      	beq.n	4820 <__pow5mult+0x74>
    480a:	0031      	movs	r1, r6
    480c:	0022      	movs	r2, r4
    480e:	0028      	movs	r0, r5
    4810:	f7ff ff3d 	bl	468e <__multiply>
    4814:	0007      	movs	r7, r0
    4816:	0031      	movs	r1, r6
    4818:	0028      	movs	r0, r5
    481a:	f7ff fe91 	bl	4540 <_Bfree>
    481e:	003e      	movs	r6, r7
    4820:	9b01      	ldr	r3, [sp, #4]
    4822:	105b      	asrs	r3, r3, #1
    4824:	9301      	str	r3, [sp, #4]
    4826:	d00c      	beq.n	4842 <__pow5mult+0x96>
    4828:	6820      	ldr	r0, [r4, #0]
    482a:	2800      	cmp	r0, #0
    482c:	d107      	bne.n	483e <__pow5mult+0x92>
    482e:	0022      	movs	r2, r4
    4830:	0021      	movs	r1, r4
    4832:	0028      	movs	r0, r5
    4834:	f7ff ff2b 	bl	468e <__multiply>
    4838:	2300      	movs	r3, #0
    483a:	6020      	str	r0, [r4, #0]
    483c:	6003      	str	r3, [r0, #0]
    483e:	0004      	movs	r4, r0
    4840:	e7df      	b.n	4802 <__pow5mult+0x56>
    4842:	0030      	movs	r0, r6
    4844:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4846:	46c0      	nop			; (mov r8, r8)
    4848:	000063d0 	.word	0x000063d0
    484c:	00000271 	.word	0x00000271

00004850 <__lshift>:
    4850:	b5f0      	push	{r4, r5, r6, r7, lr}
    4852:	000d      	movs	r5, r1
    4854:	0017      	movs	r7, r2
    4856:	692b      	ldr	r3, [r5, #16]
    4858:	1154      	asrs	r4, r2, #5
    485a:	b085      	sub	sp, #20
    485c:	18e3      	adds	r3, r4, r3
    485e:	9302      	str	r3, [sp, #8]
    4860:	3301      	adds	r3, #1
    4862:	9301      	str	r3, [sp, #4]
    4864:	6849      	ldr	r1, [r1, #4]
    4866:	68ab      	ldr	r3, [r5, #8]
    4868:	9003      	str	r0, [sp, #12]
    486a:	9a01      	ldr	r2, [sp, #4]
    486c:	4293      	cmp	r3, r2
    486e:	db34      	blt.n	48da <__lshift+0x8a>
    4870:	9803      	ldr	r0, [sp, #12]
    4872:	f7ff fe2d 	bl	44d0 <_Balloc>
    4876:	2300      	movs	r3, #0
    4878:	0002      	movs	r2, r0
    487a:	0006      	movs	r6, r0
    487c:	0019      	movs	r1, r3
    487e:	3214      	adds	r2, #20
    4880:	42a3      	cmp	r3, r4
    4882:	db2d      	blt.n	48e0 <__lshift+0x90>
    4884:	43e3      	mvns	r3, r4
    4886:	17db      	asrs	r3, r3, #31
    4888:	401c      	ands	r4, r3
    488a:	002b      	movs	r3, r5
    488c:	211f      	movs	r1, #31
    488e:	00a4      	lsls	r4, r4, #2
    4890:	1914      	adds	r4, r2, r4
    4892:	692a      	ldr	r2, [r5, #16]
    4894:	3314      	adds	r3, #20
    4896:	0092      	lsls	r2, r2, #2
    4898:	189a      	adds	r2, r3, r2
    489a:	400f      	ands	r7, r1
    489c:	d024      	beq.n	48e8 <__lshift+0x98>
    489e:	3101      	adds	r1, #1
    48a0:	1bc9      	subs	r1, r1, r7
    48a2:	468c      	mov	ip, r1
    48a4:	2100      	movs	r1, #0
    48a6:	6818      	ldr	r0, [r3, #0]
    48a8:	40b8      	lsls	r0, r7
    48aa:	4301      	orrs	r1, r0
    48ac:	4660      	mov	r0, ip
    48ae:	6021      	str	r1, [r4, #0]
    48b0:	cb02      	ldmia	r3!, {r1}
    48b2:	3404      	adds	r4, #4
    48b4:	40c1      	lsrs	r1, r0
    48b6:	429a      	cmp	r2, r3
    48b8:	d8f5      	bhi.n	48a6 <__lshift+0x56>
    48ba:	6021      	str	r1, [r4, #0]
    48bc:	2900      	cmp	r1, #0
    48be:	d002      	beq.n	48c6 <__lshift+0x76>
    48c0:	9b02      	ldr	r3, [sp, #8]
    48c2:	3302      	adds	r3, #2
    48c4:	9301      	str	r3, [sp, #4]
    48c6:	9b01      	ldr	r3, [sp, #4]
    48c8:	9803      	ldr	r0, [sp, #12]
    48ca:	3b01      	subs	r3, #1
    48cc:	6133      	str	r3, [r6, #16]
    48ce:	0029      	movs	r1, r5
    48d0:	f7ff fe36 	bl	4540 <_Bfree>
    48d4:	0030      	movs	r0, r6
    48d6:	b005      	add	sp, #20
    48d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48da:	3101      	adds	r1, #1
    48dc:	005b      	lsls	r3, r3, #1
    48de:	e7c4      	b.n	486a <__lshift+0x1a>
    48e0:	0098      	lsls	r0, r3, #2
    48e2:	5011      	str	r1, [r2, r0]
    48e4:	3301      	adds	r3, #1
    48e6:	e7cb      	b.n	4880 <__lshift+0x30>
    48e8:	cb02      	ldmia	r3!, {r1}
    48ea:	c402      	stmia	r4!, {r1}
    48ec:	429a      	cmp	r2, r3
    48ee:	d8fb      	bhi.n	48e8 <__lshift+0x98>
    48f0:	e7e9      	b.n	48c6 <__lshift+0x76>

000048f2 <__mcmp>:
    48f2:	690a      	ldr	r2, [r1, #16]
    48f4:	6903      	ldr	r3, [r0, #16]
    48f6:	b530      	push	{r4, r5, lr}
    48f8:	1a9b      	subs	r3, r3, r2
    48fa:	d10e      	bne.n	491a <__mcmp+0x28>
    48fc:	0092      	lsls	r2, r2, #2
    48fe:	3014      	adds	r0, #20
    4900:	3114      	adds	r1, #20
    4902:	1884      	adds	r4, r0, r2
    4904:	1889      	adds	r1, r1, r2
    4906:	3c04      	subs	r4, #4
    4908:	3904      	subs	r1, #4
    490a:	6822      	ldr	r2, [r4, #0]
    490c:	680d      	ldr	r5, [r1, #0]
    490e:	42aa      	cmp	r2, r5
    4910:	d005      	beq.n	491e <__mcmp+0x2c>
    4912:	42aa      	cmp	r2, r5
    4914:	4192      	sbcs	r2, r2
    4916:	2301      	movs	r3, #1
    4918:	4313      	orrs	r3, r2
    491a:	0018      	movs	r0, r3
    491c:	bd30      	pop	{r4, r5, pc}
    491e:	42a0      	cmp	r0, r4
    4920:	d3f1      	bcc.n	4906 <__mcmp+0x14>
    4922:	e7fa      	b.n	491a <__mcmp+0x28>

00004924 <__mdiff>:
    4924:	b5f0      	push	{r4, r5, r6, r7, lr}
    4926:	000d      	movs	r5, r1
    4928:	b085      	sub	sp, #20
    492a:	0007      	movs	r7, r0
    492c:	0011      	movs	r1, r2
    492e:	0028      	movs	r0, r5
    4930:	0014      	movs	r4, r2
    4932:	f7ff ffde 	bl	48f2 <__mcmp>
    4936:	1e06      	subs	r6, r0, #0
    4938:	d108      	bne.n	494c <__mdiff+0x28>
    493a:	0001      	movs	r1, r0
    493c:	0038      	movs	r0, r7
    493e:	f7ff fdc7 	bl	44d0 <_Balloc>
    4942:	2301      	movs	r3, #1
    4944:	6146      	str	r6, [r0, #20]
    4946:	6103      	str	r3, [r0, #16]
    4948:	b005      	add	sp, #20
    494a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    494c:	2301      	movs	r3, #1
    494e:	9301      	str	r3, [sp, #4]
    4950:	2800      	cmp	r0, #0
    4952:	db04      	blt.n	495e <__mdiff+0x3a>
    4954:	0023      	movs	r3, r4
    4956:	002c      	movs	r4, r5
    4958:	001d      	movs	r5, r3
    495a:	2300      	movs	r3, #0
    495c:	9301      	str	r3, [sp, #4]
    495e:	6861      	ldr	r1, [r4, #4]
    4960:	0038      	movs	r0, r7
    4962:	f7ff fdb5 	bl	44d0 <_Balloc>
    4966:	002f      	movs	r7, r5
    4968:	2200      	movs	r2, #0
    496a:	9b01      	ldr	r3, [sp, #4]
    496c:	6926      	ldr	r6, [r4, #16]
    496e:	60c3      	str	r3, [r0, #12]
    4970:	3414      	adds	r4, #20
    4972:	00b3      	lsls	r3, r6, #2
    4974:	18e3      	adds	r3, r4, r3
    4976:	9302      	str	r3, [sp, #8]
    4978:	692b      	ldr	r3, [r5, #16]
    497a:	3714      	adds	r7, #20
    497c:	009b      	lsls	r3, r3, #2
    497e:	18fb      	adds	r3, r7, r3
    4980:	9303      	str	r3, [sp, #12]
    4982:	0003      	movs	r3, r0
    4984:	4694      	mov	ip, r2
    4986:	3314      	adds	r3, #20
    4988:	cc20      	ldmia	r4!, {r5}
    498a:	cf04      	ldmia	r7!, {r2}
    498c:	9201      	str	r2, [sp, #4]
    498e:	b2aa      	uxth	r2, r5
    4990:	4494      	add	ip, r2
    4992:	466a      	mov	r2, sp
    4994:	4661      	mov	r1, ip
    4996:	8892      	ldrh	r2, [r2, #4]
    4998:	0c2d      	lsrs	r5, r5, #16
    499a:	1a8a      	subs	r2, r1, r2
    499c:	9901      	ldr	r1, [sp, #4]
    499e:	0c09      	lsrs	r1, r1, #16
    49a0:	1a69      	subs	r1, r5, r1
    49a2:	1415      	asrs	r5, r2, #16
    49a4:	1949      	adds	r1, r1, r5
    49a6:	140d      	asrs	r5, r1, #16
    49a8:	b292      	uxth	r2, r2
    49aa:	0409      	lsls	r1, r1, #16
    49ac:	430a      	orrs	r2, r1
    49ae:	601a      	str	r2, [r3, #0]
    49b0:	9a03      	ldr	r2, [sp, #12]
    49b2:	46ac      	mov	ip, r5
    49b4:	3304      	adds	r3, #4
    49b6:	42ba      	cmp	r2, r7
    49b8:	d8e6      	bhi.n	4988 <__mdiff+0x64>
    49ba:	9902      	ldr	r1, [sp, #8]
    49bc:	001a      	movs	r2, r3
    49be:	428c      	cmp	r4, r1
    49c0:	d305      	bcc.n	49ce <__mdiff+0xaa>
    49c2:	3a04      	subs	r2, #4
    49c4:	6813      	ldr	r3, [r2, #0]
    49c6:	2b00      	cmp	r3, #0
    49c8:	d00e      	beq.n	49e8 <__mdiff+0xc4>
    49ca:	6106      	str	r6, [r0, #16]
    49cc:	e7bc      	b.n	4948 <__mdiff+0x24>
    49ce:	cc04      	ldmia	r4!, {r2}
    49d0:	b291      	uxth	r1, r2
    49d2:	4461      	add	r1, ip
    49d4:	140d      	asrs	r5, r1, #16
    49d6:	0c12      	lsrs	r2, r2, #16
    49d8:	1952      	adds	r2, r2, r5
    49da:	1415      	asrs	r5, r2, #16
    49dc:	b289      	uxth	r1, r1
    49de:	0412      	lsls	r2, r2, #16
    49e0:	430a      	orrs	r2, r1
    49e2:	46ac      	mov	ip, r5
    49e4:	c304      	stmia	r3!, {r2}
    49e6:	e7e8      	b.n	49ba <__mdiff+0x96>
    49e8:	3e01      	subs	r6, #1
    49ea:	e7ea      	b.n	49c2 <__mdiff+0x9e>

000049ec <__d2b>:
    49ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    49ee:	001d      	movs	r5, r3
    49f0:	2101      	movs	r1, #1
    49f2:	9f08      	ldr	r7, [sp, #32]
    49f4:	0014      	movs	r4, r2
    49f6:	f7ff fd6b 	bl	44d0 <_Balloc>
    49fa:	032b      	lsls	r3, r5, #12
    49fc:	006d      	lsls	r5, r5, #1
    49fe:	0006      	movs	r6, r0
    4a00:	0b1b      	lsrs	r3, r3, #12
    4a02:	0d6d      	lsrs	r5, r5, #21
    4a04:	d124      	bne.n	4a50 <__d2b+0x64>
    4a06:	9301      	str	r3, [sp, #4]
    4a08:	2c00      	cmp	r4, #0
    4a0a:	d027      	beq.n	4a5c <__d2b+0x70>
    4a0c:	4668      	mov	r0, sp
    4a0e:	9400      	str	r4, [sp, #0]
    4a10:	f7ff fe05 	bl	461e <__lo0bits>
    4a14:	9c00      	ldr	r4, [sp, #0]
    4a16:	2800      	cmp	r0, #0
    4a18:	d01e      	beq.n	4a58 <__d2b+0x6c>
    4a1a:	9b01      	ldr	r3, [sp, #4]
    4a1c:	2120      	movs	r1, #32
    4a1e:	001a      	movs	r2, r3
    4a20:	1a09      	subs	r1, r1, r0
    4a22:	408a      	lsls	r2, r1
    4a24:	40c3      	lsrs	r3, r0
    4a26:	4322      	orrs	r2, r4
    4a28:	6172      	str	r2, [r6, #20]
    4a2a:	9301      	str	r3, [sp, #4]
    4a2c:	9c01      	ldr	r4, [sp, #4]
    4a2e:	61b4      	str	r4, [r6, #24]
    4a30:	1e63      	subs	r3, r4, #1
    4a32:	419c      	sbcs	r4, r3
    4a34:	3401      	adds	r4, #1
    4a36:	6134      	str	r4, [r6, #16]
    4a38:	2d00      	cmp	r5, #0
    4a3a:	d018      	beq.n	4a6e <__d2b+0x82>
    4a3c:	4b12      	ldr	r3, [pc, #72]	; (4a88 <__d2b+0x9c>)
    4a3e:	18ed      	adds	r5, r5, r3
    4a40:	2335      	movs	r3, #53	; 0x35
    4a42:	182d      	adds	r5, r5, r0
    4a44:	603d      	str	r5, [r7, #0]
    4a46:	1a18      	subs	r0, r3, r0
    4a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a4a:	6018      	str	r0, [r3, #0]
    4a4c:	0030      	movs	r0, r6
    4a4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4a50:	2280      	movs	r2, #128	; 0x80
    4a52:	0352      	lsls	r2, r2, #13
    4a54:	4313      	orrs	r3, r2
    4a56:	e7d6      	b.n	4a06 <__d2b+0x1a>
    4a58:	6174      	str	r4, [r6, #20]
    4a5a:	e7e7      	b.n	4a2c <__d2b+0x40>
    4a5c:	a801      	add	r0, sp, #4
    4a5e:	f7ff fdde 	bl	461e <__lo0bits>
    4a62:	2401      	movs	r4, #1
    4a64:	9b01      	ldr	r3, [sp, #4]
    4a66:	6134      	str	r4, [r6, #16]
    4a68:	6173      	str	r3, [r6, #20]
    4a6a:	3020      	adds	r0, #32
    4a6c:	e7e4      	b.n	4a38 <__d2b+0x4c>
    4a6e:	4b07      	ldr	r3, [pc, #28]	; (4a8c <__d2b+0xa0>)
    4a70:	18c0      	adds	r0, r0, r3
    4a72:	4b07      	ldr	r3, [pc, #28]	; (4a90 <__d2b+0xa4>)
    4a74:	6038      	str	r0, [r7, #0]
    4a76:	18e3      	adds	r3, r4, r3
    4a78:	009b      	lsls	r3, r3, #2
    4a7a:	18f3      	adds	r3, r6, r3
    4a7c:	6958      	ldr	r0, [r3, #20]
    4a7e:	f7ff fdb4 	bl	45ea <__hi0bits>
    4a82:	0164      	lsls	r4, r4, #5
    4a84:	1a20      	subs	r0, r4, r0
    4a86:	e7df      	b.n	4a48 <__d2b+0x5c>
    4a88:	fffffbcd 	.word	0xfffffbcd
    4a8c:	fffffbce 	.word	0xfffffbce
    4a90:	3fffffff 	.word	0x3fffffff

00004a94 <_mprec_log10>:
    4a94:	b510      	push	{r4, lr}
    4a96:	0004      	movs	r4, r0
    4a98:	2817      	cmp	r0, #23
    4a9a:	dc05      	bgt.n	4aa8 <_mprec_log10+0x14>
    4a9c:	4b07      	ldr	r3, [pc, #28]	; (4abc <_mprec_log10+0x28>)
    4a9e:	00c4      	lsls	r4, r0, #3
    4aa0:	191c      	adds	r4, r3, r4
    4aa2:	6820      	ldr	r0, [r4, #0]
    4aa4:	6861      	ldr	r1, [r4, #4]
    4aa6:	bd10      	pop	{r4, pc}
    4aa8:	2000      	movs	r0, #0
    4aaa:	4905      	ldr	r1, [pc, #20]	; (4ac0 <_mprec_log10+0x2c>)
    4aac:	2200      	movs	r2, #0
    4aae:	4b05      	ldr	r3, [pc, #20]	; (4ac4 <_mprec_log10+0x30>)
    4ab0:	3c01      	subs	r4, #1
    4ab2:	f7fe fa11 	bl	2ed8 <__aeabi_dmul>
    4ab6:	2c00      	cmp	r4, #0
    4ab8:	d1f8      	bne.n	4aac <_mprec_log10+0x18>
    4aba:	e7f4      	b.n	4aa6 <_mprec_log10+0x12>
    4abc:	00006308 	.word	0x00006308
    4ac0:	3ff00000 	.word	0x3ff00000
    4ac4:	40240000 	.word	0x40240000

00004ac8 <_calloc_r>:
    4ac8:	434a      	muls	r2, r1
    4aca:	b570      	push	{r4, r5, r6, lr}
    4acc:	0011      	movs	r1, r2
    4ace:	0014      	movs	r4, r2
    4ad0:	f7ff fb3c 	bl	414c <_malloc_r>
    4ad4:	1e05      	subs	r5, r0, #0
    4ad6:	d003      	beq.n	4ae0 <_calloc_r+0x18>
    4ad8:	0022      	movs	r2, r4
    4ada:	2100      	movs	r1, #0
    4adc:	f7ff fb2d 	bl	413a <memset>
    4ae0:	0028      	movs	r0, r5
    4ae2:	bd70      	pop	{r4, r5, r6, pc}

00004ae4 <strcpy>:
    4ae4:	1c03      	adds	r3, r0, #0
    4ae6:	780a      	ldrb	r2, [r1, #0]
    4ae8:	3101      	adds	r1, #1
    4aea:	701a      	strb	r2, [r3, #0]
    4aec:	3301      	adds	r3, #1
    4aee:	2a00      	cmp	r2, #0
    4af0:	d1f9      	bne.n	4ae6 <strcpy+0x2>
    4af2:	4770      	bx	lr

00004af4 <quorem>:
    4af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4af6:	6903      	ldr	r3, [r0, #16]
    4af8:	690c      	ldr	r4, [r1, #16]
    4afa:	b089      	sub	sp, #36	; 0x24
    4afc:	0007      	movs	r7, r0
    4afe:	9105      	str	r1, [sp, #20]
    4b00:	2600      	movs	r6, #0
    4b02:	429c      	cmp	r4, r3
    4b04:	dc6d      	bgt.n	4be2 <quorem+0xee>
    4b06:	000b      	movs	r3, r1
    4b08:	3c01      	subs	r4, #1
    4b0a:	3314      	adds	r3, #20
    4b0c:	00a5      	lsls	r5, r4, #2
    4b0e:	9303      	str	r3, [sp, #12]
    4b10:	195b      	adds	r3, r3, r5
    4b12:	9304      	str	r3, [sp, #16]
    4b14:	0003      	movs	r3, r0
    4b16:	3314      	adds	r3, #20
    4b18:	9302      	str	r3, [sp, #8]
    4b1a:	195d      	adds	r5, r3, r5
    4b1c:	9b04      	ldr	r3, [sp, #16]
    4b1e:	6828      	ldr	r0, [r5, #0]
    4b20:	681b      	ldr	r3, [r3, #0]
    4b22:	1c59      	adds	r1, r3, #1
    4b24:	9301      	str	r3, [sp, #4]
    4b26:	f7fc fb76 	bl	1216 <__aeabi_uidiv>
    4b2a:	9001      	str	r0, [sp, #4]
    4b2c:	42b0      	cmp	r0, r6
    4b2e:	d02d      	beq.n	4b8c <quorem+0x98>
    4b30:	9b03      	ldr	r3, [sp, #12]
    4b32:	9802      	ldr	r0, [sp, #8]
    4b34:	469c      	mov	ip, r3
    4b36:	9606      	str	r6, [sp, #24]
    4b38:	4662      	mov	r2, ip
    4b3a:	ca08      	ldmia	r2!, {r3}
    4b3c:	4694      	mov	ip, r2
    4b3e:	9a01      	ldr	r2, [sp, #4]
    4b40:	b299      	uxth	r1, r3
    4b42:	4351      	muls	r1, r2
    4b44:	0c1b      	lsrs	r3, r3, #16
    4b46:	4353      	muls	r3, r2
    4b48:	1989      	adds	r1, r1, r6
    4b4a:	0c0a      	lsrs	r2, r1, #16
    4b4c:	189b      	adds	r3, r3, r2
    4b4e:	9307      	str	r3, [sp, #28]
    4b50:	8802      	ldrh	r2, [r0, #0]
    4b52:	0c1e      	lsrs	r6, r3, #16
    4b54:	9b06      	ldr	r3, [sp, #24]
    4b56:	b289      	uxth	r1, r1
    4b58:	18d2      	adds	r2, r2, r3
    4b5a:	6803      	ldr	r3, [r0, #0]
    4b5c:	1a52      	subs	r2, r2, r1
    4b5e:	0c19      	lsrs	r1, r3, #16
    4b60:	466b      	mov	r3, sp
    4b62:	8b9b      	ldrh	r3, [r3, #28]
    4b64:	1acb      	subs	r3, r1, r3
    4b66:	1411      	asrs	r1, r2, #16
    4b68:	185b      	adds	r3, r3, r1
    4b6a:	1419      	asrs	r1, r3, #16
    4b6c:	b292      	uxth	r2, r2
    4b6e:	041b      	lsls	r3, r3, #16
    4b70:	431a      	orrs	r2, r3
    4b72:	9b04      	ldr	r3, [sp, #16]
    4b74:	9106      	str	r1, [sp, #24]
    4b76:	c004      	stmia	r0!, {r2}
    4b78:	4563      	cmp	r3, ip
    4b7a:	d2dd      	bcs.n	4b38 <quorem+0x44>
    4b7c:	682b      	ldr	r3, [r5, #0]
    4b7e:	2b00      	cmp	r3, #0
    4b80:	d104      	bne.n	4b8c <quorem+0x98>
    4b82:	9b02      	ldr	r3, [sp, #8]
    4b84:	3d04      	subs	r5, #4
    4b86:	42ab      	cmp	r3, r5
    4b88:	d32e      	bcc.n	4be8 <quorem+0xf4>
    4b8a:	613c      	str	r4, [r7, #16]
    4b8c:	9905      	ldr	r1, [sp, #20]
    4b8e:	0038      	movs	r0, r7
    4b90:	f7ff feaf 	bl	48f2 <__mcmp>
    4b94:	2800      	cmp	r0, #0
    4b96:	db23      	blt.n	4be0 <quorem+0xec>
    4b98:	2500      	movs	r5, #0
    4b9a:	9b01      	ldr	r3, [sp, #4]
    4b9c:	9802      	ldr	r0, [sp, #8]
    4b9e:	3301      	adds	r3, #1
    4ba0:	9903      	ldr	r1, [sp, #12]
    4ba2:	9301      	str	r3, [sp, #4]
    4ba4:	c908      	ldmia	r1!, {r3}
    4ba6:	8802      	ldrh	r2, [r0, #0]
    4ba8:	1955      	adds	r5, r2, r5
    4baa:	b29a      	uxth	r2, r3
    4bac:	1aaa      	subs	r2, r5, r2
    4bae:	6805      	ldr	r5, [r0, #0]
    4bb0:	0c1b      	lsrs	r3, r3, #16
    4bb2:	0c2d      	lsrs	r5, r5, #16
    4bb4:	1aeb      	subs	r3, r5, r3
    4bb6:	1415      	asrs	r5, r2, #16
    4bb8:	195b      	adds	r3, r3, r5
    4bba:	141d      	asrs	r5, r3, #16
    4bbc:	b292      	uxth	r2, r2
    4bbe:	041b      	lsls	r3, r3, #16
    4bc0:	4313      	orrs	r3, r2
    4bc2:	c008      	stmia	r0!, {r3}
    4bc4:	9b04      	ldr	r3, [sp, #16]
    4bc6:	428b      	cmp	r3, r1
    4bc8:	d2ec      	bcs.n	4ba4 <quorem+0xb0>
    4bca:	9a02      	ldr	r2, [sp, #8]
    4bcc:	00a3      	lsls	r3, r4, #2
    4bce:	18d3      	adds	r3, r2, r3
    4bd0:	681a      	ldr	r2, [r3, #0]
    4bd2:	2a00      	cmp	r2, #0
    4bd4:	d104      	bne.n	4be0 <quorem+0xec>
    4bd6:	9a02      	ldr	r2, [sp, #8]
    4bd8:	3b04      	subs	r3, #4
    4bda:	429a      	cmp	r2, r3
    4bdc:	d309      	bcc.n	4bf2 <quorem+0xfe>
    4bde:	613c      	str	r4, [r7, #16]
    4be0:	9e01      	ldr	r6, [sp, #4]
    4be2:	0030      	movs	r0, r6
    4be4:	b009      	add	sp, #36	; 0x24
    4be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4be8:	682b      	ldr	r3, [r5, #0]
    4bea:	2b00      	cmp	r3, #0
    4bec:	d1cd      	bne.n	4b8a <quorem+0x96>
    4bee:	3c01      	subs	r4, #1
    4bf0:	e7c7      	b.n	4b82 <quorem+0x8e>
    4bf2:	681a      	ldr	r2, [r3, #0]
    4bf4:	2a00      	cmp	r2, #0
    4bf6:	d1f2      	bne.n	4bde <quorem+0xea>
    4bf8:	3c01      	subs	r4, #1
    4bfa:	e7ec      	b.n	4bd6 <quorem+0xe2>

00004bfc <_dtoa_r>:
    4bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bfe:	0016      	movs	r6, r2
    4c00:	001f      	movs	r7, r3
    4c02:	6a44      	ldr	r4, [r0, #36]	; 0x24
    4c04:	b09d      	sub	sp, #116	; 0x74
    4c06:	9004      	str	r0, [sp, #16]
    4c08:	9d25      	ldr	r5, [sp, #148]	; 0x94
    4c0a:	9606      	str	r6, [sp, #24]
    4c0c:	9707      	str	r7, [sp, #28]
    4c0e:	2c00      	cmp	r4, #0
    4c10:	d108      	bne.n	4c24 <_dtoa_r+0x28>
    4c12:	2010      	movs	r0, #16
    4c14:	f7ff fa7e 	bl	4114 <malloc>
    4c18:	9b04      	ldr	r3, [sp, #16]
    4c1a:	6258      	str	r0, [r3, #36]	; 0x24
    4c1c:	6044      	str	r4, [r0, #4]
    4c1e:	6084      	str	r4, [r0, #8]
    4c20:	6004      	str	r4, [r0, #0]
    4c22:	60c4      	str	r4, [r0, #12]
    4c24:	9b04      	ldr	r3, [sp, #16]
    4c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4c28:	6819      	ldr	r1, [r3, #0]
    4c2a:	2900      	cmp	r1, #0
    4c2c:	d00b      	beq.n	4c46 <_dtoa_r+0x4a>
    4c2e:	685a      	ldr	r2, [r3, #4]
    4c30:	2301      	movs	r3, #1
    4c32:	4093      	lsls	r3, r2
    4c34:	604a      	str	r2, [r1, #4]
    4c36:	608b      	str	r3, [r1, #8]
    4c38:	9804      	ldr	r0, [sp, #16]
    4c3a:	f7ff fc81 	bl	4540 <_Bfree>
    4c3e:	2200      	movs	r2, #0
    4c40:	9b04      	ldr	r3, [sp, #16]
    4c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4c44:	601a      	str	r2, [r3, #0]
    4c46:	9b07      	ldr	r3, [sp, #28]
    4c48:	2b00      	cmp	r3, #0
    4c4a:	da1f      	bge.n	4c8c <_dtoa_r+0x90>
    4c4c:	2301      	movs	r3, #1
    4c4e:	602b      	str	r3, [r5, #0]
    4c50:	007b      	lsls	r3, r7, #1
    4c52:	085b      	lsrs	r3, r3, #1
    4c54:	9307      	str	r3, [sp, #28]
    4c56:	9c07      	ldr	r4, [sp, #28]
    4c58:	4bb7      	ldr	r3, [pc, #732]	; (4f38 <_dtoa_r+0x33c>)
    4c5a:	0022      	movs	r2, r4
    4c5c:	9319      	str	r3, [sp, #100]	; 0x64
    4c5e:	401a      	ands	r2, r3
    4c60:	429a      	cmp	r2, r3
    4c62:	d116      	bne.n	4c92 <_dtoa_r+0x96>
    4c64:	4bb5      	ldr	r3, [pc, #724]	; (4f3c <_dtoa_r+0x340>)
    4c66:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4c68:	6013      	str	r3, [r2, #0]
    4c6a:	9b06      	ldr	r3, [sp, #24]
    4c6c:	2b00      	cmp	r3, #0
    4c6e:	d103      	bne.n	4c78 <_dtoa_r+0x7c>
    4c70:	0324      	lsls	r4, r4, #12
    4c72:	d101      	bne.n	4c78 <_dtoa_r+0x7c>
    4c74:	f000 fd91 	bl	579a <_dtoa_r+0xb9e>
    4c78:	4bb1      	ldr	r3, [pc, #708]	; (4f40 <_dtoa_r+0x344>)
    4c7a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4c7c:	930a      	str	r3, [sp, #40]	; 0x28
    4c7e:	4bb1      	ldr	r3, [pc, #708]	; (4f44 <_dtoa_r+0x348>)
    4c80:	2a00      	cmp	r2, #0
    4c82:	d001      	beq.n	4c88 <_dtoa_r+0x8c>
    4c84:	f000 fd8f 	bl	57a6 <_dtoa_r+0xbaa>
    4c88:	f000 fd8f 	bl	57aa <_dtoa_r+0xbae>
    4c8c:	2300      	movs	r3, #0
    4c8e:	602b      	str	r3, [r5, #0]
    4c90:	e7e1      	b.n	4c56 <_dtoa_r+0x5a>
    4c92:	9e06      	ldr	r6, [sp, #24]
    4c94:	9f07      	ldr	r7, [sp, #28]
    4c96:	2200      	movs	r2, #0
    4c98:	2300      	movs	r3, #0
    4c9a:	0030      	movs	r0, r6
    4c9c:	0039      	movs	r1, r7
    4c9e:	f7fe ffc1 	bl	3c24 <__aeabi_dcmpeq>
    4ca2:	1e05      	subs	r5, r0, #0
    4ca4:	d00e      	beq.n	4cc4 <_dtoa_r+0xc8>
    4ca6:	2301      	movs	r3, #1
    4ca8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4caa:	6013      	str	r3, [r2, #0]
    4cac:	4ba6      	ldr	r3, [pc, #664]	; (4f48 <_dtoa_r+0x34c>)
    4cae:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4cb0:	930a      	str	r3, [sp, #40]	; 0x28
    4cb2:	2a00      	cmp	r2, #0
    4cb4:	d101      	bne.n	4cba <_dtoa_r+0xbe>
    4cb6:	f000 fd78 	bl	57aa <_dtoa_r+0xbae>
    4cba:	4aa4      	ldr	r2, [pc, #656]	; (4f4c <_dtoa_r+0x350>)
    4cbc:	9926      	ldr	r1, [sp, #152]	; 0x98
    4cbe:	600a      	str	r2, [r1, #0]
    4cc0:	f000 fd73 	bl	57aa <_dtoa_r+0xbae>
    4cc4:	ab1a      	add	r3, sp, #104	; 0x68
    4cc6:	9301      	str	r3, [sp, #4]
    4cc8:	ab1b      	add	r3, sp, #108	; 0x6c
    4cca:	9300      	str	r3, [sp, #0]
    4ccc:	0032      	movs	r2, r6
    4cce:	003b      	movs	r3, r7
    4cd0:	9804      	ldr	r0, [sp, #16]
    4cd2:	f7ff fe8b 	bl	49ec <__d2b>
    4cd6:	0063      	lsls	r3, r4, #1
    4cd8:	9005      	str	r0, [sp, #20]
    4cda:	0d5b      	lsrs	r3, r3, #21
    4cdc:	d100      	bne.n	4ce0 <_dtoa_r+0xe4>
    4cde:	e07f      	b.n	4de0 <_dtoa_r+0x1e4>
    4ce0:	033a      	lsls	r2, r7, #12
    4ce2:	4c9b      	ldr	r4, [pc, #620]	; (4f50 <_dtoa_r+0x354>)
    4ce4:	0b12      	lsrs	r2, r2, #12
    4ce6:	4314      	orrs	r4, r2
    4ce8:	0021      	movs	r1, r4
    4cea:	4a9a      	ldr	r2, [pc, #616]	; (4f54 <_dtoa_r+0x358>)
    4cec:	0030      	movs	r0, r6
    4cee:	9518      	str	r5, [sp, #96]	; 0x60
    4cf0:	189e      	adds	r6, r3, r2
    4cf2:	2200      	movs	r2, #0
    4cf4:	4b98      	ldr	r3, [pc, #608]	; (4f58 <_dtoa_r+0x35c>)
    4cf6:	f7fe fb6f 	bl	33d8 <__aeabi_dsub>
    4cfa:	4a98      	ldr	r2, [pc, #608]	; (4f5c <_dtoa_r+0x360>)
    4cfc:	4b98      	ldr	r3, [pc, #608]	; (4f60 <_dtoa_r+0x364>)
    4cfe:	f7fe f8eb 	bl	2ed8 <__aeabi_dmul>
    4d02:	4a98      	ldr	r2, [pc, #608]	; (4f64 <_dtoa_r+0x368>)
    4d04:	4b98      	ldr	r3, [pc, #608]	; (4f68 <_dtoa_r+0x36c>)
    4d06:	f000 fd6b 	bl	57e0 <__aeabi_dadd>
    4d0a:	0004      	movs	r4, r0
    4d0c:	0030      	movs	r0, r6
    4d0e:	000d      	movs	r5, r1
    4d10:	f7fe feac 	bl	3a6c <__aeabi_i2d>
    4d14:	4a95      	ldr	r2, [pc, #596]	; (4f6c <_dtoa_r+0x370>)
    4d16:	4b96      	ldr	r3, [pc, #600]	; (4f70 <_dtoa_r+0x374>)
    4d18:	f7fe f8de 	bl	2ed8 <__aeabi_dmul>
    4d1c:	0002      	movs	r2, r0
    4d1e:	000b      	movs	r3, r1
    4d20:	0020      	movs	r0, r4
    4d22:	0029      	movs	r1, r5
    4d24:	f000 fd5c 	bl	57e0 <__aeabi_dadd>
    4d28:	0004      	movs	r4, r0
    4d2a:	000d      	movs	r5, r1
    4d2c:	f7fe fe6a 	bl	3a04 <__aeabi_d2iz>
    4d30:	2200      	movs	r2, #0
    4d32:	9003      	str	r0, [sp, #12]
    4d34:	2300      	movs	r3, #0
    4d36:	0020      	movs	r0, r4
    4d38:	0029      	movs	r1, r5
    4d3a:	f7fe ff79 	bl	3c30 <__aeabi_dcmplt>
    4d3e:	2800      	cmp	r0, #0
    4d40:	d00e      	beq.n	4d60 <_dtoa_r+0x164>
    4d42:	9803      	ldr	r0, [sp, #12]
    4d44:	f7fe fe92 	bl	3a6c <__aeabi_i2d>
    4d48:	000b      	movs	r3, r1
    4d4a:	0002      	movs	r2, r0
    4d4c:	0029      	movs	r1, r5
    4d4e:	0020      	movs	r0, r4
    4d50:	f7fe ff68 	bl	3c24 <__aeabi_dcmpeq>
    4d54:	0003      	movs	r3, r0
    4d56:	4258      	negs	r0, r3
    4d58:	4158      	adcs	r0, r3
    4d5a:	9b03      	ldr	r3, [sp, #12]
    4d5c:	1a1b      	subs	r3, r3, r0
    4d5e:	9303      	str	r3, [sp, #12]
    4d60:	2301      	movs	r3, #1
    4d62:	9316      	str	r3, [sp, #88]	; 0x58
    4d64:	9b03      	ldr	r3, [sp, #12]
    4d66:	2b16      	cmp	r3, #22
    4d68:	d80f      	bhi.n	4d8a <_dtoa_r+0x18e>
    4d6a:	4982      	ldr	r1, [pc, #520]	; (4f74 <_dtoa_r+0x378>)
    4d6c:	00db      	lsls	r3, r3, #3
    4d6e:	18c9      	adds	r1, r1, r3
    4d70:	6808      	ldr	r0, [r1, #0]
    4d72:	6849      	ldr	r1, [r1, #4]
    4d74:	9a06      	ldr	r2, [sp, #24]
    4d76:	9b07      	ldr	r3, [sp, #28]
    4d78:	f7fe ff6e 	bl	3c58 <__aeabi_dcmpgt>
    4d7c:	2800      	cmp	r0, #0
    4d7e:	d04b      	beq.n	4e18 <_dtoa_r+0x21c>
    4d80:	9b03      	ldr	r3, [sp, #12]
    4d82:	3b01      	subs	r3, #1
    4d84:	9303      	str	r3, [sp, #12]
    4d86:	2300      	movs	r3, #0
    4d88:	9316      	str	r3, [sp, #88]	; 0x58
    4d8a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4d8c:	1b9e      	subs	r6, r3, r6
    4d8e:	2300      	movs	r3, #0
    4d90:	930b      	str	r3, [sp, #44]	; 0x2c
    4d92:	0033      	movs	r3, r6
    4d94:	3b01      	subs	r3, #1
    4d96:	930c      	str	r3, [sp, #48]	; 0x30
    4d98:	d504      	bpl.n	4da4 <_dtoa_r+0x1a8>
    4d9a:	2301      	movs	r3, #1
    4d9c:	1b9b      	subs	r3, r3, r6
    4d9e:	930b      	str	r3, [sp, #44]	; 0x2c
    4da0:	2300      	movs	r3, #0
    4da2:	930c      	str	r3, [sp, #48]	; 0x30
    4da4:	9b03      	ldr	r3, [sp, #12]
    4da6:	2b00      	cmp	r3, #0
    4da8:	db38      	blt.n	4e1c <_dtoa_r+0x220>
    4daa:	9a03      	ldr	r2, [sp, #12]
    4dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4dae:	4694      	mov	ip, r2
    4db0:	4463      	add	r3, ip
    4db2:	930c      	str	r3, [sp, #48]	; 0x30
    4db4:	2300      	movs	r3, #0
    4db6:	920f      	str	r2, [sp, #60]	; 0x3c
    4db8:	9308      	str	r3, [sp, #32]
    4dba:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4dbc:	2501      	movs	r5, #1
    4dbe:	2b09      	cmp	r3, #9
    4dc0:	d900      	bls.n	4dc4 <_dtoa_r+0x1c8>
    4dc2:	e091      	b.n	4ee8 <_dtoa_r+0x2ec>
    4dc4:	2b05      	cmp	r3, #5
    4dc6:	dd02      	ble.n	4dce <_dtoa_r+0x1d2>
    4dc8:	2500      	movs	r5, #0
    4dca:	3b04      	subs	r3, #4
    4dcc:	9322      	str	r3, [sp, #136]	; 0x88
    4dce:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4dd0:	1e98      	subs	r0, r3, #2
    4dd2:	2803      	cmp	r0, #3
    4dd4:	d900      	bls.n	4dd8 <_dtoa_r+0x1dc>
    4dd6:	e091      	b.n	4efc <_dtoa_r+0x300>
    4dd8:	f000 fcf8 	bl	57cc <__gnu_thumb1_case_uqi>
    4ddc:	76298482 	.word	0x76298482
    4de0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4de2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    4de4:	189e      	adds	r6, r3, r2
    4de6:	4b64      	ldr	r3, [pc, #400]	; (4f78 <_dtoa_r+0x37c>)
    4de8:	18f2      	adds	r2, r6, r3
    4dea:	2a20      	cmp	r2, #32
    4dec:	dd0f      	ble.n	4e0e <_dtoa_r+0x212>
    4dee:	4b63      	ldr	r3, [pc, #396]	; (4f7c <_dtoa_r+0x380>)
    4df0:	9806      	ldr	r0, [sp, #24]
    4df2:	18f3      	adds	r3, r6, r3
    4df4:	40d8      	lsrs	r0, r3
    4df6:	2340      	movs	r3, #64	; 0x40
    4df8:	1a9b      	subs	r3, r3, r2
    4dfa:	409c      	lsls	r4, r3
    4dfc:	4320      	orrs	r0, r4
    4dfe:	f7fe fe77 	bl	3af0 <__aeabi_ui2d>
    4e02:	2301      	movs	r3, #1
    4e04:	4c5e      	ldr	r4, [pc, #376]	; (4f80 <_dtoa_r+0x384>)
    4e06:	3e01      	subs	r6, #1
    4e08:	1909      	adds	r1, r1, r4
    4e0a:	9318      	str	r3, [sp, #96]	; 0x60
    4e0c:	e771      	b.n	4cf2 <_dtoa_r+0xf6>
    4e0e:	2320      	movs	r3, #32
    4e10:	9806      	ldr	r0, [sp, #24]
    4e12:	1a9b      	subs	r3, r3, r2
    4e14:	4098      	lsls	r0, r3
    4e16:	e7f2      	b.n	4dfe <_dtoa_r+0x202>
    4e18:	9016      	str	r0, [sp, #88]	; 0x58
    4e1a:	e7b6      	b.n	4d8a <_dtoa_r+0x18e>
    4e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e1e:	9a03      	ldr	r2, [sp, #12]
    4e20:	1a9b      	subs	r3, r3, r2
    4e22:	930b      	str	r3, [sp, #44]	; 0x2c
    4e24:	4253      	negs	r3, r2
    4e26:	9308      	str	r3, [sp, #32]
    4e28:	2300      	movs	r3, #0
    4e2a:	930f      	str	r3, [sp, #60]	; 0x3c
    4e2c:	e7c5      	b.n	4dba <_dtoa_r+0x1be>
    4e2e:	2301      	movs	r3, #1
    4e30:	930e      	str	r3, [sp, #56]	; 0x38
    4e32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4e34:	2b00      	cmp	r3, #0
    4e36:	dd65      	ble.n	4f04 <_dtoa_r+0x308>
    4e38:	001f      	movs	r7, r3
    4e3a:	930d      	str	r3, [sp, #52]	; 0x34
    4e3c:	9a04      	ldr	r2, [sp, #16]
    4e3e:	6a54      	ldr	r4, [r2, #36]	; 0x24
    4e40:	2200      	movs	r2, #0
    4e42:	6062      	str	r2, [r4, #4]
    4e44:	3204      	adds	r2, #4
    4e46:	0011      	movs	r1, r2
    4e48:	3114      	adds	r1, #20
    4e4a:	4299      	cmp	r1, r3
    4e4c:	d95f      	bls.n	4f0e <_dtoa_r+0x312>
    4e4e:	6861      	ldr	r1, [r4, #4]
    4e50:	9804      	ldr	r0, [sp, #16]
    4e52:	f7ff fb3d 	bl	44d0 <_Balloc>
    4e56:	9b04      	ldr	r3, [sp, #16]
    4e58:	6020      	str	r0, [r4, #0]
    4e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4e5c:	681b      	ldr	r3, [r3, #0]
    4e5e:	930a      	str	r3, [sp, #40]	; 0x28
    4e60:	2f0e      	cmp	r7, #14
    4e62:	d900      	bls.n	4e66 <_dtoa_r+0x26a>
    4e64:	e105      	b.n	5072 <_dtoa_r+0x476>
    4e66:	2d00      	cmp	r5, #0
    4e68:	d100      	bne.n	4e6c <_dtoa_r+0x270>
    4e6a:	e102      	b.n	5072 <_dtoa_r+0x476>
    4e6c:	9b06      	ldr	r3, [sp, #24]
    4e6e:	9c07      	ldr	r4, [sp, #28]
    4e70:	9314      	str	r3, [sp, #80]	; 0x50
    4e72:	9415      	str	r4, [sp, #84]	; 0x54
    4e74:	9b03      	ldr	r3, [sp, #12]
    4e76:	2b00      	cmp	r3, #0
    4e78:	dc00      	bgt.n	4e7c <_dtoa_r+0x280>
    4e7a:	e085      	b.n	4f88 <_dtoa_r+0x38c>
    4e7c:	001a      	movs	r2, r3
    4e7e:	210f      	movs	r1, #15
    4e80:	4b3c      	ldr	r3, [pc, #240]	; (4f74 <_dtoa_r+0x378>)
    4e82:	400a      	ands	r2, r1
    4e84:	00d2      	lsls	r2, r2, #3
    4e86:	189b      	adds	r3, r3, r2
    4e88:	685c      	ldr	r4, [r3, #4]
    4e8a:	681b      	ldr	r3, [r3, #0]
    4e8c:	9310      	str	r3, [sp, #64]	; 0x40
    4e8e:	9411      	str	r4, [sp, #68]	; 0x44
    4e90:	9b03      	ldr	r3, [sp, #12]
    4e92:	2402      	movs	r4, #2
    4e94:	111d      	asrs	r5, r3, #4
    4e96:	06eb      	lsls	r3, r5, #27
    4e98:	d50a      	bpl.n	4eb0 <_dtoa_r+0x2b4>
    4e9a:	4b3a      	ldr	r3, [pc, #232]	; (4f84 <_dtoa_r+0x388>)
    4e9c:	400d      	ands	r5, r1
    4e9e:	6a1a      	ldr	r2, [r3, #32]
    4ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4ea2:	9814      	ldr	r0, [sp, #80]	; 0x50
    4ea4:	9915      	ldr	r1, [sp, #84]	; 0x54
    4ea6:	f7fd fce3 	bl	2870 <__aeabi_ddiv>
    4eaa:	9006      	str	r0, [sp, #24]
    4eac:	9107      	str	r1, [sp, #28]
    4eae:	3401      	adds	r4, #1
    4eb0:	4e34      	ldr	r6, [pc, #208]	; (4f84 <_dtoa_r+0x388>)
    4eb2:	2d00      	cmp	r5, #0
    4eb4:	d130      	bne.n	4f18 <_dtoa_r+0x31c>
    4eb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4eba:	9806      	ldr	r0, [sp, #24]
    4ebc:	9907      	ldr	r1, [sp, #28]
    4ebe:	f7fd fcd7 	bl	2870 <__aeabi_ddiv>
    4ec2:	9006      	str	r0, [sp, #24]
    4ec4:	9107      	str	r1, [sp, #28]
    4ec6:	e07a      	b.n	4fbe <_dtoa_r+0x3c2>
    4ec8:	2301      	movs	r3, #1
    4eca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    4ecc:	930e      	str	r3, [sp, #56]	; 0x38
    4ece:	4694      	mov	ip, r2
    4ed0:	9b03      	ldr	r3, [sp, #12]
    4ed2:	4463      	add	r3, ip
    4ed4:	1c5f      	adds	r7, r3, #1
    4ed6:	930d      	str	r3, [sp, #52]	; 0x34
    4ed8:	1e3b      	subs	r3, r7, #0
    4eda:	dcaf      	bgt.n	4e3c <_dtoa_r+0x240>
    4edc:	2301      	movs	r3, #1
    4ede:	e7ad      	b.n	4e3c <_dtoa_r+0x240>
    4ee0:	2300      	movs	r3, #0
    4ee2:	e7a5      	b.n	4e30 <_dtoa_r+0x234>
    4ee4:	2300      	movs	r3, #0
    4ee6:	e7f0      	b.n	4eca <_dtoa_r+0x2ce>
    4ee8:	2300      	movs	r3, #0
    4eea:	950e      	str	r5, [sp, #56]	; 0x38
    4eec:	9322      	str	r3, [sp, #136]	; 0x88
    4eee:	3b01      	subs	r3, #1
    4ef0:	2200      	movs	r2, #0
    4ef2:	930d      	str	r3, [sp, #52]	; 0x34
    4ef4:	001f      	movs	r7, r3
    4ef6:	3313      	adds	r3, #19
    4ef8:	9223      	str	r2, [sp, #140]	; 0x8c
    4efa:	e79f      	b.n	4e3c <_dtoa_r+0x240>
    4efc:	2301      	movs	r3, #1
    4efe:	930e      	str	r3, [sp, #56]	; 0x38
    4f00:	3b02      	subs	r3, #2
    4f02:	e7f5      	b.n	4ef0 <_dtoa_r+0x2f4>
    4f04:	2301      	movs	r3, #1
    4f06:	930d      	str	r3, [sp, #52]	; 0x34
    4f08:	001f      	movs	r7, r3
    4f0a:	001a      	movs	r2, r3
    4f0c:	e7f4      	b.n	4ef8 <_dtoa_r+0x2fc>
    4f0e:	6861      	ldr	r1, [r4, #4]
    4f10:	0052      	lsls	r2, r2, #1
    4f12:	3101      	adds	r1, #1
    4f14:	6061      	str	r1, [r4, #4]
    4f16:	e796      	b.n	4e46 <_dtoa_r+0x24a>
    4f18:	2301      	movs	r3, #1
    4f1a:	421d      	tst	r5, r3
    4f1c:	d008      	beq.n	4f30 <_dtoa_r+0x334>
    4f1e:	9810      	ldr	r0, [sp, #64]	; 0x40
    4f20:	9911      	ldr	r1, [sp, #68]	; 0x44
    4f22:	18e4      	adds	r4, r4, r3
    4f24:	6832      	ldr	r2, [r6, #0]
    4f26:	6873      	ldr	r3, [r6, #4]
    4f28:	f7fd ffd6 	bl	2ed8 <__aeabi_dmul>
    4f2c:	9010      	str	r0, [sp, #64]	; 0x40
    4f2e:	9111      	str	r1, [sp, #68]	; 0x44
    4f30:	106d      	asrs	r5, r5, #1
    4f32:	3608      	adds	r6, #8
    4f34:	e7bd      	b.n	4eb2 <_dtoa_r+0x2b6>
    4f36:	46c0      	nop			; (mov r8, r8)
    4f38:	7ff00000 	.word	0x7ff00000
    4f3c:	0000270f 	.word	0x0000270f
    4f40:	000063e5 	.word	0x000063e5
    4f44:	000063e8 	.word	0x000063e8
    4f48:	000063e9 	.word	0x000063e9
    4f4c:	000063ea 	.word	0x000063ea
    4f50:	3ff00000 	.word	0x3ff00000
    4f54:	fffffc01 	.word	0xfffffc01
    4f58:	3ff80000 	.word	0x3ff80000
    4f5c:	636f4361 	.word	0x636f4361
    4f60:	3fd287a7 	.word	0x3fd287a7
    4f64:	8b60c8b3 	.word	0x8b60c8b3
    4f68:	3fc68a28 	.word	0x3fc68a28
    4f6c:	509f79fb 	.word	0x509f79fb
    4f70:	3fd34413 	.word	0x3fd34413
    4f74:	00006308 	.word	0x00006308
    4f78:	00000432 	.word	0x00000432
    4f7c:	00000412 	.word	0x00000412
    4f80:	fe100000 	.word	0xfe100000
    4f84:	000062e0 	.word	0x000062e0
    4f88:	9b03      	ldr	r3, [sp, #12]
    4f8a:	2402      	movs	r4, #2
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d016      	beq.n	4fbe <_dtoa_r+0x3c2>
    4f90:	9814      	ldr	r0, [sp, #80]	; 0x50
    4f92:	9915      	ldr	r1, [sp, #84]	; 0x54
    4f94:	425d      	negs	r5, r3
    4f96:	230f      	movs	r3, #15
    4f98:	4aca      	ldr	r2, [pc, #808]	; (52c4 <_dtoa_r+0x6c8>)
    4f9a:	402b      	ands	r3, r5
    4f9c:	00db      	lsls	r3, r3, #3
    4f9e:	18d3      	adds	r3, r2, r3
    4fa0:	681a      	ldr	r2, [r3, #0]
    4fa2:	685b      	ldr	r3, [r3, #4]
    4fa4:	f7fd ff98 	bl	2ed8 <__aeabi_dmul>
    4fa8:	2300      	movs	r3, #0
    4faa:	9006      	str	r0, [sp, #24]
    4fac:	9107      	str	r1, [sp, #28]
    4fae:	4ec6      	ldr	r6, [pc, #792]	; (52c8 <_dtoa_r+0x6cc>)
    4fb0:	112d      	asrs	r5, r5, #4
    4fb2:	2d00      	cmp	r5, #0
    4fb4:	d000      	beq.n	4fb8 <_dtoa_r+0x3bc>
    4fb6:	e08c      	b.n	50d2 <_dtoa_r+0x4d6>
    4fb8:	2b00      	cmp	r3, #0
    4fba:	d000      	beq.n	4fbe <_dtoa_r+0x3c2>
    4fbc:	e781      	b.n	4ec2 <_dtoa_r+0x2c6>
    4fbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4fc0:	2b00      	cmp	r3, #0
    4fc2:	d100      	bne.n	4fc6 <_dtoa_r+0x3ca>
    4fc4:	e091      	b.n	50ea <_dtoa_r+0x4ee>
    4fc6:	9a06      	ldr	r2, [sp, #24]
    4fc8:	9b07      	ldr	r3, [sp, #28]
    4fca:	9210      	str	r2, [sp, #64]	; 0x40
    4fcc:	9311      	str	r3, [sp, #68]	; 0x44
    4fce:	9810      	ldr	r0, [sp, #64]	; 0x40
    4fd0:	9911      	ldr	r1, [sp, #68]	; 0x44
    4fd2:	2200      	movs	r2, #0
    4fd4:	4bbd      	ldr	r3, [pc, #756]	; (52cc <_dtoa_r+0x6d0>)
    4fd6:	f7fe fe2b 	bl	3c30 <__aeabi_dcmplt>
    4fda:	2800      	cmp	r0, #0
    4fdc:	d100      	bne.n	4fe0 <_dtoa_r+0x3e4>
    4fde:	e084      	b.n	50ea <_dtoa_r+0x4ee>
    4fe0:	2f00      	cmp	r7, #0
    4fe2:	d100      	bne.n	4fe6 <_dtoa_r+0x3ea>
    4fe4:	e081      	b.n	50ea <_dtoa_r+0x4ee>
    4fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4fe8:	2b00      	cmp	r3, #0
    4fea:	dd3e      	ble.n	506a <_dtoa_r+0x46e>
    4fec:	9810      	ldr	r0, [sp, #64]	; 0x40
    4fee:	9911      	ldr	r1, [sp, #68]	; 0x44
    4ff0:	9b03      	ldr	r3, [sp, #12]
    4ff2:	2200      	movs	r2, #0
    4ff4:	1e5e      	subs	r6, r3, #1
    4ff6:	4bb6      	ldr	r3, [pc, #728]	; (52d0 <_dtoa_r+0x6d4>)
    4ff8:	f7fd ff6e 	bl	2ed8 <__aeabi_dmul>
    4ffc:	9006      	str	r0, [sp, #24]
    4ffe:	9107      	str	r1, [sp, #28]
    5000:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    5002:	3401      	adds	r4, #1
    5004:	0020      	movs	r0, r4
    5006:	f7fe fd31 	bl	3a6c <__aeabi_i2d>
    500a:	9a06      	ldr	r2, [sp, #24]
    500c:	9b07      	ldr	r3, [sp, #28]
    500e:	f7fd ff63 	bl	2ed8 <__aeabi_dmul>
    5012:	2200      	movs	r2, #0
    5014:	4baf      	ldr	r3, [pc, #700]	; (52d4 <_dtoa_r+0x6d8>)
    5016:	f000 fbe3 	bl	57e0 <__aeabi_dadd>
    501a:	9012      	str	r0, [sp, #72]	; 0x48
    501c:	9113      	str	r1, [sp, #76]	; 0x4c
    501e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5020:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    5022:	4aad      	ldr	r2, [pc, #692]	; (52d8 <_dtoa_r+0x6dc>)
    5024:	9310      	str	r3, [sp, #64]	; 0x40
    5026:	9411      	str	r4, [sp, #68]	; 0x44
    5028:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    502a:	189c      	adds	r4, r3, r2
    502c:	9411      	str	r4, [sp, #68]	; 0x44
    502e:	2d00      	cmp	r5, #0
    5030:	d15e      	bne.n	50f0 <_dtoa_r+0x4f4>
    5032:	9806      	ldr	r0, [sp, #24]
    5034:	9907      	ldr	r1, [sp, #28]
    5036:	2200      	movs	r2, #0
    5038:	4ba8      	ldr	r3, [pc, #672]	; (52dc <_dtoa_r+0x6e0>)
    503a:	f7fe f9cd 	bl	33d8 <__aeabi_dsub>
    503e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5040:	0023      	movs	r3, r4
    5042:	9006      	str	r0, [sp, #24]
    5044:	9107      	str	r1, [sp, #28]
    5046:	f7fe fe07 	bl	3c58 <__aeabi_dcmpgt>
    504a:	2800      	cmp	r0, #0
    504c:	d000      	beq.n	5050 <_dtoa_r+0x454>
    504e:	e301      	b.n	5654 <_dtoa_r+0xa58>
    5050:	48a3      	ldr	r0, [pc, #652]	; (52e0 <_dtoa_r+0x6e4>)
    5052:	9913      	ldr	r1, [sp, #76]	; 0x4c
    5054:	4684      	mov	ip, r0
    5056:	4461      	add	r1, ip
    5058:	000b      	movs	r3, r1
    505a:	9806      	ldr	r0, [sp, #24]
    505c:	9907      	ldr	r1, [sp, #28]
    505e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5060:	f7fe fde6 	bl	3c30 <__aeabi_dcmplt>
    5064:	2800      	cmp	r0, #0
    5066:	d000      	beq.n	506a <_dtoa_r+0x46e>
    5068:	e2e8      	b.n	563c <_dtoa_r+0xa40>
    506a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    506c:	9c15      	ldr	r4, [sp, #84]	; 0x54
    506e:	9306      	str	r3, [sp, #24]
    5070:	9407      	str	r4, [sp, #28]
    5072:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    5074:	2b00      	cmp	r3, #0
    5076:	da00      	bge.n	507a <_dtoa_r+0x47e>
    5078:	e157      	b.n	532a <_dtoa_r+0x72e>
    507a:	9a03      	ldr	r2, [sp, #12]
    507c:	2a0e      	cmp	r2, #14
    507e:	dd00      	ble.n	5082 <_dtoa_r+0x486>
    5080:	e153      	b.n	532a <_dtoa_r+0x72e>
    5082:	4b90      	ldr	r3, [pc, #576]	; (52c4 <_dtoa_r+0x6c8>)
    5084:	00d2      	lsls	r2, r2, #3
    5086:	189b      	adds	r3, r3, r2
    5088:	685c      	ldr	r4, [r3, #4]
    508a:	681b      	ldr	r3, [r3, #0]
    508c:	9308      	str	r3, [sp, #32]
    508e:	9409      	str	r4, [sp, #36]	; 0x24
    5090:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    5092:	2b00      	cmp	r3, #0
    5094:	db00      	blt.n	5098 <_dtoa_r+0x49c>
    5096:	e0ce      	b.n	5236 <_dtoa_r+0x63a>
    5098:	2f00      	cmp	r7, #0
    509a:	dd00      	ble.n	509e <_dtoa_r+0x4a2>
    509c:	e0cb      	b.n	5236 <_dtoa_r+0x63a>
    509e:	d000      	beq.n	50a2 <_dtoa_r+0x4a6>
    50a0:	e2cf      	b.n	5642 <_dtoa_r+0xa46>
    50a2:	9808      	ldr	r0, [sp, #32]
    50a4:	9909      	ldr	r1, [sp, #36]	; 0x24
    50a6:	2200      	movs	r2, #0
    50a8:	4b8c      	ldr	r3, [pc, #560]	; (52dc <_dtoa_r+0x6e0>)
    50aa:	f7fd ff15 	bl	2ed8 <__aeabi_dmul>
    50ae:	9a06      	ldr	r2, [sp, #24]
    50b0:	9b07      	ldr	r3, [sp, #28]
    50b2:	f7fe fddb 	bl	3c6c <__aeabi_dcmpge>
    50b6:	003e      	movs	r6, r7
    50b8:	9708      	str	r7, [sp, #32]
    50ba:	2800      	cmp	r0, #0
    50bc:	d000      	beq.n	50c0 <_dtoa_r+0x4c4>
    50be:	e2a4      	b.n	560a <_dtoa_r+0xa0e>
    50c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    50c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    50c4:	1c5d      	adds	r5, r3, #1
    50c6:	2331      	movs	r3, #49	; 0x31
    50c8:	7013      	strb	r3, [r2, #0]
    50ca:	9b03      	ldr	r3, [sp, #12]
    50cc:	3301      	adds	r3, #1
    50ce:	9303      	str	r3, [sp, #12]
    50d0:	e29f      	b.n	5612 <_dtoa_r+0xa16>
    50d2:	2201      	movs	r2, #1
    50d4:	4215      	tst	r5, r2
    50d6:	d005      	beq.n	50e4 <_dtoa_r+0x4e8>
    50d8:	18a4      	adds	r4, r4, r2
    50da:	6832      	ldr	r2, [r6, #0]
    50dc:	6873      	ldr	r3, [r6, #4]
    50de:	f7fd fefb 	bl	2ed8 <__aeabi_dmul>
    50e2:	2301      	movs	r3, #1
    50e4:	106d      	asrs	r5, r5, #1
    50e6:	3608      	adds	r6, #8
    50e8:	e763      	b.n	4fb2 <_dtoa_r+0x3b6>
    50ea:	9e03      	ldr	r6, [sp, #12]
    50ec:	003d      	movs	r5, r7
    50ee:	e789      	b.n	5004 <_dtoa_r+0x408>
    50f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    50f2:	1e69      	subs	r1, r5, #1
    50f4:	1952      	adds	r2, r2, r5
    50f6:	9217      	str	r2, [sp, #92]	; 0x5c
    50f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    50fa:	4b72      	ldr	r3, [pc, #456]	; (52c4 <_dtoa_r+0x6c8>)
    50fc:	00c9      	lsls	r1, r1, #3
    50fe:	2a00      	cmp	r2, #0
    5100:	d04a      	beq.n	5198 <_dtoa_r+0x59c>
    5102:	185b      	adds	r3, r3, r1
    5104:	681a      	ldr	r2, [r3, #0]
    5106:	685b      	ldr	r3, [r3, #4]
    5108:	2000      	movs	r0, #0
    510a:	4976      	ldr	r1, [pc, #472]	; (52e4 <_dtoa_r+0x6e8>)
    510c:	f7fd fbb0 	bl	2870 <__aeabi_ddiv>
    5110:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5112:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5114:	f7fe f960 	bl	33d8 <__aeabi_dsub>
    5118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    511a:	9010      	str	r0, [sp, #64]	; 0x40
    511c:	9111      	str	r1, [sp, #68]	; 0x44
    511e:	9312      	str	r3, [sp, #72]	; 0x48
    5120:	9806      	ldr	r0, [sp, #24]
    5122:	9907      	ldr	r1, [sp, #28]
    5124:	f7fe fc6e 	bl	3a04 <__aeabi_d2iz>
    5128:	0004      	movs	r4, r0
    512a:	f7fe fc9f 	bl	3a6c <__aeabi_i2d>
    512e:	0002      	movs	r2, r0
    5130:	000b      	movs	r3, r1
    5132:	9806      	ldr	r0, [sp, #24]
    5134:	9907      	ldr	r1, [sp, #28]
    5136:	f7fe f94f 	bl	33d8 <__aeabi_dsub>
    513a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    513c:	3430      	adds	r4, #48	; 0x30
    513e:	1c5d      	adds	r5, r3, #1
    5140:	701c      	strb	r4, [r3, #0]
    5142:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5144:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5146:	9006      	str	r0, [sp, #24]
    5148:	9107      	str	r1, [sp, #28]
    514a:	f7fe fd71 	bl	3c30 <__aeabi_dcmplt>
    514e:	2800      	cmp	r0, #0
    5150:	d165      	bne.n	521e <_dtoa_r+0x622>
    5152:	9a06      	ldr	r2, [sp, #24]
    5154:	9b07      	ldr	r3, [sp, #28]
    5156:	2000      	movs	r0, #0
    5158:	495c      	ldr	r1, [pc, #368]	; (52cc <_dtoa_r+0x6d0>)
    515a:	f7fe f93d 	bl	33d8 <__aeabi_dsub>
    515e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5160:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5162:	f7fe fd65 	bl	3c30 <__aeabi_dcmplt>
    5166:	2800      	cmp	r0, #0
    5168:	d000      	beq.n	516c <_dtoa_r+0x570>
    516a:	e0be      	b.n	52ea <_dtoa_r+0x6ee>
    516c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    516e:	429d      	cmp	r5, r3
    5170:	d100      	bne.n	5174 <_dtoa_r+0x578>
    5172:	e77a      	b.n	506a <_dtoa_r+0x46e>
    5174:	9810      	ldr	r0, [sp, #64]	; 0x40
    5176:	9911      	ldr	r1, [sp, #68]	; 0x44
    5178:	2200      	movs	r2, #0
    517a:	4b55      	ldr	r3, [pc, #340]	; (52d0 <_dtoa_r+0x6d4>)
    517c:	f7fd feac 	bl	2ed8 <__aeabi_dmul>
    5180:	2200      	movs	r2, #0
    5182:	9010      	str	r0, [sp, #64]	; 0x40
    5184:	9111      	str	r1, [sp, #68]	; 0x44
    5186:	9806      	ldr	r0, [sp, #24]
    5188:	9907      	ldr	r1, [sp, #28]
    518a:	4b51      	ldr	r3, [pc, #324]	; (52d0 <_dtoa_r+0x6d4>)
    518c:	f7fd fea4 	bl	2ed8 <__aeabi_dmul>
    5190:	9512      	str	r5, [sp, #72]	; 0x48
    5192:	9006      	str	r0, [sp, #24]
    5194:	9107      	str	r1, [sp, #28]
    5196:	e7c3      	b.n	5120 <_dtoa_r+0x524>
    5198:	1859      	adds	r1, r3, r1
    519a:	6808      	ldr	r0, [r1, #0]
    519c:	6849      	ldr	r1, [r1, #4]
    519e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    51a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    51a2:	f7fd fe99 	bl	2ed8 <__aeabi_dmul>
    51a6:	9010      	str	r0, [sp, #64]	; 0x40
    51a8:	9111      	str	r1, [sp, #68]	; 0x44
    51aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    51ac:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    51ae:	9806      	ldr	r0, [sp, #24]
    51b0:	9907      	ldr	r1, [sp, #28]
    51b2:	f7fe fc27 	bl	3a04 <__aeabi_d2iz>
    51b6:	9012      	str	r0, [sp, #72]	; 0x48
    51b8:	f7fe fc58 	bl	3a6c <__aeabi_i2d>
    51bc:	0002      	movs	r2, r0
    51be:	000b      	movs	r3, r1
    51c0:	9806      	ldr	r0, [sp, #24]
    51c2:	9907      	ldr	r1, [sp, #28]
    51c4:	f7fe f908 	bl	33d8 <__aeabi_dsub>
    51c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    51ca:	9006      	str	r0, [sp, #24]
    51cc:	9107      	str	r1, [sp, #28]
    51ce:	3330      	adds	r3, #48	; 0x30
    51d0:	7023      	strb	r3, [r4, #0]
    51d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    51d4:	3401      	adds	r4, #1
    51d6:	2200      	movs	r2, #0
    51d8:	42a3      	cmp	r3, r4
    51da:	d124      	bne.n	5226 <_dtoa_r+0x62a>
    51dc:	4b41      	ldr	r3, [pc, #260]	; (52e4 <_dtoa_r+0x6e8>)
    51de:	9810      	ldr	r0, [sp, #64]	; 0x40
    51e0:	9911      	ldr	r1, [sp, #68]	; 0x44
    51e2:	f000 fafd 	bl	57e0 <__aeabi_dadd>
    51e6:	0002      	movs	r2, r0
    51e8:	000b      	movs	r3, r1
    51ea:	9806      	ldr	r0, [sp, #24]
    51ec:	9907      	ldr	r1, [sp, #28]
    51ee:	f7fe fd33 	bl	3c58 <__aeabi_dcmpgt>
    51f2:	2800      	cmp	r0, #0
    51f4:	d000      	beq.n	51f8 <_dtoa_r+0x5fc>
    51f6:	e078      	b.n	52ea <_dtoa_r+0x6ee>
    51f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    51fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    51fc:	2000      	movs	r0, #0
    51fe:	4939      	ldr	r1, [pc, #228]	; (52e4 <_dtoa_r+0x6e8>)
    5200:	f7fe f8ea 	bl	33d8 <__aeabi_dsub>
    5204:	0002      	movs	r2, r0
    5206:	000b      	movs	r3, r1
    5208:	9806      	ldr	r0, [sp, #24]
    520a:	9907      	ldr	r1, [sp, #28]
    520c:	f7fe fd10 	bl	3c30 <__aeabi_dcmplt>
    5210:	2800      	cmp	r0, #0
    5212:	d100      	bne.n	5216 <_dtoa_r+0x61a>
    5214:	e729      	b.n	506a <_dtoa_r+0x46e>
    5216:	1e6b      	subs	r3, r5, #1
    5218:	781a      	ldrb	r2, [r3, #0]
    521a:	2a30      	cmp	r2, #48	; 0x30
    521c:	d001      	beq.n	5222 <_dtoa_r+0x626>
    521e:	9603      	str	r6, [sp, #12]
    5220:	e03f      	b.n	52a2 <_dtoa_r+0x6a6>
    5222:	001d      	movs	r5, r3
    5224:	e7f7      	b.n	5216 <_dtoa_r+0x61a>
    5226:	9806      	ldr	r0, [sp, #24]
    5228:	9907      	ldr	r1, [sp, #28]
    522a:	4b29      	ldr	r3, [pc, #164]	; (52d0 <_dtoa_r+0x6d4>)
    522c:	f7fd fe54 	bl	2ed8 <__aeabi_dmul>
    5230:	9006      	str	r0, [sp, #24]
    5232:	9107      	str	r1, [sp, #28]
    5234:	e7bb      	b.n	51ae <_dtoa_r+0x5b2>
    5236:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    5238:	9a08      	ldr	r2, [sp, #32]
    523a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    523c:	9806      	ldr	r0, [sp, #24]
    523e:	9907      	ldr	r1, [sp, #28]
    5240:	f7fd fb16 	bl	2870 <__aeabi_ddiv>
    5244:	f7fe fbde 	bl	3a04 <__aeabi_d2iz>
    5248:	0004      	movs	r4, r0
    524a:	f7fe fc0f 	bl	3a6c <__aeabi_i2d>
    524e:	9a08      	ldr	r2, [sp, #32]
    5250:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5252:	f7fd fe41 	bl	2ed8 <__aeabi_dmul>
    5256:	000b      	movs	r3, r1
    5258:	0002      	movs	r2, r0
    525a:	9806      	ldr	r0, [sp, #24]
    525c:	9907      	ldr	r1, [sp, #28]
    525e:	f7fe f8bb 	bl	33d8 <__aeabi_dsub>
    5262:	0023      	movs	r3, r4
    5264:	3330      	adds	r3, #48	; 0x30
    5266:	7033      	strb	r3, [r6, #0]
    5268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    526a:	1c75      	adds	r5, r6, #1
    526c:	1aeb      	subs	r3, r5, r3
    526e:	429f      	cmp	r7, r3
    5270:	d14c      	bne.n	530c <_dtoa_r+0x710>
    5272:	0002      	movs	r2, r0
    5274:	000b      	movs	r3, r1
    5276:	f000 fab3 	bl	57e0 <__aeabi_dadd>
    527a:	0006      	movs	r6, r0
    527c:	000f      	movs	r7, r1
    527e:	0002      	movs	r2, r0
    5280:	000b      	movs	r3, r1
    5282:	9808      	ldr	r0, [sp, #32]
    5284:	9909      	ldr	r1, [sp, #36]	; 0x24
    5286:	f7fe fcd3 	bl	3c30 <__aeabi_dcmplt>
    528a:	2800      	cmp	r0, #0
    528c:	d12c      	bne.n	52e8 <_dtoa_r+0x6ec>
    528e:	9808      	ldr	r0, [sp, #32]
    5290:	9909      	ldr	r1, [sp, #36]	; 0x24
    5292:	0032      	movs	r2, r6
    5294:	003b      	movs	r3, r7
    5296:	f7fe fcc5 	bl	3c24 <__aeabi_dcmpeq>
    529a:	2800      	cmp	r0, #0
    529c:	d001      	beq.n	52a2 <_dtoa_r+0x6a6>
    529e:	07e3      	lsls	r3, r4, #31
    52a0:	d422      	bmi.n	52e8 <_dtoa_r+0x6ec>
    52a2:	9905      	ldr	r1, [sp, #20]
    52a4:	9804      	ldr	r0, [sp, #16]
    52a6:	f7ff f94b 	bl	4540 <_Bfree>
    52aa:	2300      	movs	r3, #0
    52ac:	702b      	strb	r3, [r5, #0]
    52ae:	9b03      	ldr	r3, [sp, #12]
    52b0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    52b2:	3301      	adds	r3, #1
    52b4:	6013      	str	r3, [r2, #0]
    52b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    52b8:	2b00      	cmp	r3, #0
    52ba:	d100      	bne.n	52be <_dtoa_r+0x6c2>
    52bc:	e275      	b.n	57aa <_dtoa_r+0xbae>
    52be:	601d      	str	r5, [r3, #0]
    52c0:	e273      	b.n	57aa <_dtoa_r+0xbae>
    52c2:	46c0      	nop			; (mov r8, r8)
    52c4:	00006308 	.word	0x00006308
    52c8:	000062e0 	.word	0x000062e0
    52cc:	3ff00000 	.word	0x3ff00000
    52d0:	40240000 	.word	0x40240000
    52d4:	401c0000 	.word	0x401c0000
    52d8:	fcc00000 	.word	0xfcc00000
    52dc:	40140000 	.word	0x40140000
    52e0:	7cc00000 	.word	0x7cc00000
    52e4:	3fe00000 	.word	0x3fe00000
    52e8:	9e03      	ldr	r6, [sp, #12]
    52ea:	1e6b      	subs	r3, r5, #1
    52ec:	781a      	ldrb	r2, [r3, #0]
    52ee:	2a39      	cmp	r2, #57	; 0x39
    52f0:	d106      	bne.n	5300 <_dtoa_r+0x704>
    52f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    52f4:	429a      	cmp	r2, r3
    52f6:	d107      	bne.n	5308 <_dtoa_r+0x70c>
    52f8:	2330      	movs	r3, #48	; 0x30
    52fa:	7013      	strb	r3, [r2, #0]
    52fc:	0013      	movs	r3, r2
    52fe:	3601      	adds	r6, #1
    5300:	781a      	ldrb	r2, [r3, #0]
    5302:	3201      	adds	r2, #1
    5304:	701a      	strb	r2, [r3, #0]
    5306:	e78a      	b.n	521e <_dtoa_r+0x622>
    5308:	001d      	movs	r5, r3
    530a:	e7ee      	b.n	52ea <_dtoa_r+0x6ee>
    530c:	2200      	movs	r2, #0
    530e:	4bcf      	ldr	r3, [pc, #828]	; (564c <_dtoa_r+0xa50>)
    5310:	f7fd fde2 	bl	2ed8 <__aeabi_dmul>
    5314:	2200      	movs	r2, #0
    5316:	2300      	movs	r3, #0
    5318:	9006      	str	r0, [sp, #24]
    531a:	9107      	str	r1, [sp, #28]
    531c:	002e      	movs	r6, r5
    531e:	f7fe fc81 	bl	3c24 <__aeabi_dcmpeq>
    5322:	2800      	cmp	r0, #0
    5324:	d100      	bne.n	5328 <_dtoa_r+0x72c>
    5326:	e787      	b.n	5238 <_dtoa_r+0x63c>
    5328:	e7bb      	b.n	52a2 <_dtoa_r+0x6a6>
    532a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    532c:	2a00      	cmp	r2, #0
    532e:	d100      	bne.n	5332 <_dtoa_r+0x736>
    5330:	e087      	b.n	5442 <_dtoa_r+0x846>
    5332:	9a22      	ldr	r2, [sp, #136]	; 0x88
    5334:	2a01      	cmp	r2, #1
    5336:	dc6e      	bgt.n	5416 <_dtoa_r+0x81a>
    5338:	9a18      	ldr	r2, [sp, #96]	; 0x60
    533a:	2a00      	cmp	r2, #0
    533c:	d067      	beq.n	540e <_dtoa_r+0x812>
    533e:	4ac4      	ldr	r2, [pc, #784]	; (5650 <_dtoa_r+0xa54>)
    5340:	189b      	adds	r3, r3, r2
    5342:	9d08      	ldr	r5, [sp, #32]
    5344:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    5346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5348:	2101      	movs	r1, #1
    534a:	18d2      	adds	r2, r2, r3
    534c:	920b      	str	r2, [sp, #44]	; 0x2c
    534e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5350:	9804      	ldr	r0, [sp, #16]
    5352:	18d3      	adds	r3, r2, r3
    5354:	930c      	str	r3, [sp, #48]	; 0x30
    5356:	f7ff f991 	bl	467c <__i2b>
    535a:	0006      	movs	r6, r0
    535c:	2c00      	cmp	r4, #0
    535e:	dd0e      	ble.n	537e <_dtoa_r+0x782>
    5360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5362:	2b00      	cmp	r3, #0
    5364:	dd0b      	ble.n	537e <_dtoa_r+0x782>
    5366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5368:	0023      	movs	r3, r4
    536a:	4294      	cmp	r4, r2
    536c:	dd00      	ble.n	5370 <_dtoa_r+0x774>
    536e:	0013      	movs	r3, r2
    5370:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5372:	1ae4      	subs	r4, r4, r3
    5374:	1ad2      	subs	r2, r2, r3
    5376:	920b      	str	r2, [sp, #44]	; 0x2c
    5378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    537a:	1ad3      	subs	r3, r2, r3
    537c:	930c      	str	r3, [sp, #48]	; 0x30
    537e:	9b08      	ldr	r3, [sp, #32]
    5380:	2b00      	cmp	r3, #0
    5382:	d01e      	beq.n	53c2 <_dtoa_r+0x7c6>
    5384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5386:	2b00      	cmp	r3, #0
    5388:	d05f      	beq.n	544a <_dtoa_r+0x84e>
    538a:	2d00      	cmp	r5, #0
    538c:	dd11      	ble.n	53b2 <_dtoa_r+0x7b6>
    538e:	0031      	movs	r1, r6
    5390:	002a      	movs	r2, r5
    5392:	9804      	ldr	r0, [sp, #16]
    5394:	f7ff fa0a 	bl	47ac <__pow5mult>
    5398:	9a05      	ldr	r2, [sp, #20]
    539a:	0001      	movs	r1, r0
    539c:	0006      	movs	r6, r0
    539e:	9804      	ldr	r0, [sp, #16]
    53a0:	f7ff f975 	bl	468e <__multiply>
    53a4:	9905      	ldr	r1, [sp, #20]
    53a6:	9010      	str	r0, [sp, #64]	; 0x40
    53a8:	9804      	ldr	r0, [sp, #16]
    53aa:	f7ff f8c9 	bl	4540 <_Bfree>
    53ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    53b0:	9305      	str	r3, [sp, #20]
    53b2:	9b08      	ldr	r3, [sp, #32]
    53b4:	1b5a      	subs	r2, r3, r5
    53b6:	d004      	beq.n	53c2 <_dtoa_r+0x7c6>
    53b8:	9905      	ldr	r1, [sp, #20]
    53ba:	9804      	ldr	r0, [sp, #16]
    53bc:	f7ff f9f6 	bl	47ac <__pow5mult>
    53c0:	9005      	str	r0, [sp, #20]
    53c2:	2101      	movs	r1, #1
    53c4:	9804      	ldr	r0, [sp, #16]
    53c6:	f7ff f959 	bl	467c <__i2b>
    53ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    53cc:	9008      	str	r0, [sp, #32]
    53ce:	2b00      	cmp	r3, #0
    53d0:	dd3d      	ble.n	544e <_dtoa_r+0x852>
    53d2:	001a      	movs	r2, r3
    53d4:	0001      	movs	r1, r0
    53d6:	9804      	ldr	r0, [sp, #16]
    53d8:	f7ff f9e8 	bl	47ac <__pow5mult>
    53dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    53de:	9008      	str	r0, [sp, #32]
    53e0:	2500      	movs	r5, #0
    53e2:	2b01      	cmp	r3, #1
    53e4:	dc3b      	bgt.n	545e <_dtoa_r+0x862>
    53e6:	2500      	movs	r5, #0
    53e8:	9b06      	ldr	r3, [sp, #24]
    53ea:	42ab      	cmp	r3, r5
    53ec:	d133      	bne.n	5456 <_dtoa_r+0x85a>
    53ee:	9b07      	ldr	r3, [sp, #28]
    53f0:	031b      	lsls	r3, r3, #12
    53f2:	42ab      	cmp	r3, r5
    53f4:	d12f      	bne.n	5456 <_dtoa_r+0x85a>
    53f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    53f8:	9a07      	ldr	r2, [sp, #28]
    53fa:	4213      	tst	r3, r2
    53fc:	d02b      	beq.n	5456 <_dtoa_r+0x85a>
    53fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5400:	3501      	adds	r5, #1
    5402:	3301      	adds	r3, #1
    5404:	930b      	str	r3, [sp, #44]	; 0x2c
    5406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5408:	3301      	adds	r3, #1
    540a:	930c      	str	r3, [sp, #48]	; 0x30
    540c:	e023      	b.n	5456 <_dtoa_r+0x85a>
    540e:	2336      	movs	r3, #54	; 0x36
    5410:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    5412:	1a9b      	subs	r3, r3, r2
    5414:	e795      	b.n	5342 <_dtoa_r+0x746>
    5416:	9b08      	ldr	r3, [sp, #32]
    5418:	1e7d      	subs	r5, r7, #1
    541a:	42ab      	cmp	r3, r5
    541c:	db06      	blt.n	542c <_dtoa_r+0x830>
    541e:	1b5d      	subs	r5, r3, r5
    5420:	2f00      	cmp	r7, #0
    5422:	da0b      	bge.n	543c <_dtoa_r+0x840>
    5424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5426:	1bdc      	subs	r4, r3, r7
    5428:	2300      	movs	r3, #0
    542a:	e78c      	b.n	5346 <_dtoa_r+0x74a>
    542c:	9b08      	ldr	r3, [sp, #32]
    542e:	9508      	str	r5, [sp, #32]
    5430:	1aea      	subs	r2, r5, r3
    5432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5434:	2500      	movs	r5, #0
    5436:	189b      	adds	r3, r3, r2
    5438:	930f      	str	r3, [sp, #60]	; 0x3c
    543a:	e7f1      	b.n	5420 <_dtoa_r+0x824>
    543c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    543e:	003b      	movs	r3, r7
    5440:	e781      	b.n	5346 <_dtoa_r+0x74a>
    5442:	9d08      	ldr	r5, [sp, #32]
    5444:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    5446:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    5448:	e788      	b.n	535c <_dtoa_r+0x760>
    544a:	9a08      	ldr	r2, [sp, #32]
    544c:	e7b4      	b.n	53b8 <_dtoa_r+0x7bc>
    544e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5450:	2500      	movs	r5, #0
    5452:	2b01      	cmp	r3, #1
    5454:	ddc7      	ble.n	53e6 <_dtoa_r+0x7ea>
    5456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5458:	2001      	movs	r0, #1
    545a:	2b00      	cmp	r3, #0
    545c:	d00b      	beq.n	5476 <_dtoa_r+0x87a>
    545e:	9b08      	ldr	r3, [sp, #32]
    5460:	9a08      	ldr	r2, [sp, #32]
    5462:	691b      	ldr	r3, [r3, #16]
    5464:	930f      	str	r3, [sp, #60]	; 0x3c
    5466:	3303      	adds	r3, #3
    5468:	009b      	lsls	r3, r3, #2
    546a:	18d3      	adds	r3, r2, r3
    546c:	6858      	ldr	r0, [r3, #4]
    546e:	f7ff f8bc 	bl	45ea <__hi0bits>
    5472:	2320      	movs	r3, #32
    5474:	1a18      	subs	r0, r3, r0
    5476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5478:	18c0      	adds	r0, r0, r3
    547a:	231f      	movs	r3, #31
    547c:	4018      	ands	r0, r3
    547e:	d100      	bne.n	5482 <_dtoa_r+0x886>
    5480:	e0ab      	b.n	55da <_dtoa_r+0x9de>
    5482:	3301      	adds	r3, #1
    5484:	1a1b      	subs	r3, r3, r0
    5486:	2b04      	cmp	r3, #4
    5488:	dc00      	bgt.n	548c <_dtoa_r+0x890>
    548a:	e09b      	b.n	55c4 <_dtoa_r+0x9c8>
    548c:	231c      	movs	r3, #28
    548e:	1a18      	subs	r0, r3, r0
    5490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5492:	1824      	adds	r4, r4, r0
    5494:	181b      	adds	r3, r3, r0
    5496:	930b      	str	r3, [sp, #44]	; 0x2c
    5498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    549a:	181b      	adds	r3, r3, r0
    549c:	930c      	str	r3, [sp, #48]	; 0x30
    549e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    54a0:	2b00      	cmp	r3, #0
    54a2:	dd05      	ble.n	54b0 <_dtoa_r+0x8b4>
    54a4:	001a      	movs	r2, r3
    54a6:	9905      	ldr	r1, [sp, #20]
    54a8:	9804      	ldr	r0, [sp, #16]
    54aa:	f7ff f9d1 	bl	4850 <__lshift>
    54ae:	9005      	str	r0, [sp, #20]
    54b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    54b2:	2b00      	cmp	r3, #0
    54b4:	dd05      	ble.n	54c2 <_dtoa_r+0x8c6>
    54b6:	001a      	movs	r2, r3
    54b8:	9908      	ldr	r1, [sp, #32]
    54ba:	9804      	ldr	r0, [sp, #16]
    54bc:	f7ff f9c8 	bl	4850 <__lshift>
    54c0:	9008      	str	r0, [sp, #32]
    54c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    54c4:	2b00      	cmp	r3, #0
    54c6:	d100      	bne.n	54ca <_dtoa_r+0x8ce>
    54c8:	e089      	b.n	55de <_dtoa_r+0x9e2>
    54ca:	9908      	ldr	r1, [sp, #32]
    54cc:	9805      	ldr	r0, [sp, #20]
    54ce:	f7ff fa10 	bl	48f2 <__mcmp>
    54d2:	2800      	cmp	r0, #0
    54d4:	db00      	blt.n	54d8 <_dtoa_r+0x8dc>
    54d6:	e082      	b.n	55de <_dtoa_r+0x9e2>
    54d8:	9b03      	ldr	r3, [sp, #12]
    54da:	220a      	movs	r2, #10
    54dc:	3b01      	subs	r3, #1
    54de:	9303      	str	r3, [sp, #12]
    54e0:	9905      	ldr	r1, [sp, #20]
    54e2:	2300      	movs	r3, #0
    54e4:	9804      	ldr	r0, [sp, #16]
    54e6:	f7ff f844 	bl	4572 <__multadd>
    54ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    54ec:	9005      	str	r0, [sp, #20]
    54ee:	2b00      	cmp	r3, #0
    54f0:	d100      	bne.n	54f4 <_dtoa_r+0x8f8>
    54f2:	e15d      	b.n	57b0 <_dtoa_r+0xbb4>
    54f4:	2300      	movs	r3, #0
    54f6:	0031      	movs	r1, r6
    54f8:	220a      	movs	r2, #10
    54fa:	9804      	ldr	r0, [sp, #16]
    54fc:	f7ff f839 	bl	4572 <__multadd>
    5500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5502:	0006      	movs	r6, r0
    5504:	2b00      	cmp	r3, #0
    5506:	dc02      	bgt.n	550e <_dtoa_r+0x912>
    5508:	9b22      	ldr	r3, [sp, #136]	; 0x88
    550a:	2b02      	cmp	r3, #2
    550c:	dc6d      	bgt.n	55ea <_dtoa_r+0x9ee>
    550e:	2c00      	cmp	r4, #0
    5510:	dd05      	ble.n	551e <_dtoa_r+0x922>
    5512:	0031      	movs	r1, r6
    5514:	0022      	movs	r2, r4
    5516:	9804      	ldr	r0, [sp, #16]
    5518:	f7ff f99a 	bl	4850 <__lshift>
    551c:	0006      	movs	r6, r0
    551e:	0030      	movs	r0, r6
    5520:	2d00      	cmp	r5, #0
    5522:	d011      	beq.n	5548 <_dtoa_r+0x94c>
    5524:	6871      	ldr	r1, [r6, #4]
    5526:	9804      	ldr	r0, [sp, #16]
    5528:	f7fe ffd2 	bl	44d0 <_Balloc>
    552c:	0031      	movs	r1, r6
    552e:	0004      	movs	r4, r0
    5530:	6933      	ldr	r3, [r6, #16]
    5532:	310c      	adds	r1, #12
    5534:	1c9a      	adds	r2, r3, #2
    5536:	0092      	lsls	r2, r2, #2
    5538:	300c      	adds	r0, #12
    553a:	f7fe fdf5 	bl	4128 <memcpy>
    553e:	2201      	movs	r2, #1
    5540:	0021      	movs	r1, r4
    5542:	9804      	ldr	r0, [sp, #16]
    5544:	f7ff f984 	bl	4850 <__lshift>
    5548:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    554a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    554c:	3f01      	subs	r7, #1
    554e:	930b      	str	r3, [sp, #44]	; 0x2c
    5550:	19db      	adds	r3, r3, r7
    5552:	0037      	movs	r7, r6
    5554:	0006      	movs	r6, r0
    5556:	930f      	str	r3, [sp, #60]	; 0x3c
    5558:	9908      	ldr	r1, [sp, #32]
    555a:	9805      	ldr	r0, [sp, #20]
    555c:	f7ff faca 	bl	4af4 <quorem>
    5560:	0039      	movs	r1, r7
    5562:	900d      	str	r0, [sp, #52]	; 0x34
    5564:	0004      	movs	r4, r0
    5566:	9805      	ldr	r0, [sp, #20]
    5568:	f7ff f9c3 	bl	48f2 <__mcmp>
    556c:	0032      	movs	r2, r6
    556e:	900e      	str	r0, [sp, #56]	; 0x38
    5570:	9908      	ldr	r1, [sp, #32]
    5572:	9804      	ldr	r0, [sp, #16]
    5574:	f7ff f9d6 	bl	4924 <__mdiff>
    5578:	2301      	movs	r3, #1
    557a:	930c      	str	r3, [sp, #48]	; 0x30
    557c:	68c3      	ldr	r3, [r0, #12]
    557e:	3430      	adds	r4, #48	; 0x30
    5580:	0005      	movs	r5, r0
    5582:	2b00      	cmp	r3, #0
    5584:	d104      	bne.n	5590 <_dtoa_r+0x994>
    5586:	0001      	movs	r1, r0
    5588:	9805      	ldr	r0, [sp, #20]
    558a:	f7ff f9b2 	bl	48f2 <__mcmp>
    558e:	900c      	str	r0, [sp, #48]	; 0x30
    5590:	0029      	movs	r1, r5
    5592:	9804      	ldr	r0, [sp, #16]
    5594:	f7fe ffd4 	bl	4540 <_Bfree>
    5598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    559a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    559c:	4313      	orrs	r3, r2
    559e:	d000      	beq.n	55a2 <_dtoa_r+0x9a6>
    55a0:	e089      	b.n	56b6 <_dtoa_r+0xaba>
    55a2:	9a06      	ldr	r2, [sp, #24]
    55a4:	3301      	adds	r3, #1
    55a6:	4213      	tst	r3, r2
    55a8:	d000      	beq.n	55ac <_dtoa_r+0x9b0>
    55aa:	e084      	b.n	56b6 <_dtoa_r+0xaba>
    55ac:	2c39      	cmp	r4, #57	; 0x39
    55ae:	d100      	bne.n	55b2 <_dtoa_r+0x9b6>
    55b0:	e0a3      	b.n	56fa <_dtoa_r+0xafe>
    55b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    55b4:	2b00      	cmp	r3, #0
    55b6:	dd01      	ble.n	55bc <_dtoa_r+0x9c0>
    55b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    55ba:	3431      	adds	r4, #49	; 0x31
    55bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    55be:	1c5d      	adds	r5, r3, #1
    55c0:	701c      	strb	r4, [r3, #0]
    55c2:	e027      	b.n	5614 <_dtoa_r+0xa18>
    55c4:	2b04      	cmp	r3, #4
    55c6:	d100      	bne.n	55ca <_dtoa_r+0x9ce>
    55c8:	e769      	b.n	549e <_dtoa_r+0x8a2>
    55ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    55cc:	331c      	adds	r3, #28
    55ce:	18d2      	adds	r2, r2, r3
    55d0:	920b      	str	r2, [sp, #44]	; 0x2c
    55d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    55d4:	18e4      	adds	r4, r4, r3
    55d6:	18d3      	adds	r3, r2, r3
    55d8:	e760      	b.n	549c <_dtoa_r+0x8a0>
    55da:	0003      	movs	r3, r0
    55dc:	e7f5      	b.n	55ca <_dtoa_r+0x9ce>
    55de:	2f00      	cmp	r7, #0
    55e0:	dc3c      	bgt.n	565c <_dtoa_r+0xa60>
    55e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    55e4:	2b02      	cmp	r3, #2
    55e6:	dd39      	ble.n	565c <_dtoa_r+0xa60>
    55e8:	970d      	str	r7, [sp, #52]	; 0x34
    55ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    55ec:	2b00      	cmp	r3, #0
    55ee:	d10c      	bne.n	560a <_dtoa_r+0xa0e>
    55f0:	9908      	ldr	r1, [sp, #32]
    55f2:	2205      	movs	r2, #5
    55f4:	9804      	ldr	r0, [sp, #16]
    55f6:	f7fe ffbc 	bl	4572 <__multadd>
    55fa:	9008      	str	r0, [sp, #32]
    55fc:	0001      	movs	r1, r0
    55fe:	9805      	ldr	r0, [sp, #20]
    5600:	f7ff f977 	bl	48f2 <__mcmp>
    5604:	2800      	cmp	r0, #0
    5606:	dd00      	ble.n	560a <_dtoa_r+0xa0e>
    5608:	e55a      	b.n	50c0 <_dtoa_r+0x4c4>
    560a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    560c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    560e:	43db      	mvns	r3, r3
    5610:	9303      	str	r3, [sp, #12]
    5612:	2700      	movs	r7, #0
    5614:	9908      	ldr	r1, [sp, #32]
    5616:	9804      	ldr	r0, [sp, #16]
    5618:	f7fe ff92 	bl	4540 <_Bfree>
    561c:	2e00      	cmp	r6, #0
    561e:	d100      	bne.n	5622 <_dtoa_r+0xa26>
    5620:	e63f      	b.n	52a2 <_dtoa_r+0x6a6>
    5622:	2f00      	cmp	r7, #0
    5624:	d005      	beq.n	5632 <_dtoa_r+0xa36>
    5626:	42b7      	cmp	r7, r6
    5628:	d003      	beq.n	5632 <_dtoa_r+0xa36>
    562a:	0039      	movs	r1, r7
    562c:	9804      	ldr	r0, [sp, #16]
    562e:	f7fe ff87 	bl	4540 <_Bfree>
    5632:	0031      	movs	r1, r6
    5634:	9804      	ldr	r0, [sp, #16]
    5636:	f7fe ff83 	bl	4540 <_Bfree>
    563a:	e632      	b.n	52a2 <_dtoa_r+0x6a6>
    563c:	9508      	str	r5, [sp, #32]
    563e:	002e      	movs	r6, r5
    5640:	e7e3      	b.n	560a <_dtoa_r+0xa0e>
    5642:	2300      	movs	r3, #0
    5644:	9308      	str	r3, [sp, #32]
    5646:	001e      	movs	r6, r3
    5648:	e7df      	b.n	560a <_dtoa_r+0xa0e>
    564a:	46c0      	nop			; (mov r8, r8)
    564c:	40240000 	.word	0x40240000
    5650:	00000433 	.word	0x00000433
    5654:	9603      	str	r6, [sp, #12]
    5656:	9508      	str	r5, [sp, #32]
    5658:	002e      	movs	r6, r5
    565a:	e531      	b.n	50c0 <_dtoa_r+0x4c4>
    565c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    565e:	970d      	str	r7, [sp, #52]	; 0x34
    5660:	2b00      	cmp	r3, #0
    5662:	d000      	beq.n	5666 <_dtoa_r+0xa6a>
    5664:	e753      	b.n	550e <_dtoa_r+0x912>
    5666:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    5668:	9908      	ldr	r1, [sp, #32]
    566a:	9805      	ldr	r0, [sp, #20]
    566c:	f7ff fa42 	bl	4af4 <quorem>
    5670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5672:	3030      	adds	r0, #48	; 0x30
    5674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5676:	7028      	strb	r0, [r5, #0]
    5678:	3501      	adds	r5, #1
    567a:	0004      	movs	r4, r0
    567c:	1aeb      	subs	r3, r5, r3
    567e:	429a      	cmp	r2, r3
    5680:	dc78      	bgt.n	5774 <_dtoa_r+0xb78>
    5682:	1e15      	subs	r5, r2, #0
    5684:	dc00      	bgt.n	5688 <_dtoa_r+0xa8c>
    5686:	2501      	movs	r5, #1
    5688:	2700      	movs	r7, #0
    568a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    568c:	195d      	adds	r5, r3, r5
    568e:	9905      	ldr	r1, [sp, #20]
    5690:	2201      	movs	r2, #1
    5692:	9804      	ldr	r0, [sp, #16]
    5694:	f7ff f8dc 	bl	4850 <__lshift>
    5698:	9908      	ldr	r1, [sp, #32]
    569a:	9005      	str	r0, [sp, #20]
    569c:	f7ff f929 	bl	48f2 <__mcmp>
    56a0:	2800      	cmp	r0, #0
    56a2:	dc2f      	bgt.n	5704 <_dtoa_r+0xb08>
    56a4:	d101      	bne.n	56aa <_dtoa_r+0xaae>
    56a6:	07e3      	lsls	r3, r4, #31
    56a8:	d42c      	bmi.n	5704 <_dtoa_r+0xb08>
    56aa:	1e6b      	subs	r3, r5, #1
    56ac:	781a      	ldrb	r2, [r3, #0]
    56ae:	2a30      	cmp	r2, #48	; 0x30
    56b0:	d1b0      	bne.n	5614 <_dtoa_r+0xa18>
    56b2:	001d      	movs	r5, r3
    56b4:	e7f9      	b.n	56aa <_dtoa_r+0xaae>
    56b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    56b8:	2b00      	cmp	r3, #0
    56ba:	db07      	blt.n	56cc <_dtoa_r+0xad0>
    56bc:	001d      	movs	r5, r3
    56be:	9b22      	ldr	r3, [sp, #136]	; 0x88
    56c0:	431d      	orrs	r5, r3
    56c2:	d126      	bne.n	5712 <_dtoa_r+0xb16>
    56c4:	2301      	movs	r3, #1
    56c6:	9a06      	ldr	r2, [sp, #24]
    56c8:	4213      	tst	r3, r2
    56ca:	d122      	bne.n	5712 <_dtoa_r+0xb16>
    56cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    56ce:	2b00      	cmp	r3, #0
    56d0:	dc00      	bgt.n	56d4 <_dtoa_r+0xad8>
    56d2:	e773      	b.n	55bc <_dtoa_r+0x9c0>
    56d4:	9905      	ldr	r1, [sp, #20]
    56d6:	2201      	movs	r2, #1
    56d8:	9804      	ldr	r0, [sp, #16]
    56da:	f7ff f8b9 	bl	4850 <__lshift>
    56de:	9908      	ldr	r1, [sp, #32]
    56e0:	9005      	str	r0, [sp, #20]
    56e2:	f7ff f906 	bl	48f2 <__mcmp>
    56e6:	2800      	cmp	r0, #0
    56e8:	dc04      	bgt.n	56f4 <_dtoa_r+0xaf8>
    56ea:	d000      	beq.n	56ee <_dtoa_r+0xaf2>
    56ec:	e766      	b.n	55bc <_dtoa_r+0x9c0>
    56ee:	07e3      	lsls	r3, r4, #31
    56f0:	d400      	bmi.n	56f4 <_dtoa_r+0xaf8>
    56f2:	e763      	b.n	55bc <_dtoa_r+0x9c0>
    56f4:	2c39      	cmp	r4, #57	; 0x39
    56f6:	d000      	beq.n	56fa <_dtoa_r+0xafe>
    56f8:	e75e      	b.n	55b8 <_dtoa_r+0x9bc>
    56fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    56fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    56fe:	1c5d      	adds	r5, r3, #1
    5700:	2339      	movs	r3, #57	; 0x39
    5702:	7013      	strb	r3, [r2, #0]
    5704:	1e6b      	subs	r3, r5, #1
    5706:	781a      	ldrb	r2, [r3, #0]
    5708:	2a39      	cmp	r2, #57	; 0x39
    570a:	d03b      	beq.n	5784 <_dtoa_r+0xb88>
    570c:	3201      	adds	r2, #1
    570e:	701a      	strb	r2, [r3, #0]
    5710:	e780      	b.n	5614 <_dtoa_r+0xa18>
    5712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5714:	3301      	adds	r3, #1
    5716:	930d      	str	r3, [sp, #52]	; 0x34
    5718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    571a:	2b00      	cmp	r3, #0
    571c:	dd05      	ble.n	572a <_dtoa_r+0xb2e>
    571e:	2c39      	cmp	r4, #57	; 0x39
    5720:	d0eb      	beq.n	56fa <_dtoa_r+0xafe>
    5722:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    5724:	3401      	adds	r4, #1
    5726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5728:	e74a      	b.n	55c0 <_dtoa_r+0x9c4>
    572a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    572c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    572e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    5730:	701c      	strb	r4, [r3, #0]
    5732:	4293      	cmp	r3, r2
    5734:	d0ab      	beq.n	568e <_dtoa_r+0xa92>
    5736:	2300      	movs	r3, #0
    5738:	220a      	movs	r2, #10
    573a:	9905      	ldr	r1, [sp, #20]
    573c:	9804      	ldr	r0, [sp, #16]
    573e:	f7fe ff18 	bl	4572 <__multadd>
    5742:	2300      	movs	r3, #0
    5744:	9005      	str	r0, [sp, #20]
    5746:	220a      	movs	r2, #10
    5748:	0039      	movs	r1, r7
    574a:	9804      	ldr	r0, [sp, #16]
    574c:	42b7      	cmp	r7, r6
    574e:	d106      	bne.n	575e <_dtoa_r+0xb62>
    5750:	f7fe ff0f 	bl	4572 <__multadd>
    5754:	0007      	movs	r7, r0
    5756:	0006      	movs	r6, r0
    5758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    575a:	930b      	str	r3, [sp, #44]	; 0x2c
    575c:	e6fc      	b.n	5558 <_dtoa_r+0x95c>
    575e:	f7fe ff08 	bl	4572 <__multadd>
    5762:	0031      	movs	r1, r6
    5764:	0007      	movs	r7, r0
    5766:	2300      	movs	r3, #0
    5768:	220a      	movs	r2, #10
    576a:	9804      	ldr	r0, [sp, #16]
    576c:	f7fe ff01 	bl	4572 <__multadd>
    5770:	0006      	movs	r6, r0
    5772:	e7f1      	b.n	5758 <_dtoa_r+0xb5c>
    5774:	2300      	movs	r3, #0
    5776:	220a      	movs	r2, #10
    5778:	9905      	ldr	r1, [sp, #20]
    577a:	9804      	ldr	r0, [sp, #16]
    577c:	f7fe fef9 	bl	4572 <__multadd>
    5780:	9005      	str	r0, [sp, #20]
    5782:	e771      	b.n	5668 <_dtoa_r+0xa6c>
    5784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5786:	429a      	cmp	r2, r3
    5788:	d105      	bne.n	5796 <_dtoa_r+0xb9a>
    578a:	9b03      	ldr	r3, [sp, #12]
    578c:	3301      	adds	r3, #1
    578e:	9303      	str	r3, [sp, #12]
    5790:	2331      	movs	r3, #49	; 0x31
    5792:	7013      	strb	r3, [r2, #0]
    5794:	e73e      	b.n	5614 <_dtoa_r+0xa18>
    5796:	001d      	movs	r5, r3
    5798:	e7b4      	b.n	5704 <_dtoa_r+0xb08>
    579a:	4b0a      	ldr	r3, [pc, #40]	; (57c4 <_dtoa_r+0xbc8>)
    579c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    579e:	930a      	str	r3, [sp, #40]	; 0x28
    57a0:	4b09      	ldr	r3, [pc, #36]	; (57c8 <_dtoa_r+0xbcc>)
    57a2:	2a00      	cmp	r2, #0
    57a4:	d001      	beq.n	57aa <_dtoa_r+0xbae>
    57a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    57a8:	6013      	str	r3, [r2, #0]
    57aa:	980a      	ldr	r0, [sp, #40]	; 0x28
    57ac:	b01d      	add	sp, #116	; 0x74
    57ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    57b2:	2b00      	cmp	r3, #0
    57b4:	dd00      	ble.n	57b8 <_dtoa_r+0xbbc>
    57b6:	e756      	b.n	5666 <_dtoa_r+0xa6a>
    57b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    57ba:	2b02      	cmp	r3, #2
    57bc:	dc00      	bgt.n	57c0 <_dtoa_r+0xbc4>
    57be:	e752      	b.n	5666 <_dtoa_r+0xa6a>
    57c0:	e713      	b.n	55ea <_dtoa_r+0x9ee>
    57c2:	46c0      	nop			; (mov r8, r8)
    57c4:	000063dc 	.word	0x000063dc
    57c8:	000063e4 	.word	0x000063e4

000057cc <__gnu_thumb1_case_uqi>:
    57cc:	b402      	push	{r1}
    57ce:	4671      	mov	r1, lr
    57d0:	0849      	lsrs	r1, r1, #1
    57d2:	0049      	lsls	r1, r1, #1
    57d4:	5c09      	ldrb	r1, [r1, r0]
    57d6:	0049      	lsls	r1, r1, #1
    57d8:	448e      	add	lr, r1
    57da:	bc02      	pop	{r1}
    57dc:	4770      	bx	lr
    57de:	46c0      	nop			; (mov r8, r8)

000057e0 <__aeabi_dadd>:
    57e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57e2:	4645      	mov	r5, r8
    57e4:	46de      	mov	lr, fp
    57e6:	4657      	mov	r7, sl
    57e8:	464e      	mov	r6, r9
    57ea:	030c      	lsls	r4, r1, #12
    57ec:	b5e0      	push	{r5, r6, r7, lr}
    57ee:	004e      	lsls	r6, r1, #1
    57f0:	0fc9      	lsrs	r1, r1, #31
    57f2:	4688      	mov	r8, r1
    57f4:	000d      	movs	r5, r1
    57f6:	0a61      	lsrs	r1, r4, #9
    57f8:	0f44      	lsrs	r4, r0, #29
    57fa:	430c      	orrs	r4, r1
    57fc:	00c7      	lsls	r7, r0, #3
    57fe:	0319      	lsls	r1, r3, #12
    5800:	0058      	lsls	r0, r3, #1
    5802:	0fdb      	lsrs	r3, r3, #31
    5804:	469b      	mov	fp, r3
    5806:	0a4b      	lsrs	r3, r1, #9
    5808:	0f51      	lsrs	r1, r2, #29
    580a:	430b      	orrs	r3, r1
    580c:	0d76      	lsrs	r6, r6, #21
    580e:	0d40      	lsrs	r0, r0, #21
    5810:	0019      	movs	r1, r3
    5812:	00d2      	lsls	r2, r2, #3
    5814:	45d8      	cmp	r8, fp
    5816:	d100      	bne.n	581a <__aeabi_dadd+0x3a>
    5818:	e0ae      	b.n	5978 <__aeabi_dadd+0x198>
    581a:	1a35      	subs	r5, r6, r0
    581c:	2d00      	cmp	r5, #0
    581e:	dc00      	bgt.n	5822 <__aeabi_dadd+0x42>
    5820:	e0f6      	b.n	5a10 <__aeabi_dadd+0x230>
    5822:	2800      	cmp	r0, #0
    5824:	d10f      	bne.n	5846 <__aeabi_dadd+0x66>
    5826:	4313      	orrs	r3, r2
    5828:	d100      	bne.n	582c <__aeabi_dadd+0x4c>
    582a:	e0db      	b.n	59e4 <__aeabi_dadd+0x204>
    582c:	1e6b      	subs	r3, r5, #1
    582e:	2b00      	cmp	r3, #0
    5830:	d000      	beq.n	5834 <__aeabi_dadd+0x54>
    5832:	e137      	b.n	5aa4 <__aeabi_dadd+0x2c4>
    5834:	1aba      	subs	r2, r7, r2
    5836:	4297      	cmp	r7, r2
    5838:	41bf      	sbcs	r7, r7
    583a:	1a64      	subs	r4, r4, r1
    583c:	427f      	negs	r7, r7
    583e:	1be4      	subs	r4, r4, r7
    5840:	2601      	movs	r6, #1
    5842:	0017      	movs	r7, r2
    5844:	e024      	b.n	5890 <__aeabi_dadd+0xb0>
    5846:	4bc6      	ldr	r3, [pc, #792]	; (5b60 <__aeabi_dadd+0x380>)
    5848:	429e      	cmp	r6, r3
    584a:	d04d      	beq.n	58e8 <__aeabi_dadd+0x108>
    584c:	2380      	movs	r3, #128	; 0x80
    584e:	041b      	lsls	r3, r3, #16
    5850:	4319      	orrs	r1, r3
    5852:	2d38      	cmp	r5, #56	; 0x38
    5854:	dd00      	ble.n	5858 <__aeabi_dadd+0x78>
    5856:	e107      	b.n	5a68 <__aeabi_dadd+0x288>
    5858:	2d1f      	cmp	r5, #31
    585a:	dd00      	ble.n	585e <__aeabi_dadd+0x7e>
    585c:	e138      	b.n	5ad0 <__aeabi_dadd+0x2f0>
    585e:	2020      	movs	r0, #32
    5860:	1b43      	subs	r3, r0, r5
    5862:	469a      	mov	sl, r3
    5864:	000b      	movs	r3, r1
    5866:	4650      	mov	r0, sl
    5868:	4083      	lsls	r3, r0
    586a:	4699      	mov	r9, r3
    586c:	0013      	movs	r3, r2
    586e:	4648      	mov	r0, r9
    5870:	40eb      	lsrs	r3, r5
    5872:	4318      	orrs	r0, r3
    5874:	0003      	movs	r3, r0
    5876:	4650      	mov	r0, sl
    5878:	4082      	lsls	r2, r0
    587a:	1e50      	subs	r0, r2, #1
    587c:	4182      	sbcs	r2, r0
    587e:	40e9      	lsrs	r1, r5
    5880:	431a      	orrs	r2, r3
    5882:	1aba      	subs	r2, r7, r2
    5884:	1a61      	subs	r1, r4, r1
    5886:	4297      	cmp	r7, r2
    5888:	41a4      	sbcs	r4, r4
    588a:	0017      	movs	r7, r2
    588c:	4264      	negs	r4, r4
    588e:	1b0c      	subs	r4, r1, r4
    5890:	0223      	lsls	r3, r4, #8
    5892:	d562      	bpl.n	595a <__aeabi_dadd+0x17a>
    5894:	0264      	lsls	r4, r4, #9
    5896:	0a65      	lsrs	r5, r4, #9
    5898:	2d00      	cmp	r5, #0
    589a:	d100      	bne.n	589e <__aeabi_dadd+0xbe>
    589c:	e0df      	b.n	5a5e <__aeabi_dadd+0x27e>
    589e:	0028      	movs	r0, r5
    58a0:	f7fe fa28 	bl	3cf4 <__clzsi2>
    58a4:	0003      	movs	r3, r0
    58a6:	3b08      	subs	r3, #8
    58a8:	2b1f      	cmp	r3, #31
    58aa:	dd00      	ble.n	58ae <__aeabi_dadd+0xce>
    58ac:	e0d2      	b.n	5a54 <__aeabi_dadd+0x274>
    58ae:	2220      	movs	r2, #32
    58b0:	003c      	movs	r4, r7
    58b2:	1ad2      	subs	r2, r2, r3
    58b4:	409d      	lsls	r5, r3
    58b6:	40d4      	lsrs	r4, r2
    58b8:	409f      	lsls	r7, r3
    58ba:	4325      	orrs	r5, r4
    58bc:	429e      	cmp	r6, r3
    58be:	dd00      	ble.n	58c2 <__aeabi_dadd+0xe2>
    58c0:	e0c4      	b.n	5a4c <__aeabi_dadd+0x26c>
    58c2:	1b9e      	subs	r6, r3, r6
    58c4:	1c73      	adds	r3, r6, #1
    58c6:	2b1f      	cmp	r3, #31
    58c8:	dd00      	ble.n	58cc <__aeabi_dadd+0xec>
    58ca:	e0f1      	b.n	5ab0 <__aeabi_dadd+0x2d0>
    58cc:	2220      	movs	r2, #32
    58ce:	0038      	movs	r0, r7
    58d0:	0029      	movs	r1, r5
    58d2:	1ad2      	subs	r2, r2, r3
    58d4:	40d8      	lsrs	r0, r3
    58d6:	4091      	lsls	r1, r2
    58d8:	4097      	lsls	r7, r2
    58da:	002c      	movs	r4, r5
    58dc:	4301      	orrs	r1, r0
    58de:	1e78      	subs	r0, r7, #1
    58e0:	4187      	sbcs	r7, r0
    58e2:	40dc      	lsrs	r4, r3
    58e4:	2600      	movs	r6, #0
    58e6:	430f      	orrs	r7, r1
    58e8:	077b      	lsls	r3, r7, #29
    58ea:	d009      	beq.n	5900 <__aeabi_dadd+0x120>
    58ec:	230f      	movs	r3, #15
    58ee:	403b      	ands	r3, r7
    58f0:	2b04      	cmp	r3, #4
    58f2:	d005      	beq.n	5900 <__aeabi_dadd+0x120>
    58f4:	1d3b      	adds	r3, r7, #4
    58f6:	42bb      	cmp	r3, r7
    58f8:	41bf      	sbcs	r7, r7
    58fa:	427f      	negs	r7, r7
    58fc:	19e4      	adds	r4, r4, r7
    58fe:	001f      	movs	r7, r3
    5900:	0223      	lsls	r3, r4, #8
    5902:	d52c      	bpl.n	595e <__aeabi_dadd+0x17e>
    5904:	4b96      	ldr	r3, [pc, #600]	; (5b60 <__aeabi_dadd+0x380>)
    5906:	3601      	adds	r6, #1
    5908:	429e      	cmp	r6, r3
    590a:	d100      	bne.n	590e <__aeabi_dadd+0x12e>
    590c:	e09a      	b.n	5a44 <__aeabi_dadd+0x264>
    590e:	4645      	mov	r5, r8
    5910:	4b94      	ldr	r3, [pc, #592]	; (5b64 <__aeabi_dadd+0x384>)
    5912:	08ff      	lsrs	r7, r7, #3
    5914:	401c      	ands	r4, r3
    5916:	0760      	lsls	r0, r4, #29
    5918:	0576      	lsls	r6, r6, #21
    591a:	0264      	lsls	r4, r4, #9
    591c:	4307      	orrs	r7, r0
    591e:	0b24      	lsrs	r4, r4, #12
    5920:	0d76      	lsrs	r6, r6, #21
    5922:	2100      	movs	r1, #0
    5924:	0324      	lsls	r4, r4, #12
    5926:	0b23      	lsrs	r3, r4, #12
    5928:	0d0c      	lsrs	r4, r1, #20
    592a:	4a8f      	ldr	r2, [pc, #572]	; (5b68 <__aeabi_dadd+0x388>)
    592c:	0524      	lsls	r4, r4, #20
    592e:	431c      	orrs	r4, r3
    5930:	4014      	ands	r4, r2
    5932:	0533      	lsls	r3, r6, #20
    5934:	4323      	orrs	r3, r4
    5936:	005b      	lsls	r3, r3, #1
    5938:	07ed      	lsls	r5, r5, #31
    593a:	085b      	lsrs	r3, r3, #1
    593c:	432b      	orrs	r3, r5
    593e:	0038      	movs	r0, r7
    5940:	0019      	movs	r1, r3
    5942:	bc3c      	pop	{r2, r3, r4, r5}
    5944:	4690      	mov	r8, r2
    5946:	4699      	mov	r9, r3
    5948:	46a2      	mov	sl, r4
    594a:	46ab      	mov	fp, r5
    594c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    594e:	4664      	mov	r4, ip
    5950:	4304      	orrs	r4, r0
    5952:	d100      	bne.n	5956 <__aeabi_dadd+0x176>
    5954:	e211      	b.n	5d7a <__aeabi_dadd+0x59a>
    5956:	0004      	movs	r4, r0
    5958:	4667      	mov	r7, ip
    595a:	077b      	lsls	r3, r7, #29
    595c:	d1c6      	bne.n	58ec <__aeabi_dadd+0x10c>
    595e:	4645      	mov	r5, r8
    5960:	0760      	lsls	r0, r4, #29
    5962:	08ff      	lsrs	r7, r7, #3
    5964:	4307      	orrs	r7, r0
    5966:	08e4      	lsrs	r4, r4, #3
    5968:	4b7d      	ldr	r3, [pc, #500]	; (5b60 <__aeabi_dadd+0x380>)
    596a:	429e      	cmp	r6, r3
    596c:	d030      	beq.n	59d0 <__aeabi_dadd+0x1f0>
    596e:	0324      	lsls	r4, r4, #12
    5970:	0576      	lsls	r6, r6, #21
    5972:	0b24      	lsrs	r4, r4, #12
    5974:	0d76      	lsrs	r6, r6, #21
    5976:	e7d4      	b.n	5922 <__aeabi_dadd+0x142>
    5978:	1a33      	subs	r3, r6, r0
    597a:	469a      	mov	sl, r3
    597c:	2b00      	cmp	r3, #0
    597e:	dd78      	ble.n	5a72 <__aeabi_dadd+0x292>
    5980:	2800      	cmp	r0, #0
    5982:	d031      	beq.n	59e8 <__aeabi_dadd+0x208>
    5984:	4876      	ldr	r0, [pc, #472]	; (5b60 <__aeabi_dadd+0x380>)
    5986:	4286      	cmp	r6, r0
    5988:	d0ae      	beq.n	58e8 <__aeabi_dadd+0x108>
    598a:	2080      	movs	r0, #128	; 0x80
    598c:	0400      	lsls	r0, r0, #16
    598e:	4301      	orrs	r1, r0
    5990:	4653      	mov	r3, sl
    5992:	2b38      	cmp	r3, #56	; 0x38
    5994:	dc00      	bgt.n	5998 <__aeabi_dadd+0x1b8>
    5996:	e0e9      	b.n	5b6c <__aeabi_dadd+0x38c>
    5998:	430a      	orrs	r2, r1
    599a:	1e51      	subs	r1, r2, #1
    599c:	418a      	sbcs	r2, r1
    599e:	2100      	movs	r1, #0
    59a0:	19d2      	adds	r2, r2, r7
    59a2:	42ba      	cmp	r2, r7
    59a4:	41bf      	sbcs	r7, r7
    59a6:	1909      	adds	r1, r1, r4
    59a8:	427c      	negs	r4, r7
    59aa:	0017      	movs	r7, r2
    59ac:	190c      	adds	r4, r1, r4
    59ae:	0223      	lsls	r3, r4, #8
    59b0:	d5d3      	bpl.n	595a <__aeabi_dadd+0x17a>
    59b2:	4b6b      	ldr	r3, [pc, #428]	; (5b60 <__aeabi_dadd+0x380>)
    59b4:	3601      	adds	r6, #1
    59b6:	429e      	cmp	r6, r3
    59b8:	d100      	bne.n	59bc <__aeabi_dadd+0x1dc>
    59ba:	e13a      	b.n	5c32 <__aeabi_dadd+0x452>
    59bc:	2001      	movs	r0, #1
    59be:	4b69      	ldr	r3, [pc, #420]	; (5b64 <__aeabi_dadd+0x384>)
    59c0:	401c      	ands	r4, r3
    59c2:	087b      	lsrs	r3, r7, #1
    59c4:	4007      	ands	r7, r0
    59c6:	431f      	orrs	r7, r3
    59c8:	07e0      	lsls	r0, r4, #31
    59ca:	4307      	orrs	r7, r0
    59cc:	0864      	lsrs	r4, r4, #1
    59ce:	e78b      	b.n	58e8 <__aeabi_dadd+0x108>
    59d0:	0023      	movs	r3, r4
    59d2:	433b      	orrs	r3, r7
    59d4:	d100      	bne.n	59d8 <__aeabi_dadd+0x1f8>
    59d6:	e1cb      	b.n	5d70 <__aeabi_dadd+0x590>
    59d8:	2280      	movs	r2, #128	; 0x80
    59da:	0312      	lsls	r2, r2, #12
    59dc:	4314      	orrs	r4, r2
    59de:	0324      	lsls	r4, r4, #12
    59e0:	0b24      	lsrs	r4, r4, #12
    59e2:	e79e      	b.n	5922 <__aeabi_dadd+0x142>
    59e4:	002e      	movs	r6, r5
    59e6:	e77f      	b.n	58e8 <__aeabi_dadd+0x108>
    59e8:	0008      	movs	r0, r1
    59ea:	4310      	orrs	r0, r2
    59ec:	d100      	bne.n	59f0 <__aeabi_dadd+0x210>
    59ee:	e0b4      	b.n	5b5a <__aeabi_dadd+0x37a>
    59f0:	1e58      	subs	r0, r3, #1
    59f2:	2800      	cmp	r0, #0
    59f4:	d000      	beq.n	59f8 <__aeabi_dadd+0x218>
    59f6:	e0de      	b.n	5bb6 <__aeabi_dadd+0x3d6>
    59f8:	18ba      	adds	r2, r7, r2
    59fa:	42ba      	cmp	r2, r7
    59fc:	419b      	sbcs	r3, r3
    59fe:	1864      	adds	r4, r4, r1
    5a00:	425b      	negs	r3, r3
    5a02:	18e4      	adds	r4, r4, r3
    5a04:	0017      	movs	r7, r2
    5a06:	2601      	movs	r6, #1
    5a08:	0223      	lsls	r3, r4, #8
    5a0a:	d5a6      	bpl.n	595a <__aeabi_dadd+0x17a>
    5a0c:	2602      	movs	r6, #2
    5a0e:	e7d5      	b.n	59bc <__aeabi_dadd+0x1dc>
    5a10:	2d00      	cmp	r5, #0
    5a12:	d16e      	bne.n	5af2 <__aeabi_dadd+0x312>
    5a14:	1c70      	adds	r0, r6, #1
    5a16:	0540      	lsls	r0, r0, #21
    5a18:	0d40      	lsrs	r0, r0, #21
    5a1a:	2801      	cmp	r0, #1
    5a1c:	dc00      	bgt.n	5a20 <__aeabi_dadd+0x240>
    5a1e:	e0f9      	b.n	5c14 <__aeabi_dadd+0x434>
    5a20:	1ab8      	subs	r0, r7, r2
    5a22:	4684      	mov	ip, r0
    5a24:	4287      	cmp	r7, r0
    5a26:	4180      	sbcs	r0, r0
    5a28:	1ae5      	subs	r5, r4, r3
    5a2a:	4240      	negs	r0, r0
    5a2c:	1a2d      	subs	r5, r5, r0
    5a2e:	0228      	lsls	r0, r5, #8
    5a30:	d400      	bmi.n	5a34 <__aeabi_dadd+0x254>
    5a32:	e089      	b.n	5b48 <__aeabi_dadd+0x368>
    5a34:	1bd7      	subs	r7, r2, r7
    5a36:	42ba      	cmp	r2, r7
    5a38:	4192      	sbcs	r2, r2
    5a3a:	1b1c      	subs	r4, r3, r4
    5a3c:	4252      	negs	r2, r2
    5a3e:	1aa5      	subs	r5, r4, r2
    5a40:	46d8      	mov	r8, fp
    5a42:	e729      	b.n	5898 <__aeabi_dadd+0xb8>
    5a44:	4645      	mov	r5, r8
    5a46:	2400      	movs	r4, #0
    5a48:	2700      	movs	r7, #0
    5a4a:	e76a      	b.n	5922 <__aeabi_dadd+0x142>
    5a4c:	4c45      	ldr	r4, [pc, #276]	; (5b64 <__aeabi_dadd+0x384>)
    5a4e:	1af6      	subs	r6, r6, r3
    5a50:	402c      	ands	r4, r5
    5a52:	e749      	b.n	58e8 <__aeabi_dadd+0x108>
    5a54:	003d      	movs	r5, r7
    5a56:	3828      	subs	r0, #40	; 0x28
    5a58:	4085      	lsls	r5, r0
    5a5a:	2700      	movs	r7, #0
    5a5c:	e72e      	b.n	58bc <__aeabi_dadd+0xdc>
    5a5e:	0038      	movs	r0, r7
    5a60:	f7fe f948 	bl	3cf4 <__clzsi2>
    5a64:	3020      	adds	r0, #32
    5a66:	e71d      	b.n	58a4 <__aeabi_dadd+0xc4>
    5a68:	430a      	orrs	r2, r1
    5a6a:	1e51      	subs	r1, r2, #1
    5a6c:	418a      	sbcs	r2, r1
    5a6e:	2100      	movs	r1, #0
    5a70:	e707      	b.n	5882 <__aeabi_dadd+0xa2>
    5a72:	2b00      	cmp	r3, #0
    5a74:	d000      	beq.n	5a78 <__aeabi_dadd+0x298>
    5a76:	e0f3      	b.n	5c60 <__aeabi_dadd+0x480>
    5a78:	1c70      	adds	r0, r6, #1
    5a7a:	0543      	lsls	r3, r0, #21
    5a7c:	0d5b      	lsrs	r3, r3, #21
    5a7e:	2b01      	cmp	r3, #1
    5a80:	dc00      	bgt.n	5a84 <__aeabi_dadd+0x2a4>
    5a82:	e0ad      	b.n	5be0 <__aeabi_dadd+0x400>
    5a84:	4b36      	ldr	r3, [pc, #216]	; (5b60 <__aeabi_dadd+0x380>)
    5a86:	4298      	cmp	r0, r3
    5a88:	d100      	bne.n	5a8c <__aeabi_dadd+0x2ac>
    5a8a:	e0d1      	b.n	5c30 <__aeabi_dadd+0x450>
    5a8c:	18ba      	adds	r2, r7, r2
    5a8e:	42ba      	cmp	r2, r7
    5a90:	41bf      	sbcs	r7, r7
    5a92:	1864      	adds	r4, r4, r1
    5a94:	427f      	negs	r7, r7
    5a96:	19e4      	adds	r4, r4, r7
    5a98:	07e7      	lsls	r7, r4, #31
    5a9a:	0852      	lsrs	r2, r2, #1
    5a9c:	4317      	orrs	r7, r2
    5a9e:	0864      	lsrs	r4, r4, #1
    5aa0:	0006      	movs	r6, r0
    5aa2:	e721      	b.n	58e8 <__aeabi_dadd+0x108>
    5aa4:	482e      	ldr	r0, [pc, #184]	; (5b60 <__aeabi_dadd+0x380>)
    5aa6:	4285      	cmp	r5, r0
    5aa8:	d100      	bne.n	5aac <__aeabi_dadd+0x2cc>
    5aaa:	e093      	b.n	5bd4 <__aeabi_dadd+0x3f4>
    5aac:	001d      	movs	r5, r3
    5aae:	e6d0      	b.n	5852 <__aeabi_dadd+0x72>
    5ab0:	0029      	movs	r1, r5
    5ab2:	3e1f      	subs	r6, #31
    5ab4:	40f1      	lsrs	r1, r6
    5ab6:	2b20      	cmp	r3, #32
    5ab8:	d100      	bne.n	5abc <__aeabi_dadd+0x2dc>
    5aba:	e08d      	b.n	5bd8 <__aeabi_dadd+0x3f8>
    5abc:	2240      	movs	r2, #64	; 0x40
    5abe:	1ad3      	subs	r3, r2, r3
    5ac0:	409d      	lsls	r5, r3
    5ac2:	432f      	orrs	r7, r5
    5ac4:	1e7d      	subs	r5, r7, #1
    5ac6:	41af      	sbcs	r7, r5
    5ac8:	2400      	movs	r4, #0
    5aca:	430f      	orrs	r7, r1
    5acc:	2600      	movs	r6, #0
    5ace:	e744      	b.n	595a <__aeabi_dadd+0x17a>
    5ad0:	002b      	movs	r3, r5
    5ad2:	0008      	movs	r0, r1
    5ad4:	3b20      	subs	r3, #32
    5ad6:	40d8      	lsrs	r0, r3
    5ad8:	0003      	movs	r3, r0
    5ada:	2d20      	cmp	r5, #32
    5adc:	d100      	bne.n	5ae0 <__aeabi_dadd+0x300>
    5ade:	e07d      	b.n	5bdc <__aeabi_dadd+0x3fc>
    5ae0:	2040      	movs	r0, #64	; 0x40
    5ae2:	1b45      	subs	r5, r0, r5
    5ae4:	40a9      	lsls	r1, r5
    5ae6:	430a      	orrs	r2, r1
    5ae8:	1e51      	subs	r1, r2, #1
    5aea:	418a      	sbcs	r2, r1
    5aec:	2100      	movs	r1, #0
    5aee:	431a      	orrs	r2, r3
    5af0:	e6c7      	b.n	5882 <__aeabi_dadd+0xa2>
    5af2:	2e00      	cmp	r6, #0
    5af4:	d050      	beq.n	5b98 <__aeabi_dadd+0x3b8>
    5af6:	4e1a      	ldr	r6, [pc, #104]	; (5b60 <__aeabi_dadd+0x380>)
    5af8:	42b0      	cmp	r0, r6
    5afa:	d057      	beq.n	5bac <__aeabi_dadd+0x3cc>
    5afc:	2680      	movs	r6, #128	; 0x80
    5afe:	426b      	negs	r3, r5
    5b00:	4699      	mov	r9, r3
    5b02:	0436      	lsls	r6, r6, #16
    5b04:	4334      	orrs	r4, r6
    5b06:	464b      	mov	r3, r9
    5b08:	2b38      	cmp	r3, #56	; 0x38
    5b0a:	dd00      	ble.n	5b0e <__aeabi_dadd+0x32e>
    5b0c:	e0d6      	b.n	5cbc <__aeabi_dadd+0x4dc>
    5b0e:	2b1f      	cmp	r3, #31
    5b10:	dd00      	ble.n	5b14 <__aeabi_dadd+0x334>
    5b12:	e135      	b.n	5d80 <__aeabi_dadd+0x5a0>
    5b14:	2620      	movs	r6, #32
    5b16:	1af5      	subs	r5, r6, r3
    5b18:	0026      	movs	r6, r4
    5b1a:	40ae      	lsls	r6, r5
    5b1c:	46b2      	mov	sl, r6
    5b1e:	003e      	movs	r6, r7
    5b20:	40de      	lsrs	r6, r3
    5b22:	46ac      	mov	ip, r5
    5b24:	0035      	movs	r5, r6
    5b26:	4656      	mov	r6, sl
    5b28:	432e      	orrs	r6, r5
    5b2a:	4665      	mov	r5, ip
    5b2c:	40af      	lsls	r7, r5
    5b2e:	1e7d      	subs	r5, r7, #1
    5b30:	41af      	sbcs	r7, r5
    5b32:	40dc      	lsrs	r4, r3
    5b34:	4337      	orrs	r7, r6
    5b36:	1bd7      	subs	r7, r2, r7
    5b38:	42ba      	cmp	r2, r7
    5b3a:	4192      	sbcs	r2, r2
    5b3c:	1b0c      	subs	r4, r1, r4
    5b3e:	4252      	negs	r2, r2
    5b40:	1aa4      	subs	r4, r4, r2
    5b42:	0006      	movs	r6, r0
    5b44:	46d8      	mov	r8, fp
    5b46:	e6a3      	b.n	5890 <__aeabi_dadd+0xb0>
    5b48:	4664      	mov	r4, ip
    5b4a:	4667      	mov	r7, ip
    5b4c:	432c      	orrs	r4, r5
    5b4e:	d000      	beq.n	5b52 <__aeabi_dadd+0x372>
    5b50:	e6a2      	b.n	5898 <__aeabi_dadd+0xb8>
    5b52:	2500      	movs	r5, #0
    5b54:	2600      	movs	r6, #0
    5b56:	2700      	movs	r7, #0
    5b58:	e706      	b.n	5968 <__aeabi_dadd+0x188>
    5b5a:	001e      	movs	r6, r3
    5b5c:	e6c4      	b.n	58e8 <__aeabi_dadd+0x108>
    5b5e:	46c0      	nop			; (mov r8, r8)
    5b60:	000007ff 	.word	0x000007ff
    5b64:	ff7fffff 	.word	0xff7fffff
    5b68:	800fffff 	.word	0x800fffff
    5b6c:	2b1f      	cmp	r3, #31
    5b6e:	dc63      	bgt.n	5c38 <__aeabi_dadd+0x458>
    5b70:	2020      	movs	r0, #32
    5b72:	1ac3      	subs	r3, r0, r3
    5b74:	0008      	movs	r0, r1
    5b76:	4098      	lsls	r0, r3
    5b78:	469c      	mov	ip, r3
    5b7a:	4683      	mov	fp, r0
    5b7c:	4653      	mov	r3, sl
    5b7e:	0010      	movs	r0, r2
    5b80:	40d8      	lsrs	r0, r3
    5b82:	0003      	movs	r3, r0
    5b84:	4658      	mov	r0, fp
    5b86:	4318      	orrs	r0, r3
    5b88:	4663      	mov	r3, ip
    5b8a:	409a      	lsls	r2, r3
    5b8c:	1e53      	subs	r3, r2, #1
    5b8e:	419a      	sbcs	r2, r3
    5b90:	4653      	mov	r3, sl
    5b92:	4302      	orrs	r2, r0
    5b94:	40d9      	lsrs	r1, r3
    5b96:	e703      	b.n	59a0 <__aeabi_dadd+0x1c0>
    5b98:	0026      	movs	r6, r4
    5b9a:	433e      	orrs	r6, r7
    5b9c:	d006      	beq.n	5bac <__aeabi_dadd+0x3cc>
    5b9e:	43eb      	mvns	r3, r5
    5ba0:	4699      	mov	r9, r3
    5ba2:	2b00      	cmp	r3, #0
    5ba4:	d0c7      	beq.n	5b36 <__aeabi_dadd+0x356>
    5ba6:	4e94      	ldr	r6, [pc, #592]	; (5df8 <__aeabi_dadd+0x618>)
    5ba8:	42b0      	cmp	r0, r6
    5baa:	d1ac      	bne.n	5b06 <__aeabi_dadd+0x326>
    5bac:	000c      	movs	r4, r1
    5bae:	0017      	movs	r7, r2
    5bb0:	0006      	movs	r6, r0
    5bb2:	46d8      	mov	r8, fp
    5bb4:	e698      	b.n	58e8 <__aeabi_dadd+0x108>
    5bb6:	4b90      	ldr	r3, [pc, #576]	; (5df8 <__aeabi_dadd+0x618>)
    5bb8:	459a      	cmp	sl, r3
    5bba:	d00b      	beq.n	5bd4 <__aeabi_dadd+0x3f4>
    5bbc:	4682      	mov	sl, r0
    5bbe:	e6e7      	b.n	5990 <__aeabi_dadd+0x1b0>
    5bc0:	2800      	cmp	r0, #0
    5bc2:	d000      	beq.n	5bc6 <__aeabi_dadd+0x3e6>
    5bc4:	e09e      	b.n	5d04 <__aeabi_dadd+0x524>
    5bc6:	0018      	movs	r0, r3
    5bc8:	4310      	orrs	r0, r2
    5bca:	d100      	bne.n	5bce <__aeabi_dadd+0x3ee>
    5bcc:	e0e9      	b.n	5da2 <__aeabi_dadd+0x5c2>
    5bce:	001c      	movs	r4, r3
    5bd0:	0017      	movs	r7, r2
    5bd2:	46d8      	mov	r8, fp
    5bd4:	4e88      	ldr	r6, [pc, #544]	; (5df8 <__aeabi_dadd+0x618>)
    5bd6:	e687      	b.n	58e8 <__aeabi_dadd+0x108>
    5bd8:	2500      	movs	r5, #0
    5bda:	e772      	b.n	5ac2 <__aeabi_dadd+0x2e2>
    5bdc:	2100      	movs	r1, #0
    5bde:	e782      	b.n	5ae6 <__aeabi_dadd+0x306>
    5be0:	0023      	movs	r3, r4
    5be2:	433b      	orrs	r3, r7
    5be4:	2e00      	cmp	r6, #0
    5be6:	d000      	beq.n	5bea <__aeabi_dadd+0x40a>
    5be8:	e0ab      	b.n	5d42 <__aeabi_dadd+0x562>
    5bea:	2b00      	cmp	r3, #0
    5bec:	d100      	bne.n	5bf0 <__aeabi_dadd+0x410>
    5bee:	e0e7      	b.n	5dc0 <__aeabi_dadd+0x5e0>
    5bf0:	000b      	movs	r3, r1
    5bf2:	4313      	orrs	r3, r2
    5bf4:	d100      	bne.n	5bf8 <__aeabi_dadd+0x418>
    5bf6:	e677      	b.n	58e8 <__aeabi_dadd+0x108>
    5bf8:	18ba      	adds	r2, r7, r2
    5bfa:	42ba      	cmp	r2, r7
    5bfc:	41bf      	sbcs	r7, r7
    5bfe:	1864      	adds	r4, r4, r1
    5c00:	427f      	negs	r7, r7
    5c02:	19e4      	adds	r4, r4, r7
    5c04:	0223      	lsls	r3, r4, #8
    5c06:	d400      	bmi.n	5c0a <__aeabi_dadd+0x42a>
    5c08:	e0f2      	b.n	5df0 <__aeabi_dadd+0x610>
    5c0a:	4b7c      	ldr	r3, [pc, #496]	; (5dfc <__aeabi_dadd+0x61c>)
    5c0c:	0017      	movs	r7, r2
    5c0e:	401c      	ands	r4, r3
    5c10:	0006      	movs	r6, r0
    5c12:	e669      	b.n	58e8 <__aeabi_dadd+0x108>
    5c14:	0020      	movs	r0, r4
    5c16:	4338      	orrs	r0, r7
    5c18:	2e00      	cmp	r6, #0
    5c1a:	d1d1      	bne.n	5bc0 <__aeabi_dadd+0x3e0>
    5c1c:	2800      	cmp	r0, #0
    5c1e:	d15b      	bne.n	5cd8 <__aeabi_dadd+0x4f8>
    5c20:	001c      	movs	r4, r3
    5c22:	4314      	orrs	r4, r2
    5c24:	d100      	bne.n	5c28 <__aeabi_dadd+0x448>
    5c26:	e0a8      	b.n	5d7a <__aeabi_dadd+0x59a>
    5c28:	001c      	movs	r4, r3
    5c2a:	0017      	movs	r7, r2
    5c2c:	46d8      	mov	r8, fp
    5c2e:	e65b      	b.n	58e8 <__aeabi_dadd+0x108>
    5c30:	0006      	movs	r6, r0
    5c32:	2400      	movs	r4, #0
    5c34:	2700      	movs	r7, #0
    5c36:	e697      	b.n	5968 <__aeabi_dadd+0x188>
    5c38:	4650      	mov	r0, sl
    5c3a:	000b      	movs	r3, r1
    5c3c:	3820      	subs	r0, #32
    5c3e:	40c3      	lsrs	r3, r0
    5c40:	4699      	mov	r9, r3
    5c42:	4653      	mov	r3, sl
    5c44:	2b20      	cmp	r3, #32
    5c46:	d100      	bne.n	5c4a <__aeabi_dadd+0x46a>
    5c48:	e095      	b.n	5d76 <__aeabi_dadd+0x596>
    5c4a:	2340      	movs	r3, #64	; 0x40
    5c4c:	4650      	mov	r0, sl
    5c4e:	1a1b      	subs	r3, r3, r0
    5c50:	4099      	lsls	r1, r3
    5c52:	430a      	orrs	r2, r1
    5c54:	1e51      	subs	r1, r2, #1
    5c56:	418a      	sbcs	r2, r1
    5c58:	464b      	mov	r3, r9
    5c5a:	2100      	movs	r1, #0
    5c5c:	431a      	orrs	r2, r3
    5c5e:	e69f      	b.n	59a0 <__aeabi_dadd+0x1c0>
    5c60:	2e00      	cmp	r6, #0
    5c62:	d130      	bne.n	5cc6 <__aeabi_dadd+0x4e6>
    5c64:	0026      	movs	r6, r4
    5c66:	433e      	orrs	r6, r7
    5c68:	d067      	beq.n	5d3a <__aeabi_dadd+0x55a>
    5c6a:	43db      	mvns	r3, r3
    5c6c:	469a      	mov	sl, r3
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d01c      	beq.n	5cac <__aeabi_dadd+0x4cc>
    5c72:	4e61      	ldr	r6, [pc, #388]	; (5df8 <__aeabi_dadd+0x618>)
    5c74:	42b0      	cmp	r0, r6
    5c76:	d060      	beq.n	5d3a <__aeabi_dadd+0x55a>
    5c78:	4653      	mov	r3, sl
    5c7a:	2b38      	cmp	r3, #56	; 0x38
    5c7c:	dd00      	ble.n	5c80 <__aeabi_dadd+0x4a0>
    5c7e:	e096      	b.n	5dae <__aeabi_dadd+0x5ce>
    5c80:	2b1f      	cmp	r3, #31
    5c82:	dd00      	ble.n	5c86 <__aeabi_dadd+0x4a6>
    5c84:	e09f      	b.n	5dc6 <__aeabi_dadd+0x5e6>
    5c86:	2620      	movs	r6, #32
    5c88:	1af3      	subs	r3, r6, r3
    5c8a:	0026      	movs	r6, r4
    5c8c:	409e      	lsls	r6, r3
    5c8e:	469c      	mov	ip, r3
    5c90:	46b3      	mov	fp, r6
    5c92:	4653      	mov	r3, sl
    5c94:	003e      	movs	r6, r7
    5c96:	40de      	lsrs	r6, r3
    5c98:	0033      	movs	r3, r6
    5c9a:	465e      	mov	r6, fp
    5c9c:	431e      	orrs	r6, r3
    5c9e:	4663      	mov	r3, ip
    5ca0:	409f      	lsls	r7, r3
    5ca2:	1e7b      	subs	r3, r7, #1
    5ca4:	419f      	sbcs	r7, r3
    5ca6:	4653      	mov	r3, sl
    5ca8:	40dc      	lsrs	r4, r3
    5caa:	4337      	orrs	r7, r6
    5cac:	18bf      	adds	r7, r7, r2
    5cae:	4297      	cmp	r7, r2
    5cb0:	4192      	sbcs	r2, r2
    5cb2:	1864      	adds	r4, r4, r1
    5cb4:	4252      	negs	r2, r2
    5cb6:	18a4      	adds	r4, r4, r2
    5cb8:	0006      	movs	r6, r0
    5cba:	e678      	b.n	59ae <__aeabi_dadd+0x1ce>
    5cbc:	4327      	orrs	r7, r4
    5cbe:	1e7c      	subs	r4, r7, #1
    5cc0:	41a7      	sbcs	r7, r4
    5cc2:	2400      	movs	r4, #0
    5cc4:	e737      	b.n	5b36 <__aeabi_dadd+0x356>
    5cc6:	4e4c      	ldr	r6, [pc, #304]	; (5df8 <__aeabi_dadd+0x618>)
    5cc8:	42b0      	cmp	r0, r6
    5cca:	d036      	beq.n	5d3a <__aeabi_dadd+0x55a>
    5ccc:	2680      	movs	r6, #128	; 0x80
    5cce:	425b      	negs	r3, r3
    5cd0:	0436      	lsls	r6, r6, #16
    5cd2:	469a      	mov	sl, r3
    5cd4:	4334      	orrs	r4, r6
    5cd6:	e7cf      	b.n	5c78 <__aeabi_dadd+0x498>
    5cd8:	0018      	movs	r0, r3
    5cda:	4310      	orrs	r0, r2
    5cdc:	d100      	bne.n	5ce0 <__aeabi_dadd+0x500>
    5cde:	e603      	b.n	58e8 <__aeabi_dadd+0x108>
    5ce0:	1ab8      	subs	r0, r7, r2
    5ce2:	4684      	mov	ip, r0
    5ce4:	4567      	cmp	r7, ip
    5ce6:	41ad      	sbcs	r5, r5
    5ce8:	1ae0      	subs	r0, r4, r3
    5cea:	426d      	negs	r5, r5
    5cec:	1b40      	subs	r0, r0, r5
    5cee:	0205      	lsls	r5, r0, #8
    5cf0:	d400      	bmi.n	5cf4 <__aeabi_dadd+0x514>
    5cf2:	e62c      	b.n	594e <__aeabi_dadd+0x16e>
    5cf4:	1bd7      	subs	r7, r2, r7
    5cf6:	42ba      	cmp	r2, r7
    5cf8:	4192      	sbcs	r2, r2
    5cfa:	1b1c      	subs	r4, r3, r4
    5cfc:	4252      	negs	r2, r2
    5cfe:	1aa4      	subs	r4, r4, r2
    5d00:	46d8      	mov	r8, fp
    5d02:	e5f1      	b.n	58e8 <__aeabi_dadd+0x108>
    5d04:	0018      	movs	r0, r3
    5d06:	4310      	orrs	r0, r2
    5d08:	d100      	bne.n	5d0c <__aeabi_dadd+0x52c>
    5d0a:	e763      	b.n	5bd4 <__aeabi_dadd+0x3f4>
    5d0c:	08f8      	lsrs	r0, r7, #3
    5d0e:	0767      	lsls	r7, r4, #29
    5d10:	4307      	orrs	r7, r0
    5d12:	2080      	movs	r0, #128	; 0x80
    5d14:	08e4      	lsrs	r4, r4, #3
    5d16:	0300      	lsls	r0, r0, #12
    5d18:	4204      	tst	r4, r0
    5d1a:	d008      	beq.n	5d2e <__aeabi_dadd+0x54e>
    5d1c:	08dd      	lsrs	r5, r3, #3
    5d1e:	4205      	tst	r5, r0
    5d20:	d105      	bne.n	5d2e <__aeabi_dadd+0x54e>
    5d22:	08d2      	lsrs	r2, r2, #3
    5d24:	0759      	lsls	r1, r3, #29
    5d26:	4311      	orrs	r1, r2
    5d28:	000f      	movs	r7, r1
    5d2a:	002c      	movs	r4, r5
    5d2c:	46d8      	mov	r8, fp
    5d2e:	0f7b      	lsrs	r3, r7, #29
    5d30:	00e4      	lsls	r4, r4, #3
    5d32:	431c      	orrs	r4, r3
    5d34:	00ff      	lsls	r7, r7, #3
    5d36:	4e30      	ldr	r6, [pc, #192]	; (5df8 <__aeabi_dadd+0x618>)
    5d38:	e5d6      	b.n	58e8 <__aeabi_dadd+0x108>
    5d3a:	000c      	movs	r4, r1
    5d3c:	0017      	movs	r7, r2
    5d3e:	0006      	movs	r6, r0
    5d40:	e5d2      	b.n	58e8 <__aeabi_dadd+0x108>
    5d42:	2b00      	cmp	r3, #0
    5d44:	d038      	beq.n	5db8 <__aeabi_dadd+0x5d8>
    5d46:	000b      	movs	r3, r1
    5d48:	4313      	orrs	r3, r2
    5d4a:	d100      	bne.n	5d4e <__aeabi_dadd+0x56e>
    5d4c:	e742      	b.n	5bd4 <__aeabi_dadd+0x3f4>
    5d4e:	08f8      	lsrs	r0, r7, #3
    5d50:	0767      	lsls	r7, r4, #29
    5d52:	4307      	orrs	r7, r0
    5d54:	2080      	movs	r0, #128	; 0x80
    5d56:	08e4      	lsrs	r4, r4, #3
    5d58:	0300      	lsls	r0, r0, #12
    5d5a:	4204      	tst	r4, r0
    5d5c:	d0e7      	beq.n	5d2e <__aeabi_dadd+0x54e>
    5d5e:	08cb      	lsrs	r3, r1, #3
    5d60:	4203      	tst	r3, r0
    5d62:	d1e4      	bne.n	5d2e <__aeabi_dadd+0x54e>
    5d64:	08d2      	lsrs	r2, r2, #3
    5d66:	0749      	lsls	r1, r1, #29
    5d68:	4311      	orrs	r1, r2
    5d6a:	000f      	movs	r7, r1
    5d6c:	001c      	movs	r4, r3
    5d6e:	e7de      	b.n	5d2e <__aeabi_dadd+0x54e>
    5d70:	2700      	movs	r7, #0
    5d72:	2400      	movs	r4, #0
    5d74:	e5d5      	b.n	5922 <__aeabi_dadd+0x142>
    5d76:	2100      	movs	r1, #0
    5d78:	e76b      	b.n	5c52 <__aeabi_dadd+0x472>
    5d7a:	2500      	movs	r5, #0
    5d7c:	2700      	movs	r7, #0
    5d7e:	e5f3      	b.n	5968 <__aeabi_dadd+0x188>
    5d80:	464e      	mov	r6, r9
    5d82:	0025      	movs	r5, r4
    5d84:	3e20      	subs	r6, #32
    5d86:	40f5      	lsrs	r5, r6
    5d88:	464b      	mov	r3, r9
    5d8a:	002e      	movs	r6, r5
    5d8c:	2b20      	cmp	r3, #32
    5d8e:	d02d      	beq.n	5dec <__aeabi_dadd+0x60c>
    5d90:	2540      	movs	r5, #64	; 0x40
    5d92:	1aed      	subs	r5, r5, r3
    5d94:	40ac      	lsls	r4, r5
    5d96:	4327      	orrs	r7, r4
    5d98:	1e7c      	subs	r4, r7, #1
    5d9a:	41a7      	sbcs	r7, r4
    5d9c:	2400      	movs	r4, #0
    5d9e:	4337      	orrs	r7, r6
    5da0:	e6c9      	b.n	5b36 <__aeabi_dadd+0x356>
    5da2:	2480      	movs	r4, #128	; 0x80
    5da4:	2500      	movs	r5, #0
    5da6:	0324      	lsls	r4, r4, #12
    5da8:	4e13      	ldr	r6, [pc, #76]	; (5df8 <__aeabi_dadd+0x618>)
    5daa:	2700      	movs	r7, #0
    5dac:	e5dc      	b.n	5968 <__aeabi_dadd+0x188>
    5dae:	4327      	orrs	r7, r4
    5db0:	1e7c      	subs	r4, r7, #1
    5db2:	41a7      	sbcs	r7, r4
    5db4:	2400      	movs	r4, #0
    5db6:	e779      	b.n	5cac <__aeabi_dadd+0x4cc>
    5db8:	000c      	movs	r4, r1
    5dba:	0017      	movs	r7, r2
    5dbc:	4e0e      	ldr	r6, [pc, #56]	; (5df8 <__aeabi_dadd+0x618>)
    5dbe:	e593      	b.n	58e8 <__aeabi_dadd+0x108>
    5dc0:	000c      	movs	r4, r1
    5dc2:	0017      	movs	r7, r2
    5dc4:	e590      	b.n	58e8 <__aeabi_dadd+0x108>
    5dc6:	4656      	mov	r6, sl
    5dc8:	0023      	movs	r3, r4
    5dca:	3e20      	subs	r6, #32
    5dcc:	40f3      	lsrs	r3, r6
    5dce:	4699      	mov	r9, r3
    5dd0:	4653      	mov	r3, sl
    5dd2:	2b20      	cmp	r3, #32
    5dd4:	d00e      	beq.n	5df4 <__aeabi_dadd+0x614>
    5dd6:	2340      	movs	r3, #64	; 0x40
    5dd8:	4656      	mov	r6, sl
    5dda:	1b9b      	subs	r3, r3, r6
    5ddc:	409c      	lsls	r4, r3
    5dde:	4327      	orrs	r7, r4
    5de0:	1e7c      	subs	r4, r7, #1
    5de2:	41a7      	sbcs	r7, r4
    5de4:	464b      	mov	r3, r9
    5de6:	2400      	movs	r4, #0
    5de8:	431f      	orrs	r7, r3
    5dea:	e75f      	b.n	5cac <__aeabi_dadd+0x4cc>
    5dec:	2400      	movs	r4, #0
    5dee:	e7d2      	b.n	5d96 <__aeabi_dadd+0x5b6>
    5df0:	0017      	movs	r7, r2
    5df2:	e5b2      	b.n	595a <__aeabi_dadd+0x17a>
    5df4:	2400      	movs	r4, #0
    5df6:	e7f2      	b.n	5dde <__aeabi_dadd+0x5fe>
    5df8:	000007ff 	.word	0x000007ff
    5dfc:	ff7fffff 	.word	0xff7fffff
    5e00:	682f2e2e 	.word	0x682f2e2e
    5e04:	732f6c61 	.word	0x732f6c61
    5e08:	682f6372 	.word	0x682f6372
    5e0c:	615f6c61 	.word	0x615f6c61
    5e10:	735f6364 	.word	0x735f6364
    5e14:	2e636e79 	.word	0x2e636e79
    5e18:	00000063 	.word	0x00000063
    5e1c:	682f2e2e 	.word	0x682f2e2e
    5e20:	732f6c61 	.word	0x732f6c61
    5e24:	682f6372 	.word	0x682f6372
    5e28:	635f6c61 	.word	0x635f6c61
    5e2c:	615f6e61 	.word	0x615f6e61
    5e30:	636e7973 	.word	0x636e7973
    5e34:	0000632e 	.word	0x0000632e
    5e38:	682f2e2e 	.word	0x682f2e2e
    5e3c:	732f6c61 	.word	0x732f6c61
    5e40:	682f6372 	.word	0x682f6372
    5e44:	695f6c61 	.word	0x695f6c61
    5e48:	00632e6f 	.word	0x00632e6f
    5e4c:	682f2e2e 	.word	0x682f2e2e
    5e50:	732f6c61 	.word	0x732f6c61
    5e54:	682f6372 	.word	0x682f6372
    5e58:	735f6c61 	.word	0x735f6c61
    5e5c:	6d5f6970 	.word	0x6d5f6970
    5e60:	6e79735f 	.word	0x6e79735f
    5e64:	00632e63 	.word	0x00632e63
    5e68:	682f2e2e 	.word	0x682f2e2e
    5e6c:	732f6c61 	.word	0x732f6c61
    5e70:	682f6372 	.word	0x682f6372
    5e74:	745f6c61 	.word	0x745f6c61
    5e78:	5f706d65 	.word	0x5f706d65
    5e7c:	636e7973 	.word	0x636e7973
    5e80:	0000632e 	.word	0x0000632e
    5e84:	682f2e2e 	.word	0x682f2e2e
    5e88:	732f6c61 	.word	0x732f6c61
    5e8c:	682f6372 	.word	0x682f6372
    5e90:	755f6c61 	.word	0x755f6c61
    5e94:	74726173 	.word	0x74726173
    5e98:	7973615f 	.word	0x7973615f
    5e9c:	632e636e 	.word	0x632e636e
    5ea0:	00000000 	.word	0x00000000
    5ea4:	682f2e2e 	.word	0x682f2e2e
    5ea8:	752f6c61 	.word	0x752f6c61
    5eac:	736c6974 	.word	0x736c6974
    5eb0:	6372732f 	.word	0x6372732f
    5eb4:	6974752f 	.word	0x6974752f
    5eb8:	725f736c 	.word	0x725f736c
    5ebc:	62676e69 	.word	0x62676e69
    5ec0:	65666675 	.word	0x65666675
    5ec4:	00632e72 	.word	0x00632e72

00005ec8 <_adcs>:
    5ec8:	05000000 18000000 00000000 00000000     ................
	...
    5ee4:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    5ef4:	632e6364 00000000 682f2e2e 732f6c70     dc.c....../hpl/s
    5f04:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    5f14:	0000632e                                .c..

00005f18 <crc15Table>:
    5f18:	c5990000 0b32ceab 1d56d8cf d3fd1664     ......2...V.d...
    5f28:	319ef407 ff353aac e9512cc8 27fae263     ...1.:5..,Q.c..'
    5f38:	680ead97 a6a5633c b0c17558 7e6abbf3     ...h<c..Xu....j~
    5f48:	9c095990 52a2973b 44c6815f 8a6d4ff4     .Y..;..R_..D.Om.
    5f58:	9eb75b2e 501c9585 467883e1 88d34d4a     .[.....P..xFJM..
    5f68:	6ab0af29 a41b6182 b27f77e6 7cd4b94d     )..j.a...w..M..|
    5f78:	3320f6b9 fd8b3812 ebef2e76 2544e0dd     .. 3.8..v.....D%
    5f88:	c72702be 098ccc15 1fe8da71 d14314da     ..'.....q.....C.
    5f98:	365cf3c5 f8f73d6e ee932b0a 2038e5a1     ..\6n=...+....8 
    5fa8:	c25b07c2 0cf0c969 1a94df0d d43f11a6     ..[.i.........?.
    5fb8:	9bcb5e52 556090f9 4304869d 8daf4836     R^....`U...C6H..
    5fc8:	6fccaa55 a16764fe b703729a 79a8bc31     U..o.dg..r..1..y
    5fd8:	6d72a8eb a3d96640 b5bd7024 7b16be8f     ..rm@f..$p.....{
    5fe8:	99755cec 57de9247 41ba8423 8f114a88     .\u.G..W#..A.J..
    5ff8:	c0e5057c 0e4ecbd7 182addb3 d6811318     |.....N...*.....
    6008:	34e2f17b fa493fd0 ec2d29b4 2286e71f     {..4.?I..)-...."
    6018:	678aa213 a9216cb8 bf457adc 71eeb477     ...g.l!..zE.w..q
    6028:	938d5614 5d2698bf 4b428edb 85e94070     .V....&]..BKp@..
    6038:	ca1d0f84 04b6c12f 12d2d74b dc7919e0     ..../...K.....y.
    6048:	3e1afb83 f0b13528 e6d5234c 287eede7     ...>(5..L#....~(
    6058:	3ca4f93d f20f3796 e46b21f2 2ac0ef59     =..<.7...!k.Y..*
    6068:	c8a30d3a 0608c391 106cd5f5 dec71b5e     :.........l.^...
    6078:	913354aa 5f989a01 49fc8c65 875742ce     .T3...._e..I.BW.
    6088:	6534a0ad ab9f6e06 bdfb7862 7350b6c9     ..4e.n..bx....Ps
    6098:	944f51d6 5ae49f7d 4c808919 822b47b2     .QO.}..Z...L.G+.
    60a8:	6048a5d1 aee36b7a b8877d1e 762cb3b5     ..H`zk...}....,v
    60b8:	39d8fc41 f77332ea e117248e 2fbcea25     A..9.2s..$..%../
    60c8:	cddf0846 0374c6ed 1510d089 dbbb1e22     F.....t....."...
    60d8:	cf610af8 01cac453 17aed237 d9051c9c     ..a.S...7.......
    60e8:	3b66feff f5cd3054 e3a92630 2d02e89b     ..f;T0..0&.....-
    60f8:	62f6a76f ac5d69c4 ba397fa0 7492b10b     o..b.i]...9....t
    6108:	96f15368 585a9dc3 4e3e8ba7 8095450c     hS....ZX..>N.E..
    6118:	00006005 616c6552 65742079 00007473     .`..Relay test..
    6128:	6f727245 4e203a72 7573206f 63206863     Error: No such c
    6138:	616d6d6f 0000646e 00002128 000020f8     ommand..(!... ..
    6148:	0000210a 0000204c 0000210a 000020ee     .!..L ...!... ..
    6158:	0000210a 0000204c 000020f8 000020f8     .!..L ... ... ..
    6168:	000020ee 0000204c 00002054 00002054     . ..L ..T ..T ..
    6178:	00002054 00002110 000020f8 000020f8     T ...!... ... ..
    6188:	000020cc 000021b0 000020cc 000020ee     . ...!... ... ..
    6198:	000020cc 000021b0 000020f8 000020f8     . ...!... ... ..
    61a8:	000020ee 000021b0 00002054 00002054     . ...!..T ..T ..
    61b8:	00002054 000021ba 00002358 000022a8     T ...!..X#..."..
    61c8:	000022a8 000022a6 0000234a 0000234a     ."..."..J#..J#..
    61d8:	00002340 000022a6 0000234a 00002340     @#..."..J#..@#..
    61e8:	0000234a 000022a6 00002350 00002350     J#..."..P#..P#..
    61f8:	00002350 000023e0 00002a68 00002a4a     P#...#..h*..J*..
    6208:	00002a04 00002922 00002a04 00002a3c     .*..")...*..<*..
    6218:	00002a04 00002922 00002a4a 00002a4a     .*..")..J*..J*..
    6228:	00002a3c 00002922 0000291a 0000291a     <*..")...)...)..
    6238:	0000291a 00002c80 000030c8 00002f88     .)...,...0.../..
    6248:	00002f88 00002f84 000030a0 000030a0     ./.../...0...0..
    6258:	00003092 00002f84 000030a0 00003092     .0.../...0...0..
    6268:	000030a0 00002f84 000030a8 000030a8     .0.../...0...0..
    6278:	000030a8 000032ac                       .0...2..

00006280 <__sf_fake_stderr>:
	...

000062a0 <__sf_fake_stdin>:
	...

000062c0 <__sf_fake_stdout>:
	...

000062e0 <__mprec_bigtens>:
    62e0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    62f0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    6300:	7f73bf3c 75154fdd                       <.s..O.u

00006308 <__mprec_tens>:
    6308:	00000000 3ff00000 00000000 40240000     .......?......$@
    6318:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    6328:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    6338:	00000000 412e8480 00000000 416312d0     .......A......cA
    6348:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    6358:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    6368:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    6378:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    6388:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    6398:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    63a8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    63b8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    63c8:	79d99db4 44ea7843                       ...yCx.D

000063d0 <p05.6047>:
    63d0:	00000005 00000019 0000007d 69666e49     ........}...Infi
    63e0:	7974696e 4e614e00 00003000              nity.NaN.0..

000063ec <_init>:
    63ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63ee:	46c0      	nop			; (mov r8, r8)
    63f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    63f2:	bc08      	pop	{r3}
    63f4:	469e      	mov	lr, r3
    63f6:	4770      	bx	lr

000063f8 <__init_array_start>:
    63f8:	000000e5 	.word	0x000000e5

000063fc <_fini>:
    63fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63fe:	46c0      	nop			; (mov r8, r8)
    6400:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6402:	bc08      	pop	{r3}
    6404:	469e      	mov	lr, r3
    6406:	4770      	bx	lr

00006408 <__fini_array_start>:
    6408:	000000bd 	.word	0x000000bd

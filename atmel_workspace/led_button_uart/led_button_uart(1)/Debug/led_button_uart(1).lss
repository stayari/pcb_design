
led_button_uart(1).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002294  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  00002294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ac  20000014  000022a8  00020014  2**2
                  ALLOC
  3 .stack        00002000  200000c0  00002354  00020014  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000124a2  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001efe  00000000  00000000  00032537  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005b9a  00000000  00000000  00034435  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ee8  00000000  00000000  00039fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000dc8  00000000  00000000  0003aeb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c419  00000000  00000000  0003bc7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f183  00000000  00000000  00058098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090640  00000000  00000000  0006721b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000035f4  00000000  00000000  000f785c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 20 00 20 31 01 00 00 b5 01 00 00 b5 01 00 00     . . 1...........
	...
      2c:	b5 01 00 00 00 00 00 00 00 00 00 00 b5 01 00 00     ................
      3c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      4c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      5c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      6c:	b5 01 00 00 b5 01 00 00 c1 1f 00 00 b5 01 00 00     ................
      7c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      8c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      9c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      ac:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000014 	.word	0x20000014
      dc:	00000000 	.word	0x00000000
      e0:	00002294 	.word	0x00002294

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000018 	.word	0x20000018
     110:	00002294 	.word	0x00002294
     114:	00002294 	.word	0x00002294
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b580      	push	{r7, lr}
     11e:	af00      	add	r7, sp, #0
	system_init();
     120:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     122:	4798      	blx	r3
}
     124:	46c0      	nop			; (mov r8, r8)
     126:	46bd      	mov	sp, r7
     128:	bd80      	pop	{r7, pc}
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	000009e9 	.word	0x000009e9

00000130 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     130:	b580      	push	{r7, lr}
     132:	b082      	sub	sp, #8
     134:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     136:	4b16      	ldr	r3, [pc, #88]	; (190 <Reset_Handler+0x60>)
     138:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     13a:	4b16      	ldr	r3, [pc, #88]	; (194 <Reset_Handler+0x64>)
     13c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     13e:	687a      	ldr	r2, [r7, #4]
     140:	683b      	ldr	r3, [r7, #0]
     142:	429a      	cmp	r2, r3
     144:	d00c      	beq.n	160 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     146:	e007      	b.n	158 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     148:	683b      	ldr	r3, [r7, #0]
     14a:	1d1a      	adds	r2, r3, #4
     14c:	603a      	str	r2, [r7, #0]
     14e:	687a      	ldr	r2, [r7, #4]
     150:	1d11      	adds	r1, r2, #4
     152:	6079      	str	r1, [r7, #4]
     154:	6812      	ldr	r2, [r2, #0]
     156:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     158:	683a      	ldr	r2, [r7, #0]
     15a:	4b0f      	ldr	r3, [pc, #60]	; (198 <Reset_Handler+0x68>)
     15c:	429a      	cmp	r2, r3
     15e:	d3f3      	bcc.n	148 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4b0e      	ldr	r3, [pc, #56]	; (19c <Reset_Handler+0x6c>)
     162:	603b      	str	r3, [r7, #0]
     164:	e004      	b.n	170 <Reset_Handler+0x40>
                *pDest++ = 0;
     166:	683b      	ldr	r3, [r7, #0]
     168:	1d1a      	adds	r2, r3, #4
     16a:	603a      	str	r2, [r7, #0]
     16c:	2200      	movs	r2, #0
     16e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     170:	683a      	ldr	r2, [r7, #0]
     172:	4b0b      	ldr	r3, [pc, #44]	; (1a0 <Reset_Handler+0x70>)
     174:	429a      	cmp	r2, r3
     176:	d3f6      	bcc.n	166 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     178:	4b0a      	ldr	r3, [pc, #40]	; (1a4 <Reset_Handler+0x74>)
     17a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0a      	ldr	r3, [pc, #40]	; (1a8 <Reset_Handler+0x78>)
     17e:	687a      	ldr	r2, [r7, #4]
     180:	21ff      	movs	r1, #255	; 0xff
     182:	438a      	bics	r2, r1
     184:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
     186:	4b09      	ldr	r3, [pc, #36]	; (1ac <Reset_Handler+0x7c>)
     188:	4798      	blx	r3

        /* Branch to main function */
        main();
     18a:	4b09      	ldr	r3, [pc, #36]	; (1b0 <Reset_Handler+0x80>)
     18c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     18e:	e7fe      	b.n	18e <Reset_Handler+0x5e>
     190:	00002294 	.word	0x00002294
     194:	20000000 	.word	0x20000000
     198:	20000014 	.word	0x20000014
     19c:	20000014 	.word	0x20000014
     1a0:	200000c0 	.word	0x200000c0
     1a4:	00000000 	.word	0x00000000
     1a8:	e000ed00 	.word	0xe000ed00
     1ac:	00002151 	.word	0x00002151
     1b0:	00002129 	.word	0x00002129

000001b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	af00      	add	r7, sp, #0
        while (1) {
     1b8:	e7fe      	b.n	1b8 <Dummy_Handler+0x4>

000001ba <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     1ba:	b580      	push	{r7, lr}
     1bc:	b084      	sub	sp, #16
     1be:	af00      	add	r7, sp, #0
     1c0:	60f8      	str	r0, [r7, #12]
     1c2:	607a      	str	r2, [r7, #4]
     1c4:	230b      	movs	r3, #11
     1c6:	18fb      	adds	r3, r7, r3
     1c8:	1c0a      	adds	r2, r1, #0
     1ca:	701a      	strb	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1cc:	230b      	movs	r3, #11
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	781a      	ldrb	r2, [r3, #0]
     1d2:	68fb      	ldr	r3, [r7, #12]
     1d4:	3220      	adds	r2, #32
     1d6:	0092      	lsls	r2, r2, #2
     1d8:	6879      	ldr	r1, [r7, #4]
     1da:	50d1      	str	r1, [r2, r3]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     1dc:	46c0      	nop			; (mov r8, r8)
     1de:	46bd      	mov	sp, r7
     1e0:	b004      	add	sp, #16
     1e2:	bd80      	pop	{r7, pc}

000001e4 <hri_mclk_set_APBCMASK_SERCOM4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_SERCOM4_bit(const void *const hw)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	b082      	sub	sp, #8
     1e8:	af00      	add	r7, sp, #0
     1ea:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
     1ec:	687b      	ldr	r3, [r7, #4]
     1ee:	69db      	ldr	r3, [r3, #28]
     1f0:	2220      	movs	r2, #32
     1f2:	431a      	orrs	r2, r3
     1f4:	687b      	ldr	r3, [r7, #4]
     1f6:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     1f8:	46c0      	nop			; (mov r8, r8)
     1fa:	46bd      	mov	sp, r7
     1fc:	b002      	add	sp, #8
     1fe:	bd80      	pop	{r7, pc}

00000200 <hri_port_set_DIR_reg>:
	((PortGroup *)hw)->WRCONFIG.reg = data;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     200:	b580      	push	{r7, lr}
     202:	b084      	sub	sp, #16
     204:	af00      	add	r7, sp, #0
     206:	60f8      	str	r0, [r7, #12]
     208:	607a      	str	r2, [r7, #4]
     20a:	230b      	movs	r3, #11
     20c:	18fb      	adds	r3, r7, r3
     20e:	1c0a      	adds	r2, r1, #0
     210:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     212:	230b      	movs	r3, #11
     214:	18fb      	adds	r3, r7, r3
     216:	781b      	ldrb	r3, [r3, #0]
     218:	68fa      	ldr	r2, [r7, #12]
     21a:	01db      	lsls	r3, r3, #7
     21c:	18d3      	adds	r3, r2, r3
     21e:	3308      	adds	r3, #8
     220:	687a      	ldr	r2, [r7, #4]
     222:	601a      	str	r2, [r3, #0]
}
     224:	46c0      	nop			; (mov r8, r8)
     226:	46bd      	mov	sp, r7
     228:	b004      	add	sp, #16
     22a:	bd80      	pop	{r7, pc}

0000022c <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     22c:	b580      	push	{r7, lr}
     22e:	b084      	sub	sp, #16
     230:	af00      	add	r7, sp, #0
     232:	60f8      	str	r0, [r7, #12]
     234:	607a      	str	r2, [r7, #4]
     236:	230b      	movs	r3, #11
     238:	18fb      	adds	r3, r7, r3
     23a:	1c0a      	adds	r2, r1, #0
     23c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     23e:	230b      	movs	r3, #11
     240:	18fb      	adds	r3, r7, r3
     242:	781b      	ldrb	r3, [r3, #0]
     244:	68fa      	ldr	r2, [r7, #12]
     246:	01db      	lsls	r3, r3, #7
     248:	18d3      	adds	r3, r2, r3
     24a:	3304      	adds	r3, #4
     24c:	687a      	ldr	r2, [r7, #4]
     24e:	601a      	str	r2, [r3, #0]
}
     250:	46c0      	nop			; (mov r8, r8)
     252:	46bd      	mov	sp, r7
     254:	b004      	add	sp, #16
     256:	bd80      	pop	{r7, pc}

00000258 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = mask;
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     258:	b580      	push	{r7, lr}
     25a:	b084      	sub	sp, #16
     25c:	af00      	add	r7, sp, #0
     25e:	60f8      	str	r0, [r7, #12]
     260:	607a      	str	r2, [r7, #4]
     262:	230b      	movs	r3, #11
     264:	18fb      	adds	r3, r7, r3
     266:	1c0a      	adds	r2, r1, #0
     268:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     26a:	230b      	movs	r3, #11
     26c:	18fb      	adds	r3, r7, r3
     26e:	781b      	ldrb	r3, [r3, #0]
     270:	68fa      	ldr	r2, [r7, #12]
     272:	01db      	lsls	r3, r3, #7
     274:	18d3      	adds	r3, r2, r3
     276:	3318      	adds	r3, #24
     278:	687a      	ldr	r2, [r7, #4]
     27a:	601a      	str	r2, [r3, #0]
}
     27c:	46c0      	nop			; (mov r8, r8)
     27e:	46bd      	mov	sp, r7
     280:	b004      	add	sp, #16
     282:	bd80      	pop	{r7, pc}

00000284 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     284:	b580      	push	{r7, lr}
     286:	b084      	sub	sp, #16
     288:	af00      	add	r7, sp, #0
     28a:	60f8      	str	r0, [r7, #12]
     28c:	607a      	str	r2, [r7, #4]
     28e:	230b      	movs	r3, #11
     290:	18fb      	adds	r3, r7, r3
     292:	1c0a      	adds	r2, r1, #0
     294:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     296:	230b      	movs	r3, #11
     298:	18fb      	adds	r3, r7, r3
     29a:	781b      	ldrb	r3, [r3, #0]
     29c:	68fa      	ldr	r2, [r7, #12]
     29e:	01db      	lsls	r3, r3, #7
     2a0:	18d3      	adds	r3, r2, r3
     2a2:	3314      	adds	r3, #20
     2a4:	687a      	ldr	r2, [r7, #4]
     2a6:	601a      	str	r2, [r3, #0]
}
     2a8:	46c0      	nop			; (mov r8, r8)
     2aa:	46bd      	mov	sp, r7
     2ac:	b004      	add	sp, #16
     2ae:	bd80      	pop	{r7, pc}

000002b0 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     2b0:	b590      	push	{r4, r7, lr}
     2b2:	b085      	sub	sp, #20
     2b4:	af00      	add	r7, sp, #0
     2b6:	6078      	str	r0, [r7, #4]
     2b8:	000c      	movs	r4, r1
     2ba:	0010      	movs	r0, r2
     2bc:	0019      	movs	r1, r3
     2be:	1cfb      	adds	r3, r7, #3
     2c0:	1c22      	adds	r2, r4, #0
     2c2:	701a      	strb	r2, [r3, #0]
     2c4:	1cbb      	adds	r3, r7, #2
     2c6:	1c02      	adds	r2, r0, #0
     2c8:	701a      	strb	r2, [r3, #0]
     2ca:	1c7b      	adds	r3, r7, #1
     2cc:	1c0a      	adds	r2, r1, #0
     2ce:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2d0:	1cfb      	adds	r3, r7, #3
     2d2:	7819      	ldrb	r1, [r3, #0]
     2d4:	1cbb      	adds	r3, r7, #2
     2d6:	781a      	ldrb	r2, [r3, #0]
     2d8:	230f      	movs	r3, #15
     2da:	18fb      	adds	r3, r7, r3
     2dc:	6878      	ldr	r0, [r7, #4]
     2de:	2430      	movs	r4, #48	; 0x30
     2e0:	01c9      	lsls	r1, r1, #7
     2e2:	1841      	adds	r1, r0, r1
     2e4:	188a      	adds	r2, r1, r2
     2e6:	1912      	adds	r2, r2, r4
     2e8:	7812      	ldrb	r2, [r2, #0]
     2ea:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2ec:	230f      	movs	r3, #15
     2ee:	18fb      	adds	r3, r7, r3
     2f0:	220f      	movs	r2, #15
     2f2:	18ba      	adds	r2, r7, r2
     2f4:	7812      	ldrb	r2, [r2, #0]
     2f6:	210f      	movs	r1, #15
     2f8:	438a      	bics	r2, r1
     2fa:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     2fc:	1c7b      	adds	r3, r7, #1
     2fe:	781b      	ldrb	r3, [r3, #0]
     300:	220f      	movs	r2, #15
     302:	4013      	ands	r3, r2
     304:	b2d9      	uxtb	r1, r3
     306:	230f      	movs	r3, #15
     308:	18fb      	adds	r3, r7, r3
     30a:	220f      	movs	r2, #15
     30c:	18ba      	adds	r2, r7, r2
     30e:	7812      	ldrb	r2, [r2, #0]
     310:	430a      	orrs	r2, r1
     312:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     314:	1cfb      	adds	r3, r7, #3
     316:	781a      	ldrb	r2, [r3, #0]
     318:	1cbb      	adds	r3, r7, #2
     31a:	781b      	ldrb	r3, [r3, #0]
     31c:	6879      	ldr	r1, [r7, #4]
     31e:	2030      	movs	r0, #48	; 0x30
     320:	01d2      	lsls	r2, r2, #7
     322:	188a      	adds	r2, r1, r2
     324:	18d3      	adds	r3, r2, r3
     326:	181b      	adds	r3, r3, r0
     328:	220f      	movs	r2, #15
     32a:	18ba      	adds	r2, r7, r2
     32c:	7812      	ldrb	r2, [r2, #0]
     32e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     330:	46c0      	nop			; (mov r8, r8)
     332:	46bd      	mov	sp, r7
     334:	b005      	add	sp, #20
     336:	bd90      	pop	{r4, r7, pc}

00000338 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     338:	b590      	push	{r4, r7, lr}
     33a:	b085      	sub	sp, #20
     33c:	af00      	add	r7, sp, #0
     33e:	6078      	str	r0, [r7, #4]
     340:	000c      	movs	r4, r1
     342:	0010      	movs	r0, r2
     344:	0019      	movs	r1, r3
     346:	1cfb      	adds	r3, r7, #3
     348:	1c22      	adds	r2, r4, #0
     34a:	701a      	strb	r2, [r3, #0]
     34c:	1cbb      	adds	r3, r7, #2
     34e:	1c02      	adds	r2, r0, #0
     350:	701a      	strb	r2, [r3, #0]
     352:	1c7b      	adds	r3, r7, #1
     354:	1c0a      	adds	r2, r1, #0
     356:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     358:	1cfb      	adds	r3, r7, #3
     35a:	7819      	ldrb	r1, [r3, #0]
     35c:	1cbb      	adds	r3, r7, #2
     35e:	781a      	ldrb	r2, [r3, #0]
     360:	230f      	movs	r3, #15
     362:	18fb      	adds	r3, r7, r3
     364:	6878      	ldr	r0, [r7, #4]
     366:	2430      	movs	r4, #48	; 0x30
     368:	01c9      	lsls	r1, r1, #7
     36a:	1841      	adds	r1, r0, r1
     36c:	188a      	adds	r2, r1, r2
     36e:	1912      	adds	r2, r2, r4
     370:	7812      	ldrb	r2, [r2, #0]
     372:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     374:	230f      	movs	r3, #15
     376:	18fb      	adds	r3, r7, r3
     378:	220f      	movs	r2, #15
     37a:	18ba      	adds	r2, r7, r2
     37c:	7812      	ldrb	r2, [r2, #0]
     37e:	210f      	movs	r1, #15
     380:	400a      	ands	r2, r1
     382:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     384:	1c7b      	adds	r3, r7, #1
     386:	781b      	ldrb	r3, [r3, #0]
     388:	011b      	lsls	r3, r3, #4
     38a:	b2d9      	uxtb	r1, r3
     38c:	230f      	movs	r3, #15
     38e:	18fb      	adds	r3, r7, r3
     390:	220f      	movs	r2, #15
     392:	18ba      	adds	r2, r7, r2
     394:	7812      	ldrb	r2, [r2, #0]
     396:	430a      	orrs	r2, r1
     398:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     39a:	1cfb      	adds	r3, r7, #3
     39c:	781a      	ldrb	r2, [r3, #0]
     39e:	1cbb      	adds	r3, r7, #2
     3a0:	781b      	ldrb	r3, [r3, #0]
     3a2:	6879      	ldr	r1, [r7, #4]
     3a4:	2030      	movs	r0, #48	; 0x30
     3a6:	01d2      	lsls	r2, r2, #7
     3a8:	188a      	adds	r2, r1, r2
     3aa:	18d3      	adds	r3, r2, r3
     3ac:	181b      	adds	r3, r3, r0
     3ae:	220f      	movs	r2, #15
     3b0:	18ba      	adds	r2, r7, r2
     3b2:	7812      	ldrb	r2, [r2, #0]
     3b4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	46bd      	mov	sp, r7
     3ba:	b005      	add	sp, #20
     3bc:	bd90      	pop	{r4, r7, pc}

000003be <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     3be:	b590      	push	{r4, r7, lr}
     3c0:	b085      	sub	sp, #20
     3c2:	af00      	add	r7, sp, #0
     3c4:	6078      	str	r0, [r7, #4]
     3c6:	000c      	movs	r4, r1
     3c8:	0010      	movs	r0, r2
     3ca:	0019      	movs	r1, r3
     3cc:	1cfb      	adds	r3, r7, #3
     3ce:	1c22      	adds	r2, r4, #0
     3d0:	701a      	strb	r2, [r3, #0]
     3d2:	1cbb      	adds	r3, r7, #2
     3d4:	1c02      	adds	r2, r0, #0
     3d6:	701a      	strb	r2, [r3, #0]
     3d8:	1c7b      	adds	r3, r7, #1
     3da:	1c0a      	adds	r2, r1, #0
     3dc:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3de:	1cfb      	adds	r3, r7, #3
     3e0:	7819      	ldrb	r1, [r3, #0]
     3e2:	1cbb      	adds	r3, r7, #2
     3e4:	781a      	ldrb	r2, [r3, #0]
     3e6:	230f      	movs	r3, #15
     3e8:	18fb      	adds	r3, r7, r3
     3ea:	6878      	ldr	r0, [r7, #4]
     3ec:	2440      	movs	r4, #64	; 0x40
     3ee:	01c9      	lsls	r1, r1, #7
     3f0:	1841      	adds	r1, r0, r1
     3f2:	188a      	adds	r2, r1, r2
     3f4:	1912      	adds	r2, r2, r4
     3f6:	7812      	ldrb	r2, [r2, #0]
     3f8:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3fa:	230f      	movs	r3, #15
     3fc:	18fb      	adds	r3, r7, r3
     3fe:	220f      	movs	r2, #15
     400:	18ba      	adds	r2, r7, r2
     402:	7812      	ldrb	r2, [r2, #0]
     404:	2101      	movs	r1, #1
     406:	438a      	bics	r2, r1
     408:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     40a:	1c7b      	adds	r3, r7, #1
     40c:	7819      	ldrb	r1, [r3, #0]
     40e:	230f      	movs	r3, #15
     410:	18fb      	adds	r3, r7, r3
     412:	220f      	movs	r2, #15
     414:	18ba      	adds	r2, r7, r2
     416:	7812      	ldrb	r2, [r2, #0]
     418:	430a      	orrs	r2, r1
     41a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     41c:	1cfb      	adds	r3, r7, #3
     41e:	781a      	ldrb	r2, [r3, #0]
     420:	1cbb      	adds	r3, r7, #2
     422:	781b      	ldrb	r3, [r3, #0]
     424:	6879      	ldr	r1, [r7, #4]
     426:	2040      	movs	r0, #64	; 0x40
     428:	01d2      	lsls	r2, r2, #7
     42a:	188a      	adds	r2, r1, r2
     42c:	18d3      	adds	r3, r2, r3
     42e:	181b      	adds	r3, r3, r0
     430:	220f      	movs	r2, #15
     432:	18ba      	adds	r2, r7, r2
     434:	7812      	ldrb	r2, [r2, #0]
     436:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     438:	46c0      	nop			; (mov r8, r8)
     43a:	46bd      	mov	sp, r7
     43c:	b005      	add	sp, #20
     43e:	bd90      	pop	{r4, r7, pc}

00000440 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     440:	b5b0      	push	{r4, r5, r7, lr}
     442:	b082      	sub	sp, #8
     444:	af00      	add	r7, sp, #0
     446:	6078      	str	r0, [r7, #4]
     448:	0008      	movs	r0, r1
     44a:	0011      	movs	r1, r2
     44c:	1cfb      	adds	r3, r7, #3
     44e:	1c02      	adds	r2, r0, #0
     450:	701a      	strb	r2, [r3, #0]
     452:	1cbb      	adds	r3, r7, #2
     454:	1c0a      	adds	r2, r1, #0
     456:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     458:	1cfb      	adds	r3, r7, #3
     45a:	781a      	ldrb	r2, [r3, #0]
     45c:	1cbb      	adds	r3, r7, #2
     45e:	781b      	ldrb	r3, [r3, #0]
     460:	1cf9      	adds	r1, r7, #3
     462:	7808      	ldrb	r0, [r1, #0]
     464:	1cb9      	adds	r1, r7, #2
     466:	7809      	ldrb	r1, [r1, #0]
     468:	687c      	ldr	r4, [r7, #4]
     46a:	2540      	movs	r5, #64	; 0x40
     46c:	01c0      	lsls	r0, r0, #7
     46e:	1820      	adds	r0, r4, r0
     470:	1841      	adds	r1, r0, r1
     472:	1949      	adds	r1, r1, r5
     474:	7809      	ldrb	r1, [r1, #0]
     476:	b2c9      	uxtb	r1, r1
     478:	2004      	movs	r0, #4
     47a:	4301      	orrs	r1, r0
     47c:	b2cc      	uxtb	r4, r1
     47e:	6879      	ldr	r1, [r7, #4]
     480:	2040      	movs	r0, #64	; 0x40
     482:	01d2      	lsls	r2, r2, #7
     484:	188a      	adds	r2, r1, r2
     486:	18d3      	adds	r3, r2, r3
     488:	181b      	adds	r3, r3, r0
     48a:	1c22      	adds	r2, r4, #0
     48c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     48e:	46c0      	nop			; (mov r8, r8)
     490:	46bd      	mov	sp, r7
     492:	b002      	add	sp, #8
     494:	bdb0      	pop	{r4, r5, r7, pc}

00000496 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     496:	b5b0      	push	{r4, r5, r7, lr}
     498:	b082      	sub	sp, #8
     49a:	af00      	add	r7, sp, #0
     49c:	6078      	str	r0, [r7, #4]
     49e:	0008      	movs	r0, r1
     4a0:	0011      	movs	r1, r2
     4a2:	1cfb      	adds	r3, r7, #3
     4a4:	1c02      	adds	r2, r0, #0
     4a6:	701a      	strb	r2, [r3, #0]
     4a8:	1cbb      	adds	r3, r7, #2
     4aa:	1c0a      	adds	r2, r1, #0
     4ac:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4ae:	1cfb      	adds	r3, r7, #3
     4b0:	781a      	ldrb	r2, [r3, #0]
     4b2:	1cbb      	adds	r3, r7, #2
     4b4:	781b      	ldrb	r3, [r3, #0]
     4b6:	1cf9      	adds	r1, r7, #3
     4b8:	7808      	ldrb	r0, [r1, #0]
     4ba:	1cb9      	adds	r1, r7, #2
     4bc:	7809      	ldrb	r1, [r1, #0]
     4be:	687c      	ldr	r4, [r7, #4]
     4c0:	2540      	movs	r5, #64	; 0x40
     4c2:	01c0      	lsls	r0, r0, #7
     4c4:	1820      	adds	r0, r4, r0
     4c6:	1841      	adds	r1, r0, r1
     4c8:	1949      	adds	r1, r1, r5
     4ca:	7809      	ldrb	r1, [r1, #0]
     4cc:	b2c9      	uxtb	r1, r1
     4ce:	2004      	movs	r0, #4
     4d0:	4381      	bics	r1, r0
     4d2:	b2cc      	uxtb	r4, r1
     4d4:	6879      	ldr	r1, [r7, #4]
     4d6:	2040      	movs	r0, #64	; 0x40
     4d8:	01d2      	lsls	r2, r2, #7
     4da:	188a      	adds	r2, r1, r2
     4dc:	18d3      	adds	r3, r2, r3
     4de:	181b      	adds	r3, r3, r0
     4e0:	1c22      	adds	r2, r4, #0
     4e2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4e4:	46c0      	nop			; (mov r8, r8)
     4e6:	46bd      	mov	sp, r7
     4e8:	b002      	add	sp, #8
     4ea:	bdb0      	pop	{r4, r5, r7, pc}

000004ec <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     4ec:	b580      	push	{r7, lr}
     4ee:	b084      	sub	sp, #16
     4f0:	af00      	add	r7, sp, #0
     4f2:	60f8      	str	r0, [r7, #12]
     4f4:	607a      	str	r2, [r7, #4]
     4f6:	230b      	movs	r3, #11
     4f8:	18fb      	adds	r3, r7, r3
     4fa:	1c0a      	adds	r2, r1, #0
     4fc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4fe:	230b      	movs	r3, #11
     500:	18fb      	adds	r3, r7, r3
     502:	781b      	ldrb	r3, [r3, #0]
     504:	68fa      	ldr	r2, [r7, #12]
     506:	01db      	lsls	r3, r3, #7
     508:	18d3      	adds	r3, r2, r3
     50a:	3328      	adds	r3, #40	; 0x28
     50c:	687a      	ldr	r2, [r7, #4]
     50e:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     510:	46c0      	nop			; (mov r8, r8)
     512:	46bd      	mov	sp, r7
     514:	b004      	add	sp, #16
     516:	bd80      	pop	{r7, pc}

00000518 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     518:	b580      	push	{r7, lr}
     51a:	b082      	sub	sp, #8
     51c:	af00      	add	r7, sp, #0
     51e:	6039      	str	r1, [r7, #0]
     520:	0011      	movs	r1, r2
     522:	1dfb      	adds	r3, r7, #7
     524:	1c02      	adds	r2, r0, #0
     526:	701a      	strb	r2, [r3, #0]
     528:	1dbb      	adds	r3, r7, #6
     52a:	1c0a      	adds	r2, r1, #0
     52c:	701a      	strb	r2, [r3, #0]
	switch (direction) {
     52e:	1dbb      	adds	r3, r7, #6
     530:	781b      	ldrb	r3, [r3, #0]
     532:	2b01      	cmp	r3, #1
     534:	d025      	beq.n	582 <_gpio_set_direction+0x6a>
     536:	2b02      	cmp	r3, #2
     538:	d043      	beq.n	5c2 <_gpio_set_direction+0xaa>
     53a:	2b00      	cmp	r3, #0
     53c:	d163      	bne.n	606 <_gpio_set_direction+0xee>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     53e:	683a      	ldr	r2, [r7, #0]
     540:	1dfb      	adds	r3, r7, #7
     542:	7819      	ldrb	r1, [r3, #0]
     544:	23c0      	movs	r3, #192	; 0xc0
     546:	05db      	lsls	r3, r3, #23
     548:	0018      	movs	r0, r3
     54a:	4b34      	ldr	r3, [pc, #208]	; (61c <_gpio_set_direction+0x104>)
     54c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     54e:	683b      	ldr	r3, [r7, #0]
     550:	041b      	lsls	r3, r3, #16
     552:	0c1b      	lsrs	r3, r3, #16
     554:	2280      	movs	r2, #128	; 0x80
     556:	05d2      	lsls	r2, r2, #23
     558:	431a      	orrs	r2, r3
     55a:	1dfb      	adds	r3, r7, #7
     55c:	7819      	ldrb	r1, [r3, #0]
     55e:	2382      	movs	r3, #130	; 0x82
     560:	05db      	lsls	r3, r3, #23
     562:	0018      	movs	r0, r3
     564:	4b2e      	ldr	r3, [pc, #184]	; (620 <_gpio_set_direction+0x108>)
     566:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     56c:	22c0      	movs	r2, #192	; 0xc0
     56e:	0612      	lsls	r2, r2, #24
     570:	431a      	orrs	r2, r3
     572:	1dfb      	adds	r3, r7, #7
     574:	7819      	ldrb	r1, [r3, #0]
     576:	2382      	movs	r3, #130	; 0x82
     578:	05db      	lsls	r3, r3, #23
     57a:	0018      	movs	r0, r3
     57c:	4b28      	ldr	r3, [pc, #160]	; (620 <_gpio_set_direction+0x108>)
     57e:	4798      	blx	r3
		break;
     580:	e047      	b.n	612 <_gpio_set_direction+0xfa>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     582:	683a      	ldr	r2, [r7, #0]
     584:	1dfb      	adds	r3, r7, #7
     586:	7819      	ldrb	r1, [r3, #0]
     588:	23c0      	movs	r3, #192	; 0xc0
     58a:	05db      	lsls	r3, r3, #23
     58c:	0018      	movs	r0, r3
     58e:	4b23      	ldr	r3, [pc, #140]	; (61c <_gpio_set_direction+0x104>)
     590:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     592:	683b      	ldr	r3, [r7, #0]
     594:	041b      	lsls	r3, r3, #16
     596:	0c1b      	lsrs	r3, r3, #16
     598:	4a22      	ldr	r2, [pc, #136]	; (624 <_gpio_set_direction+0x10c>)
     59a:	431a      	orrs	r2, r3
     59c:	1dfb      	adds	r3, r7, #7
     59e:	7819      	ldrb	r1, [r3, #0]
     5a0:	2382      	movs	r3, #130	; 0x82
     5a2:	05db      	lsls	r3, r3, #23
     5a4:	0018      	movs	r0, r3
     5a6:	4b1e      	ldr	r3, [pc, #120]	; (620 <_gpio_set_direction+0x108>)
     5a8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     5aa:	683b      	ldr	r3, [r7, #0]
     5ac:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     5ae:	4a1e      	ldr	r2, [pc, #120]	; (628 <_gpio_set_direction+0x110>)
     5b0:	431a      	orrs	r2, r3
     5b2:	1dfb      	adds	r3, r7, #7
     5b4:	7819      	ldrb	r1, [r3, #0]
     5b6:	2382      	movs	r3, #130	; 0x82
     5b8:	05db      	lsls	r3, r3, #23
     5ba:	0018      	movs	r0, r3
     5bc:	4b18      	ldr	r3, [pc, #96]	; (620 <_gpio_set_direction+0x108>)
     5be:	4798      	blx	r3
		break;
     5c0:	e027      	b.n	612 <_gpio_set_direction+0xfa>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
     5c2:	683a      	ldr	r2, [r7, #0]
     5c4:	1dfb      	adds	r3, r7, #7
     5c6:	7819      	ldrb	r1, [r3, #0]
     5c8:	23c0      	movs	r3, #192	; 0xc0
     5ca:	05db      	lsls	r3, r3, #23
     5cc:	0018      	movs	r0, r3
     5ce:	4b17      	ldr	r3, [pc, #92]	; (62c <_gpio_set_direction+0x114>)
     5d0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     5d2:	683b      	ldr	r3, [r7, #0]
     5d4:	041b      	lsls	r3, r3, #16
     5d6:	0c1b      	lsrs	r3, r3, #16
     5d8:	2280      	movs	r2, #128	; 0x80
     5da:	05d2      	lsls	r2, r2, #23
     5dc:	431a      	orrs	r2, r3
     5de:	1dfb      	adds	r3, r7, #7
     5e0:	7819      	ldrb	r1, [r3, #0]
     5e2:	2382      	movs	r3, #130	; 0x82
     5e4:	05db      	lsls	r3, r3, #23
     5e6:	0018      	movs	r0, r3
     5e8:	4b0d      	ldr	r3, [pc, #52]	; (620 <_gpio_set_direction+0x108>)
     5ea:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     5ec:	683b      	ldr	r3, [r7, #0]
     5ee:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     5f0:	22c0      	movs	r2, #192	; 0xc0
     5f2:	0612      	lsls	r2, r2, #24
     5f4:	431a      	orrs	r2, r3
     5f6:	1dfb      	adds	r3, r7, #7
     5f8:	7819      	ldrb	r1, [r3, #0]
     5fa:	2382      	movs	r3, #130	; 0x82
     5fc:	05db      	lsls	r3, r3, #23
     5fe:	0018      	movs	r0, r3
     600:	4b07      	ldr	r3, [pc, #28]	; (620 <_gpio_set_direction+0x108>)
     602:	4798      	blx	r3
		break;
     604:	e005      	b.n	612 <_gpio_set_direction+0xfa>

	default:
		ASSERT(false);
     606:	4b0a      	ldr	r3, [pc, #40]	; (630 <_gpio_set_direction+0x118>)
     608:	2246      	movs	r2, #70	; 0x46
     60a:	0019      	movs	r1, r3
     60c:	2000      	movs	r0, #0
     60e:	4b09      	ldr	r3, [pc, #36]	; (634 <_gpio_set_direction+0x11c>)
     610:	4798      	blx	r3
	}
}
     612:	46c0      	nop			; (mov r8, r8)
     614:	46bd      	mov	sp, r7
     616:	b002      	add	sp, #8
     618:	bd80      	pop	{r7, pc}
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	0000022d 	.word	0x0000022d
     620:	000004ed 	.word	0x000004ed
     624:	40020000 	.word	0x40020000
     628:	c0020000 	.word	0xc0020000
     62c:	00000201 	.word	0x00000201
     630:	00002198 	.word	0x00002198
     634:	00000eb3 	.word	0x00000eb3

00000638 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     638:	b580      	push	{r7, lr}
     63a:	b082      	sub	sp, #8
     63c:	af00      	add	r7, sp, #0
     63e:	6039      	str	r1, [r7, #0]
     640:	0011      	movs	r1, r2
     642:	1dfb      	adds	r3, r7, #7
     644:	1c02      	adds	r2, r0, #0
     646:	701a      	strb	r2, [r3, #0]
     648:	1dbb      	adds	r3, r7, #6
     64a:	1c0a      	adds	r2, r1, #0
     64c:	701a      	strb	r2, [r3, #0]
	if (level) {
     64e:	1dbb      	adds	r3, r7, #6
     650:	781b      	ldrb	r3, [r3, #0]
     652:	2b00      	cmp	r3, #0
     654:	d008      	beq.n	668 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     656:	683a      	ldr	r2, [r7, #0]
     658:	1dfb      	adds	r3, r7, #7
     65a:	7819      	ldrb	r1, [r3, #0]
     65c:	23c0      	movs	r3, #192	; 0xc0
     65e:	05db      	lsls	r3, r3, #23
     660:	0018      	movs	r0, r3
     662:	4b07      	ldr	r3, [pc, #28]	; (680 <_gpio_set_level+0x48>)
     664:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     666:	e007      	b.n	678 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     668:	683a      	ldr	r2, [r7, #0]
     66a:	1dfb      	adds	r3, r7, #7
     66c:	7819      	ldrb	r1, [r3, #0]
     66e:	23c0      	movs	r3, #192	; 0xc0
     670:	05db      	lsls	r3, r3, #23
     672:	0018      	movs	r0, r3
     674:	4b03      	ldr	r3, [pc, #12]	; (684 <_gpio_set_level+0x4c>)
     676:	4798      	blx	r3
}
     678:	46c0      	nop			; (mov r8, r8)
     67a:	46bd      	mov	sp, r7
     67c:	b002      	add	sp, #8
     67e:	bd80      	pop	{r7, pc}
     680:	00000259 	.word	0x00000259
     684:	00000285 	.word	0x00000285

00000688 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     688:	b590      	push	{r4, r7, lr}
     68a:	b083      	sub	sp, #12
     68c:	af00      	add	r7, sp, #0
     68e:	0004      	movs	r4, r0
     690:	0008      	movs	r0, r1
     692:	0011      	movs	r1, r2
     694:	1dfb      	adds	r3, r7, #7
     696:	1c22      	adds	r2, r4, #0
     698:	701a      	strb	r2, [r3, #0]
     69a:	1dbb      	adds	r3, r7, #6
     69c:	1c02      	adds	r2, r0, #0
     69e:	701a      	strb	r2, [r3, #0]
     6a0:	1d7b      	adds	r3, r7, #5
     6a2:	1c0a      	adds	r2, r1, #0
     6a4:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
     6a6:	1d7b      	adds	r3, r7, #5
     6a8:	781b      	ldrb	r3, [r3, #0]
     6aa:	2b01      	cmp	r3, #1
     6ac:	d00d      	beq.n	6ca <_gpio_set_pin_pull_mode+0x42>
     6ae:	2b02      	cmp	r3, #2
     6b0:	d02b      	beq.n	70a <_gpio_set_pin_pull_mode+0x82>
     6b2:	2b00      	cmp	r3, #0
     6b4:	d149      	bne.n	74a <_gpio_set_pin_pull_mode+0xc2>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     6b6:	1dbb      	adds	r3, r7, #6
     6b8:	781a      	ldrb	r2, [r3, #0]
     6ba:	1dfb      	adds	r3, r7, #7
     6bc:	7819      	ldrb	r1, [r3, #0]
     6be:	2382      	movs	r3, #130	; 0x82
     6c0:	05db      	lsls	r3, r3, #23
     6c2:	0018      	movs	r0, r3
     6c4:	4b26      	ldr	r3, [pc, #152]	; (760 <_gpio_set_pin_pull_mode+0xd8>)
     6c6:	4798      	blx	r3
		break;
     6c8:	e046      	b.n	758 <_gpio_set_pin_pull_mode+0xd0>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     6ca:	1dbb      	adds	r3, r7, #6
     6cc:	781b      	ldrb	r3, [r3, #0]
     6ce:	2201      	movs	r2, #1
     6d0:	409a      	lsls	r2, r3
     6d2:	1dfb      	adds	r3, r7, #7
     6d4:	7819      	ldrb	r1, [r3, #0]
     6d6:	23c0      	movs	r3, #192	; 0xc0
     6d8:	05db      	lsls	r3, r3, #23
     6da:	0018      	movs	r0, r3
     6dc:	4b21      	ldr	r3, [pc, #132]	; (764 <_gpio_set_pin_pull_mode+0xdc>)
     6de:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     6e0:	1dbb      	adds	r3, r7, #6
     6e2:	781a      	ldrb	r2, [r3, #0]
     6e4:	1dfb      	adds	r3, r7, #7
     6e6:	7819      	ldrb	r1, [r3, #0]
     6e8:	2382      	movs	r3, #130	; 0x82
     6ea:	05db      	lsls	r3, r3, #23
     6ec:	0018      	movs	r0, r3
     6ee:	4b1e      	ldr	r3, [pc, #120]	; (768 <_gpio_set_pin_pull_mode+0xe0>)
     6f0:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
     6f2:	1dbb      	adds	r3, r7, #6
     6f4:	781b      	ldrb	r3, [r3, #0]
     6f6:	2201      	movs	r2, #1
     6f8:	409a      	lsls	r2, r3
     6fa:	1dfb      	adds	r3, r7, #7
     6fc:	7819      	ldrb	r1, [r3, #0]
     6fe:	23c0      	movs	r3, #192	; 0xc0
     700:	05db      	lsls	r3, r3, #23
     702:	0018      	movs	r0, r3
     704:	4b19      	ldr	r3, [pc, #100]	; (76c <_gpio_set_pin_pull_mode+0xe4>)
     706:	4798      	blx	r3
		break;
     708:	e026      	b.n	758 <_gpio_set_pin_pull_mode+0xd0>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     70a:	1dbb      	adds	r3, r7, #6
     70c:	781b      	ldrb	r3, [r3, #0]
     70e:	2201      	movs	r2, #1
     710:	409a      	lsls	r2, r3
     712:	1dfb      	adds	r3, r7, #7
     714:	7819      	ldrb	r1, [r3, #0]
     716:	23c0      	movs	r3, #192	; 0xc0
     718:	05db      	lsls	r3, r3, #23
     71a:	0018      	movs	r0, r3
     71c:	4b11      	ldr	r3, [pc, #68]	; (764 <_gpio_set_pin_pull_mode+0xdc>)
     71e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     720:	1dbb      	adds	r3, r7, #6
     722:	781a      	ldrb	r2, [r3, #0]
     724:	1dfb      	adds	r3, r7, #7
     726:	7819      	ldrb	r1, [r3, #0]
     728:	2382      	movs	r3, #130	; 0x82
     72a:	05db      	lsls	r3, r3, #23
     72c:	0018      	movs	r0, r3
     72e:	4b0e      	ldr	r3, [pc, #56]	; (768 <_gpio_set_pin_pull_mode+0xe0>)
     730:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
     732:	1dbb      	adds	r3, r7, #6
     734:	781b      	ldrb	r3, [r3, #0]
     736:	2201      	movs	r2, #1
     738:	409a      	lsls	r2, r3
     73a:	1dfb      	adds	r3, r7, #7
     73c:	7819      	ldrb	r1, [r3, #0]
     73e:	23c0      	movs	r3, #192	; 0xc0
     740:	05db      	lsls	r3, r3, #23
     742:	0018      	movs	r0, r3
     744:	4b0a      	ldr	r3, [pc, #40]	; (770 <_gpio_set_pin_pull_mode+0xe8>)
     746:	4798      	blx	r3
		break;
     748:	e006      	b.n	758 <_gpio_set_pin_pull_mode+0xd0>

	default:
		ASSERT(false);
     74a:	4b0a      	ldr	r3, [pc, #40]	; (774 <_gpio_set_pin_pull_mode+0xec>)
     74c:	2289      	movs	r2, #137	; 0x89
     74e:	0019      	movs	r1, r3
     750:	2000      	movs	r0, #0
     752:	4b09      	ldr	r3, [pc, #36]	; (778 <_gpio_set_pin_pull_mode+0xf0>)
     754:	4798      	blx	r3
		break;
     756:	46c0      	nop			; (mov r8, r8)
	}
}
     758:	46c0      	nop			; (mov r8, r8)
     75a:	46bd      	mov	sp, r7
     75c:	b003      	add	sp, #12
     75e:	bd90      	pop	{r4, r7, pc}
     760:	00000497 	.word	0x00000497
     764:	0000022d 	.word	0x0000022d
     768:	00000441 	.word	0x00000441
     76c:	00000259 	.word	0x00000259
     770:	00000285 	.word	0x00000285
     774:	00002198 	.word	0x00002198
     778:	00000eb3 	.word	0x00000eb3

0000077c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     77c:	b590      	push	{r4, r7, lr}
     77e:	b085      	sub	sp, #20
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
     784:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     786:	687b      	ldr	r3, [r7, #4]
     788:	095a      	lsrs	r2, r3, #5
     78a:	230f      	movs	r3, #15
     78c:	18fb      	adds	r3, r7, r3
     78e:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     790:	687b      	ldr	r3, [r7, #4]
     792:	b2da      	uxtb	r2, r3
     794:	230e      	movs	r3, #14
     796:	18fb      	adds	r3, r7, r3
     798:	211f      	movs	r1, #31
     79a:	400a      	ands	r2, r1
     79c:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     79e:	683b      	ldr	r3, [r7, #0]
     7a0:	3301      	adds	r3, #1
     7a2:	d10b      	bne.n	7bc <_gpio_set_pin_function+0x40>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     7a4:	230e      	movs	r3, #14
     7a6:	18fb      	adds	r3, r7, r3
     7a8:	781a      	ldrb	r2, [r3, #0]
     7aa:	230f      	movs	r3, #15
     7ac:	18fb      	adds	r3, r7, r3
     7ae:	7819      	ldrb	r1, [r3, #0]
     7b0:	2382      	movs	r3, #130	; 0x82
     7b2:	05d8      	lsls	r0, r3, #23
     7b4:	2300      	movs	r3, #0
     7b6:	4c1b      	ldr	r4, [pc, #108]	; (824 <_gpio_set_pin_function+0xa8>)
     7b8:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     7ba:	e02f      	b.n	81c <_gpio_set_pin_function+0xa0>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     7bc:	230e      	movs	r3, #14
     7be:	18fb      	adds	r3, r7, r3
     7c0:	781a      	ldrb	r2, [r3, #0]
     7c2:	230f      	movs	r3, #15
     7c4:	18fb      	adds	r3, r7, r3
     7c6:	7819      	ldrb	r1, [r3, #0]
     7c8:	2382      	movs	r3, #130	; 0x82
     7ca:	05d8      	lsls	r0, r3, #23
     7cc:	2301      	movs	r3, #1
     7ce:	4c15      	ldr	r4, [pc, #84]	; (824 <_gpio_set_pin_function+0xa8>)
     7d0:	47a0      	blx	r4
		if (pin & 1) {
     7d2:	230e      	movs	r3, #14
     7d4:	18fb      	adds	r3, r7, r3
     7d6:	781b      	ldrb	r3, [r3, #0]
     7d8:	2201      	movs	r2, #1
     7da:	4013      	ands	r3, r2
     7dc:	d00f      	beq.n	7fe <_gpio_set_pin_function+0x82>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     7de:	230e      	movs	r3, #14
     7e0:	18fb      	adds	r3, r7, r3
     7e2:	781b      	ldrb	r3, [r3, #0]
     7e4:	085b      	lsrs	r3, r3, #1
     7e6:	b2da      	uxtb	r2, r3
     7e8:	683b      	ldr	r3, [r7, #0]
     7ea:	b2dc      	uxtb	r4, r3
     7ec:	230f      	movs	r3, #15
     7ee:	18fb      	adds	r3, r7, r3
     7f0:	7819      	ldrb	r1, [r3, #0]
     7f2:	2382      	movs	r3, #130	; 0x82
     7f4:	05d8      	lsls	r0, r3, #23
     7f6:	0023      	movs	r3, r4
     7f8:	4c0b      	ldr	r4, [pc, #44]	; (828 <_gpio_set_pin_function+0xac>)
     7fa:	47a0      	blx	r4
}
     7fc:	e00e      	b.n	81c <_gpio_set_pin_function+0xa0>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     7fe:	230e      	movs	r3, #14
     800:	18fb      	adds	r3, r7, r3
     802:	781b      	ldrb	r3, [r3, #0]
     804:	085b      	lsrs	r3, r3, #1
     806:	b2da      	uxtb	r2, r3
     808:	683b      	ldr	r3, [r7, #0]
     80a:	b2dc      	uxtb	r4, r3
     80c:	230f      	movs	r3, #15
     80e:	18fb      	adds	r3, r7, r3
     810:	7819      	ldrb	r1, [r3, #0]
     812:	2382      	movs	r3, #130	; 0x82
     814:	05d8      	lsls	r0, r3, #23
     816:	0023      	movs	r3, r4
     818:	4c04      	ldr	r4, [pc, #16]	; (82c <_gpio_set_pin_function+0xb0>)
     81a:	47a0      	blx	r4
}
     81c:	46c0      	nop			; (mov r8, r8)
     81e:	46bd      	mov	sp, r7
     820:	b005      	add	sp, #20
     822:	bd90      	pop	{r4, r7, pc}
     824:	000003bf 	.word	0x000003bf
     828:	00000339 	.word	0x00000339
     82c:	000002b1 	.word	0x000002b1

00000830 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     830:	b580      	push	{r7, lr}
     832:	b082      	sub	sp, #8
     834:	af00      	add	r7, sp, #0
     836:	0002      	movs	r2, r0
     838:	1dfb      	adds	r3, r7, #7
     83a:	701a      	strb	r2, [r3, #0]
     83c:	1dbb      	adds	r3, r7, #6
     83e:	1c0a      	adds	r2, r1, #0
     840:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     842:	1dfb      	adds	r3, r7, #7
     844:	781b      	ldrb	r3, [r3, #0]
     846:	095b      	lsrs	r3, r3, #5
     848:	b2d8      	uxtb	r0, r3
     84a:	1dfb      	adds	r3, r7, #7
     84c:	781b      	ldrb	r3, [r3, #0]
     84e:	221f      	movs	r2, #31
     850:	4013      	ands	r3, r2
     852:	b2d9      	uxtb	r1, r3
     854:	1dbb      	adds	r3, r7, #6
     856:	781b      	ldrb	r3, [r3, #0]
     858:	001a      	movs	r2, r3
     85a:	4b03      	ldr	r3, [pc, #12]	; (868 <gpio_set_pin_pull_mode+0x38>)
     85c:	4798      	blx	r3
}
     85e:	46c0      	nop			; (mov r8, r8)
     860:	46bd      	mov	sp, r7
     862:	b002      	add	sp, #8
     864:	bd80      	pop	{r7, pc}
     866:	46c0      	nop			; (mov r8, r8)
     868:	00000689 	.word	0x00000689

0000086c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     86c:	b580      	push	{r7, lr}
     86e:	b082      	sub	sp, #8
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
     874:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     876:	683a      	ldr	r2, [r7, #0]
     878:	687b      	ldr	r3, [r7, #4]
     87a:	0011      	movs	r1, r2
     87c:	0018      	movs	r0, r3
     87e:	4b03      	ldr	r3, [pc, #12]	; (88c <gpio_set_pin_function+0x20>)
     880:	4798      	blx	r3
}
     882:	46c0      	nop			; (mov r8, r8)
     884:	46bd      	mov	sp, r7
     886:	b002      	add	sp, #8
     888:	bd80      	pop	{r7, pc}
     88a:	46c0      	nop			; (mov r8, r8)
     88c:	0000077d 	.word	0x0000077d

00000890 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     890:	b580      	push	{r7, lr}
     892:	b082      	sub	sp, #8
     894:	af00      	add	r7, sp, #0
     896:	0002      	movs	r2, r0
     898:	1dfb      	adds	r3, r7, #7
     89a:	701a      	strb	r2, [r3, #0]
     89c:	1dbb      	adds	r3, r7, #6
     89e:	1c0a      	adds	r2, r1, #0
     8a0:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     8a2:	1dfb      	adds	r3, r7, #7
     8a4:	781b      	ldrb	r3, [r3, #0]
     8a6:	095b      	lsrs	r3, r3, #5
     8a8:	b2d8      	uxtb	r0, r3
     8aa:	1dfb      	adds	r3, r7, #7
     8ac:	781b      	ldrb	r3, [r3, #0]
     8ae:	221f      	movs	r2, #31
     8b0:	4013      	ands	r3, r2
     8b2:	2201      	movs	r2, #1
     8b4:	409a      	lsls	r2, r3
     8b6:	0011      	movs	r1, r2
     8b8:	1dbb      	adds	r3, r7, #6
     8ba:	781b      	ldrb	r3, [r3, #0]
     8bc:	001a      	movs	r2, r3
     8be:	4b03      	ldr	r3, [pc, #12]	; (8cc <gpio_set_pin_direction+0x3c>)
     8c0:	4798      	blx	r3
}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	46bd      	mov	sp, r7
     8c6:	b002      	add	sp, #8
     8c8:	bd80      	pop	{r7, pc}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	00000519 	.word	0x00000519

000008d0 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     8d0:	b580      	push	{r7, lr}
     8d2:	b082      	sub	sp, #8
     8d4:	af00      	add	r7, sp, #0
     8d6:	0002      	movs	r2, r0
     8d8:	1dfb      	adds	r3, r7, #7
     8da:	701a      	strb	r2, [r3, #0]
     8dc:	1dbb      	adds	r3, r7, #6
     8de:	1c0a      	adds	r2, r1, #0
     8e0:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     8e2:	1dfb      	adds	r3, r7, #7
     8e4:	781b      	ldrb	r3, [r3, #0]
     8e6:	095b      	lsrs	r3, r3, #5
     8e8:	b2d8      	uxtb	r0, r3
     8ea:	1dfb      	adds	r3, r7, #7
     8ec:	781b      	ldrb	r3, [r3, #0]
     8ee:	221f      	movs	r2, #31
     8f0:	4013      	ands	r3, r2
     8f2:	2201      	movs	r2, #1
     8f4:	409a      	lsls	r2, r3
     8f6:	0011      	movs	r1, r2
     8f8:	1dbb      	adds	r3, r7, #6
     8fa:	781b      	ldrb	r3, [r3, #0]
     8fc:	001a      	movs	r2, r3
     8fe:	4b03      	ldr	r3, [pc, #12]	; (90c <gpio_set_pin_level+0x3c>)
     900:	4798      	blx	r3
}
     902:	46c0      	nop			; (mov r8, r8)
     904:	46bd      	mov	sp, r7
     906:	b002      	add	sp, #8
     908:	bd80      	pop	{r7, pc}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	00000639 	.word	0x00000639

00000910 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     910:	b580      	push	{r7, lr}
     912:	af00      	add	r7, sp, #0
	_init_chip();
     914:	4b02      	ldr	r3, [pc, #8]	; (920 <init_mcu+0x10>)
     916:	4798      	blx	r3
}
     918:	46c0      	nop			; (mov r8, r8)
     91a:	46bd      	mov	sp, r7
     91c:	bd80      	pop	{r7, pc}
     91e:	46c0      	nop			; (mov r8, r8)
     920:	000012b1 	.word	0x000012b1

00000924 <USART_0_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_0_CLOCK_init()
{
     924:	b580      	push	{r7, lr}
     926:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     928:	4b09      	ldr	r3, [pc, #36]	; (950 <USART_0_CLOCK_init+0x2c>)
     92a:	2240      	movs	r2, #64	; 0x40
     92c:	2117      	movs	r1, #23
     92e:	0018      	movs	r0, r3
     930:	4b08      	ldr	r3, [pc, #32]	; (954 <USART_0_CLOCK_init+0x30>)
     932:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     934:	4b06      	ldr	r3, [pc, #24]	; (950 <USART_0_CLOCK_init+0x2c>)
     936:	2240      	movs	r2, #64	; 0x40
     938:	2112      	movs	r1, #18
     93a:	0018      	movs	r0, r3
     93c:	4b05      	ldr	r3, [pc, #20]	; (954 <USART_0_CLOCK_init+0x30>)
     93e:	4798      	blx	r3
	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
     940:	4b05      	ldr	r3, [pc, #20]	; (958 <USART_0_CLOCK_init+0x34>)
     942:	0018      	movs	r0, r3
     944:	4b05      	ldr	r3, [pc, #20]	; (95c <USART_0_CLOCK_init+0x38>)
     946:	4798      	blx	r3
}
     948:	46c0      	nop			; (mov r8, r8)
     94a:	46bd      	mov	sp, r7
     94c:	bd80      	pop	{r7, pc}
     94e:	46c0      	nop			; (mov r8, r8)
     950:	40001c00 	.word	0x40001c00
     954:	000001bb 	.word	0x000001bb
     958:	40000800 	.word	0x40000800
     95c:	000001e5 	.word	0x000001e5

00000960 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     960:	b580      	push	{r7, lr}
     962:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB08, PINMUX_PB08D_SERCOM4_PAD0);
     964:	4b06      	ldr	r3, [pc, #24]	; (980 <USART_0_PORT_init+0x20>)
     966:	0019      	movs	r1, r3
     968:	2028      	movs	r0, #40	; 0x28
     96a:	4b06      	ldr	r3, [pc, #24]	; (984 <USART_0_PORT_init+0x24>)
     96c:	4798      	blx	r3

	gpio_set_pin_function(PB09, PINMUX_PB09D_SERCOM4_PAD1);
     96e:	4b06      	ldr	r3, [pc, #24]	; (988 <USART_0_PORT_init+0x28>)
     970:	0019      	movs	r1, r3
     972:	2029      	movs	r0, #41	; 0x29
     974:	4b03      	ldr	r3, [pc, #12]	; (984 <USART_0_PORT_init+0x24>)
     976:	4798      	blx	r3
}
     978:	46c0      	nop			; (mov r8, r8)
     97a:	46bd      	mov	sp, r7
     97c:	bd80      	pop	{r7, pc}
     97e:	46c0      	nop			; (mov r8, r8)
     980:	00280003 	.word	0x00280003
     984:	0000086d 	.word	0x0000086d
     988:	00290003 	.word	0x00290003

0000098c <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     98c:	b590      	push	{r4, r7, lr}
     98e:	b083      	sub	sp, #12
     990:	af02      	add	r7, sp, #8
	USART_0_CLOCK_init();
     992:	4b08      	ldr	r3, [pc, #32]	; (9b4 <USART_0_init+0x28>)
     994:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM4, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     996:	4a08      	ldr	r2, [pc, #32]	; (9b8 <USART_0_init+0x2c>)
     998:	4908      	ldr	r1, [pc, #32]	; (9bc <USART_0_init+0x30>)
     99a:	4809      	ldr	r0, [pc, #36]	; (9c0 <USART_0_init+0x34>)
     99c:	2300      	movs	r3, #0
     99e:	9300      	str	r3, [sp, #0]
     9a0:	2310      	movs	r3, #16
     9a2:	4c08      	ldr	r4, [pc, #32]	; (9c4 <USART_0_init+0x38>)
     9a4:	47a0      	blx	r4
	USART_0_PORT_init();
     9a6:	4b08      	ldr	r3, [pc, #32]	; (9c8 <USART_0_init+0x3c>)
     9a8:	4798      	blx	r3
}
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	46bd      	mov	sp, r7
     9ae:	b001      	add	sp, #4
     9b0:	bd90      	pop	{r4, r7, pc}
     9b2:	46c0      	nop			; (mov r8, r8)
     9b4:	00000925 	.word	0x00000925
     9b8:	20000030 	.word	0x20000030
     9bc:	42001400 	.word	0x42001400
     9c0:	20000070 	.word	0x20000070
     9c4:	00000b69 	.word	0x00000b69
     9c8:	00000961 	.word	0x00000961

000009cc <delay_driver_init>:

void delay_driver_init(void)
{
     9cc:	b580      	push	{r7, lr}
     9ce:	af00      	add	r7, sp, #0
	delay_init(SysTick);
     9d0:	4b03      	ldr	r3, [pc, #12]	; (9e0 <delay_driver_init+0x14>)
     9d2:	0018      	movs	r0, r3
     9d4:	4b03      	ldr	r3, [pc, #12]	; (9e4 <delay_driver_init+0x18>)
     9d6:	4798      	blx	r3
}
     9d8:	46c0      	nop			; (mov r8, r8)
     9da:	46bd      	mov	sp, r7
     9dc:	bd80      	pop	{r7, pc}
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	e000e010 	.word	0xe000e010
     9e4:	00000b09 	.word	0x00000b09

000009e8 <system_init>:

void system_init(void)
{
     9e8:	b580      	push	{r7, lr}
     9ea:	af00      	add	r7, sp, #0
	init_mcu();
     9ec:	4b2e      	ldr	r3, [pc, #184]	; (aa8 <system_init+0xc0>)
     9ee:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(LED3,
     9f0:	2100      	movs	r1, #0
     9f2:	201b      	movs	r0, #27
     9f4:	4b2d      	ldr	r3, [pc, #180]	; (aac <system_init+0xc4>)
     9f6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED3, GPIO_DIRECTION_OUT);
     9f8:	2102      	movs	r1, #2
     9fa:	201b      	movs	r0, #27
     9fc:	4b2c      	ldr	r3, [pc, #176]	; (ab0 <system_init+0xc8>)
     9fe:	4798      	blx	r3

	gpio_set_pin_function(LED3, GPIO_PIN_FUNCTION_OFF);
     a00:	2301      	movs	r3, #1
     a02:	425b      	negs	r3, r3
     a04:	0019      	movs	r1, r3
     a06:	201b      	movs	r0, #27
     a08:	4b2a      	ldr	r3, [pc, #168]	; (ab4 <system_init+0xcc>)
     a0a:	4798      	blx	r3

	// GPIO on PA28

	gpio_set_pin_level(LED4,
     a0c:	2100      	movs	r1, #0
     a0e:	201c      	movs	r0, #28
     a10:	4b26      	ldr	r3, [pc, #152]	; (aac <system_init+0xc4>)
     a12:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED4, GPIO_DIRECTION_OUT);
     a14:	2102      	movs	r1, #2
     a16:	201c      	movs	r0, #28
     a18:	4b25      	ldr	r3, [pc, #148]	; (ab0 <system_init+0xc8>)
     a1a:	4798      	blx	r3

	gpio_set_pin_function(LED4, GPIO_PIN_FUNCTION_OFF);
     a1c:	2301      	movs	r3, #1
     a1e:	425b      	negs	r3, r3
     a20:	0019      	movs	r1, r3
     a22:	201c      	movs	r0, #28
     a24:	4b23      	ldr	r3, [pc, #140]	; (ab4 <system_init+0xcc>)
     a26:	4798      	blx	r3

	// GPIO on PB02

	// Set pin direction to input
	gpio_set_pin_direction(BTN1, GPIO_DIRECTION_IN);
     a28:	2101      	movs	r1, #1
     a2a:	2022      	movs	r0, #34	; 0x22
     a2c:	4b20      	ldr	r3, [pc, #128]	; (ab0 <system_init+0xc8>)
     a2e:	4798      	blx	r3

	gpio_set_pin_pull_mode(BTN1,
     a30:	2100      	movs	r1, #0
     a32:	2022      	movs	r0, #34	; 0x22
     a34:	4b20      	ldr	r3, [pc, #128]	; (ab8 <system_init+0xd0>)
     a36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(BTN1, GPIO_PIN_FUNCTION_OFF);
     a38:	2301      	movs	r3, #1
     a3a:	425b      	negs	r3, r3
     a3c:	0019      	movs	r1, r3
     a3e:	2022      	movs	r0, #34	; 0x22
     a40:	4b1c      	ldr	r3, [pc, #112]	; (ab4 <system_init+0xcc>)
     a42:	4798      	blx	r3

	// GPIO on PB03

	// Set pin direction to input
	gpio_set_pin_direction(BTN2, GPIO_DIRECTION_IN);
     a44:	2101      	movs	r1, #1
     a46:	2023      	movs	r0, #35	; 0x23
     a48:	4b19      	ldr	r3, [pc, #100]	; (ab0 <system_init+0xc8>)
     a4a:	4798      	blx	r3

	gpio_set_pin_pull_mode(BTN2,
     a4c:	2100      	movs	r1, #0
     a4e:	2023      	movs	r0, #35	; 0x23
     a50:	4b19      	ldr	r3, [pc, #100]	; (ab8 <system_init+0xd0>)
     a52:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(BTN2, GPIO_PIN_FUNCTION_OFF);
     a54:	2301      	movs	r3, #1
     a56:	425b      	negs	r3, r3
     a58:	0019      	movs	r1, r3
     a5a:	2023      	movs	r0, #35	; 0x23
     a5c:	4b15      	ldr	r3, [pc, #84]	; (ab4 <system_init+0xcc>)
     a5e:	4798      	blx	r3

	// GPIO on PB22

	gpio_set_pin_level(LED1,
     a60:	2100      	movs	r1, #0
     a62:	2036      	movs	r0, #54	; 0x36
     a64:	4b11      	ldr	r3, [pc, #68]	; (aac <system_init+0xc4>)
     a66:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED1, GPIO_DIRECTION_OUT);
     a68:	2102      	movs	r1, #2
     a6a:	2036      	movs	r0, #54	; 0x36
     a6c:	4b10      	ldr	r3, [pc, #64]	; (ab0 <system_init+0xc8>)
     a6e:	4798      	blx	r3

	gpio_set_pin_function(LED1, GPIO_PIN_FUNCTION_OFF);
     a70:	2301      	movs	r3, #1
     a72:	425b      	negs	r3, r3
     a74:	0019      	movs	r1, r3
     a76:	2036      	movs	r0, #54	; 0x36
     a78:	4b0e      	ldr	r3, [pc, #56]	; (ab4 <system_init+0xcc>)
     a7a:	4798      	blx	r3

	// GPIO on PB23

	gpio_set_pin_level(LED2,
     a7c:	2100      	movs	r1, #0
     a7e:	2037      	movs	r0, #55	; 0x37
     a80:	4b0a      	ldr	r3, [pc, #40]	; (aac <system_init+0xc4>)
     a82:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED2, GPIO_DIRECTION_OUT);
     a84:	2102      	movs	r1, #2
     a86:	2037      	movs	r0, #55	; 0x37
     a88:	4b09      	ldr	r3, [pc, #36]	; (ab0 <system_init+0xc8>)
     a8a:	4798      	blx	r3

	gpio_set_pin_function(LED2, GPIO_PIN_FUNCTION_OFF);
     a8c:	2301      	movs	r3, #1
     a8e:	425b      	negs	r3, r3
     a90:	0019      	movs	r1, r3
     a92:	2037      	movs	r0, #55	; 0x37
     a94:	4b07      	ldr	r3, [pc, #28]	; (ab4 <system_init+0xcc>)
     a96:	4798      	blx	r3

	USART_0_init();
     a98:	4b08      	ldr	r3, [pc, #32]	; (abc <system_init+0xd4>)
     a9a:	4798      	blx	r3

	delay_driver_init();
     a9c:	4b08      	ldr	r3, [pc, #32]	; (ac0 <system_init+0xd8>)
     a9e:	4798      	blx	r3
}
     aa0:	46c0      	nop			; (mov r8, r8)
     aa2:	46bd      	mov	sp, r7
     aa4:	bd80      	pop	{r7, pc}
     aa6:	46c0      	nop			; (mov r8, r8)
     aa8:	00000911 	.word	0x00000911
     aac:	000008d1 	.word	0x000008d1
     ab0:	00000891 	.word	0x00000891
     ab4:	0000086d 	.word	0x0000086d
     ab8:	00000831 	.word	0x00000831
     abc:	0000098d 	.word	0x0000098d
     ac0:	000009cd 	.word	0x000009cd

00000ac4 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     ac4:	b580      	push	{r7, lr}
     ac6:	b084      	sub	sp, #16
     ac8:	af00      	add	r7, sp, #0
     aca:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     acc:	f3ef 8310 	mrs	r3, PRIMASK
     ad0:	60fb      	str	r3, [r7, #12]
  return(result);
     ad2:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     ad8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     ada:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	46bd      	mov	sp, r7
     ae2:	b004      	add	sp, #16
     ae4:	bd80      	pop	{r7, pc}

00000ae6 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
     ae6:	b580      	push	{r7, lr}
     ae8:	b084      	sub	sp, #16
     aea:	af00      	add	r7, sp, #0
     aec:	6078      	str	r0, [r7, #4]
     aee:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	681b      	ldr	r3, [r3, #0]
     af6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     af8:	68fb      	ldr	r3, [r7, #12]
     afa:	f383 8810 	msr	PRIMASK, r3
}
     afe:	46c0      	nop			; (mov r8, r8)
     b00:	46bd      	mov	sp, r7
     b02:	b004      	add	sp, #16
     b04:	bd80      	pop	{r7, pc}
	...

00000b08 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     b08:	b580      	push	{r7, lr}
     b0a:	b082      	sub	sp, #8
     b0c:	af00      	add	r7, sp, #0
     b0e:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
     b10:	4b05      	ldr	r3, [pc, #20]	; (b28 <delay_init+0x20>)
     b12:	687a      	ldr	r2, [r7, #4]
     b14:	601a      	str	r2, [r3, #0]
     b16:	4b04      	ldr	r3, [pc, #16]	; (b28 <delay_init+0x20>)
     b18:	681b      	ldr	r3, [r3, #0]
     b1a:	0018      	movs	r0, r3
     b1c:	4b03      	ldr	r3, [pc, #12]	; (b2c <delay_init+0x24>)
     b1e:	4798      	blx	r3
}
     b20:	46c0      	nop			; (mov r8, r8)
     b22:	46bd      	mov	sp, r7
     b24:	b002      	add	sp, #8
     b26:	bd80      	pop	{r7, pc}
     b28:	20000040 	.word	0x20000040
     b2c:	00002001 	.word	0x00002001

00000b30 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     b30:	b590      	push	{r4, r7, lr}
     b32:	b083      	sub	sp, #12
     b34:	af00      	add	r7, sp, #0
     b36:	0002      	movs	r2, r0
     b38:	1dbb      	adds	r3, r7, #6
     b3a:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     b3c:	4b07      	ldr	r3, [pc, #28]	; (b5c <delay_ms+0x2c>)
     b3e:	681c      	ldr	r4, [r3, #0]
     b40:	1dbb      	adds	r3, r7, #6
     b42:	881b      	ldrh	r3, [r3, #0]
     b44:	0018      	movs	r0, r3
     b46:	4b06      	ldr	r3, [pc, #24]	; (b60 <delay_ms+0x30>)
     b48:	4798      	blx	r3
     b4a:	0003      	movs	r3, r0
     b4c:	0019      	movs	r1, r3
     b4e:	0020      	movs	r0, r4
     b50:	4b04      	ldr	r3, [pc, #16]	; (b64 <delay_ms+0x34>)
     b52:	4798      	blx	r3
}
     b54:	46c0      	nop			; (mov r8, r8)
     b56:	46bd      	mov	sp, r7
     b58:	b003      	add	sp, #12
     b5a:	bd90      	pop	{r4, r7, pc}
     b5c:	20000040 	.word	0x20000040
     b60:	00001261 	.word	0x00001261
     b64:	0000201d 	.word	0x0000201d

00000b68 <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
     b68:	b580      	push	{r7, lr}
     b6a:	b086      	sub	sp, #24
     b6c:	af00      	add	r7, sp, #0
     b6e:	60f8      	str	r0, [r7, #12]
     b70:	60b9      	str	r1, [r7, #8]
     b72:	607a      	str	r2, [r7, #4]
     b74:	001a      	movs	r2, r3
     b76:	1cbb      	adds	r3, r7, #2
     b78:	801a      	strh	r2, [r3, #0]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     b7a:	68fb      	ldr	r3, [r7, #12]
     b7c:	2b00      	cmp	r3, #0
     b7e:	d00b      	beq.n	b98 <usart_async_init+0x30>
     b80:	68bb      	ldr	r3, [r7, #8]
     b82:	2b00      	cmp	r3, #0
     b84:	d008      	beq.n	b98 <usart_async_init+0x30>
     b86:	687b      	ldr	r3, [r7, #4]
     b88:	2b00      	cmp	r3, #0
     b8a:	d005      	beq.n	b98 <usart_async_init+0x30>
     b8c:	1cbb      	adds	r3, r7, #2
     b8e:	881b      	ldrh	r3, [r3, #0]
     b90:	2b00      	cmp	r3, #0
     b92:	d001      	beq.n	b98 <usart_async_init+0x30>
     b94:	2301      	movs	r3, #1
     b96:	e000      	b.n	b9a <usart_async_init+0x32>
     b98:	2300      	movs	r3, #0
     b9a:	1c1a      	adds	r2, r3, #0
     b9c:	2301      	movs	r3, #1
     b9e:	4013      	ands	r3, r2
     ba0:	b2db      	uxtb	r3, r3
     ba2:	491c      	ldr	r1, [pc, #112]	; (c14 <usart_async_init+0xac>)
     ba4:	223a      	movs	r2, #58	; 0x3a
     ba6:	0018      	movs	r0, r3
     ba8:	4b1b      	ldr	r3, [pc, #108]	; (c18 <usart_async_init+0xb0>)
     baa:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     bac:	68fb      	ldr	r3, [r7, #12]
     bae:	3334      	adds	r3, #52	; 0x34
     bb0:	0018      	movs	r0, r3
     bb2:	1cbb      	adds	r3, r7, #2
     bb4:	881a      	ldrh	r2, [r3, #0]
     bb6:	687b      	ldr	r3, [r7, #4]
     bb8:	0019      	movs	r1, r3
     bba:	4b18      	ldr	r3, [pc, #96]	; (c1c <usart_async_init+0xb4>)
     bbc:	4798      	blx	r3
     bbe:	1e03      	subs	r3, r0, #0
     bc0:	d002      	beq.n	bc8 <usart_async_init+0x60>
		return ERR_INVALID_ARG;
     bc2:	230d      	movs	r3, #13
     bc4:	425b      	negs	r3, r3
     bc6:	e020      	b.n	c0a <usart_async_init+0xa2>
	}
	init_status = _usart_async_init(&descr->device, hw);
     bc8:	68fb      	ldr	r3, [r7, #12]
     bca:	3308      	adds	r3, #8
     bcc:	68ba      	ldr	r2, [r7, #8]
     bce:	0011      	movs	r1, r2
     bd0:	0018      	movs	r0, r3
     bd2:	4b13      	ldr	r3, [pc, #76]	; (c20 <usart_async_init+0xb8>)
     bd4:	4798      	blx	r3
     bd6:	0003      	movs	r3, r0
     bd8:	617b      	str	r3, [r7, #20]
	if (init_status) {
     bda:	697b      	ldr	r3, [r7, #20]
     bdc:	2b00      	cmp	r3, #0
     bde:	d001      	beq.n	be4 <usart_async_init+0x7c>
		return init_status;
     be0:	697b      	ldr	r3, [r7, #20]
     be2:	e012      	b.n	c0a <usart_async_init+0xa2>
	}

	descr->io.read  = usart_async_read;
     be4:	68fb      	ldr	r3, [r7, #12]
     be6:	4a0f      	ldr	r2, [pc, #60]	; (c24 <usart_async_init+0xbc>)
     be8:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
     bea:	68fb      	ldr	r3, [r7, #12]
     bec:	4a0e      	ldr	r2, [pc, #56]	; (c28 <usart_async_init+0xc0>)
     bee:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     bf0:	68fb      	ldr	r3, [r7, #12]
     bf2:	4a0e      	ldr	r2, [pc, #56]	; (c2c <usart_async_init+0xc4>)
     bf4:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     bf6:	68fb      	ldr	r3, [r7, #12]
     bf8:	4a0d      	ldr	r2, [pc, #52]	; (c30 <usart_async_init+0xc8>)
     bfa:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     bfc:	68fb      	ldr	r3, [r7, #12]
     bfe:	4a0d      	ldr	r2, [pc, #52]	; (c34 <usart_async_init+0xcc>)
     c00:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     c02:	68fb      	ldr	r3, [r7, #12]
     c04:	4a0c      	ldr	r2, [pc, #48]	; (c38 <usart_async_init+0xd0>)
     c06:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
     c08:	2300      	movs	r3, #0
}
     c0a:	0018      	movs	r0, r3
     c0c:	46bd      	mov	sp, r7
     c0e:	b006      	add	sp, #24
     c10:	bd80      	pop	{r7, pc}
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	000021b4 	.word	0x000021b4
     c18:	00000eb3 	.word	0x00000eb3
     c1c:	00000ee1 	.word	0x00000ee1
     c20:	00001aa9 	.word	0x00001aa9
     c24:	00000cd5 	.word	0x00000cd5
     c28:	00000c3d 	.word	0x00000c3d
     c2c:	00000da1 	.word	0x00000da1
     c30:	00000e41 	.word	0x00000e41
     c34:	00000e11 	.word	0x00000e11
     c38:	00000e85 	.word	0x00000e85

00000c3c <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     c3c:	b580      	push	{r7, lr}
     c3e:	b086      	sub	sp, #24
     c40:	af00      	add	r7, sp, #0
     c42:	60f8      	str	r0, [r7, #12]
     c44:	60b9      	str	r1, [r7, #8]
     c46:	1dbb      	adds	r3, r7, #6
     c48:	801a      	strh	r2, [r3, #0]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
     c4a:	68fb      	ldr	r3, [r7, #12]
     c4c:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
     c4e:	697b      	ldr	r3, [r7, #20]
     c50:	2b00      	cmp	r3, #0
     c52:	d008      	beq.n	c66 <usart_async_write+0x2a>
     c54:	68bb      	ldr	r3, [r7, #8]
     c56:	2b00      	cmp	r3, #0
     c58:	d005      	beq.n	c66 <usart_async_write+0x2a>
     c5a:	1dbb      	adds	r3, r7, #6
     c5c:	881b      	ldrh	r3, [r3, #0]
     c5e:	2b00      	cmp	r3, #0
     c60:	d001      	beq.n	c66 <usart_async_write+0x2a>
     c62:	2301      	movs	r3, #1
     c64:	e000      	b.n	c68 <usart_async_write+0x2c>
     c66:	2300      	movs	r3, #0
     c68:	1c1a      	adds	r2, r3, #0
     c6a:	2301      	movs	r3, #1
     c6c:	4013      	ands	r3, r2
     c6e:	b2d8      	uxtb	r0, r3
     c70:	233c      	movs	r3, #60	; 0x3c
     c72:	33ff      	adds	r3, #255	; 0xff
     c74:	001a      	movs	r2, r3
     c76:	4b14      	ldr	r3, [pc, #80]	; (cc8 <usart_async_write+0x8c>)
     c78:	0019      	movs	r1, r3
     c7a:	4b14      	ldr	r3, [pc, #80]	; (ccc <usart_async_write+0x90>)
     c7c:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
     c7e:	697b      	ldr	r3, [r7, #20]
     c80:	2244      	movs	r2, #68	; 0x44
     c82:	5a9a      	ldrh	r2, [r3, r2]
     c84:	697b      	ldr	r3, [r7, #20]
     c86:	214c      	movs	r1, #76	; 0x4c
     c88:	5a5b      	ldrh	r3, [r3, r1]
     c8a:	429a      	cmp	r2, r3
     c8c:	d002      	beq.n	c94 <usart_async_write+0x58>
		return ERR_NO_RESOURCE;
     c8e:	231c      	movs	r3, #28
     c90:	425b      	negs	r3, r3
     c92:	e015      	b.n	cc0 <usart_async_write+0x84>
	}
	descr->tx_buffer        = (uint8_t *)buf;
     c94:	697b      	ldr	r3, [r7, #20]
     c96:	68ba      	ldr	r2, [r7, #8]
     c98:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
     c9a:	697b      	ldr	r3, [r7, #20]
     c9c:	1dba      	adds	r2, r7, #6
     c9e:	214c      	movs	r1, #76	; 0x4c
     ca0:	8812      	ldrh	r2, [r2, #0]
     ca2:	525a      	strh	r2, [r3, r1]
	descr->tx_por           = 0;
     ca4:	697b      	ldr	r3, [r7, #20]
     ca6:	2244      	movs	r2, #68	; 0x44
     ca8:	2100      	movs	r1, #0
     caa:	5299      	strh	r1, [r3, r2]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     cac:	697b      	ldr	r3, [r7, #20]
     cae:	2201      	movs	r2, #1
     cb0:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     cb2:	697b      	ldr	r3, [r7, #20]
     cb4:	3308      	adds	r3, #8
     cb6:	0018      	movs	r0, r3
     cb8:	4b05      	ldr	r3, [pc, #20]	; (cd0 <usart_async_write+0x94>)
     cba:	4798      	blx	r3

	return (int32_t)length;
     cbc:	1dbb      	adds	r3, r7, #6
     cbe:	881b      	ldrh	r3, [r3, #0]
}
     cc0:	0018      	movs	r0, r3
     cc2:	46bd      	mov	sp, r7
     cc4:	b006      	add	sp, #24
     cc6:	bd80      	pop	{r7, pc}
     cc8:	000021b4 	.word	0x000021b4
     ccc:	00000eb3 	.word	0x00000eb3
     cd0:	00001b79 	.word	0x00001b79

00000cd4 <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     cd4:	b580      	push	{r7, lr}
     cd6:	b088      	sub	sp, #32
     cd8:	af00      	add	r7, sp, #0
     cda:	60f8      	str	r0, [r7, #12]
     cdc:	60b9      	str	r1, [r7, #8]
     cde:	1dbb      	adds	r3, r7, #6
     ce0:	801a      	strh	r2, [r3, #0]
	uint16_t                       was_read = 0;
     ce2:	231e      	movs	r3, #30
     ce4:	18fb      	adds	r3, r7, r3
     ce6:	2200      	movs	r2, #0
     ce8:	801a      	strh	r2, [r3, #0]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
     cea:	68fb      	ldr	r3, [r7, #12]
     cec:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
     cee:	69bb      	ldr	r3, [r7, #24]
     cf0:	2b00      	cmp	r3, #0
     cf2:	d008      	beq.n	d06 <usart_async_read+0x32>
     cf4:	68bb      	ldr	r3, [r7, #8]
     cf6:	2b00      	cmp	r3, #0
     cf8:	d005      	beq.n	d06 <usart_async_read+0x32>
     cfa:	1dbb      	adds	r3, r7, #6
     cfc:	881b      	ldrh	r3, [r3, #0]
     cfe:	2b00      	cmp	r3, #0
     d00:	d001      	beq.n	d06 <usart_async_read+0x32>
     d02:	2301      	movs	r3, #1
     d04:	e000      	b.n	d08 <usart_async_read+0x34>
     d06:	2300      	movs	r3, #0
     d08:	1c1a      	adds	r2, r3, #0
     d0a:	2301      	movs	r3, #1
     d0c:	4013      	ands	r3, r2
     d0e:	b2d8      	uxtb	r0, r3
     d10:	23ac      	movs	r3, #172	; 0xac
     d12:	005a      	lsls	r2, r3, #1
     d14:	4b1c      	ldr	r3, [pc, #112]	; (d88 <usart_async_read+0xb4>)
     d16:	0019      	movs	r1, r3
     d18:	4b1c      	ldr	r3, [pc, #112]	; (d8c <usart_async_read+0xb8>)
     d1a:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
     d1c:	2310      	movs	r3, #16
     d1e:	18fb      	adds	r3, r7, r3
     d20:	0018      	movs	r0, r3
     d22:	4b1b      	ldr	r3, [pc, #108]	; (d90 <usart_async_read+0xbc>)
     d24:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     d26:	69bb      	ldr	r3, [r7, #24]
     d28:	3334      	adds	r3, #52	; 0x34
     d2a:	0018      	movs	r0, r3
     d2c:	4b19      	ldr	r3, [pc, #100]	; (d94 <usart_async_read+0xc0>)
     d2e:	4798      	blx	r3
     d30:	0003      	movs	r3, r0
     d32:	617b      	str	r3, [r7, #20]
	CRITICAL_SECTION_LEAVE()
     d34:	2310      	movs	r3, #16
     d36:	18fb      	adds	r3, r7, r3
     d38:	0018      	movs	r0, r3
     d3a:	4b17      	ldr	r3, [pc, #92]	; (d98 <usart_async_read+0xc4>)
     d3c:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
     d3e:	e00f      	b.n	d60 <usart_async_read+0x8c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     d40:	69bb      	ldr	r3, [r7, #24]
     d42:	3334      	adds	r3, #52	; 0x34
     d44:	0018      	movs	r0, r3
     d46:	231e      	movs	r3, #30
     d48:	18fb      	adds	r3, r7, r3
     d4a:	881b      	ldrh	r3, [r3, #0]
     d4c:	221e      	movs	r2, #30
     d4e:	18ba      	adds	r2, r7, r2
     d50:	1c59      	adds	r1, r3, #1
     d52:	8011      	strh	r1, [r2, #0]
     d54:	001a      	movs	r2, r3
     d56:	68bb      	ldr	r3, [r7, #8]
     d58:	189b      	adds	r3, r3, r2
     d5a:	0019      	movs	r1, r3
     d5c:	4b0f      	ldr	r3, [pc, #60]	; (d9c <usart_async_read+0xc8>)
     d5e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     d60:	231e      	movs	r3, #30
     d62:	18fb      	adds	r3, r7, r3
     d64:	881a      	ldrh	r2, [r3, #0]
     d66:	697b      	ldr	r3, [r7, #20]
     d68:	429a      	cmp	r2, r3
     d6a:	d206      	bcs.n	d7a <usart_async_read+0xa6>
     d6c:	231e      	movs	r3, #30
     d6e:	18fa      	adds	r2, r7, r3
     d70:	1dbb      	adds	r3, r7, #6
     d72:	8812      	ldrh	r2, [r2, #0]
     d74:	881b      	ldrh	r3, [r3, #0]
     d76:	429a      	cmp	r2, r3
     d78:	d3e2      	bcc.n	d40 <usart_async_read+0x6c>
	}

	return (int32_t)was_read;
     d7a:	231e      	movs	r3, #30
     d7c:	18fb      	adds	r3, r7, r3
     d7e:	881b      	ldrh	r3, [r3, #0]
}
     d80:	0018      	movs	r0, r3
     d82:	46bd      	mov	sp, r7
     d84:	b008      	add	sp, #32
     d86:	bd80      	pop	{r7, pc}
     d88:	000021b4 	.word	0x000021b4
     d8c:	00000eb3 	.word	0x00000eb3
     d90:	00000ac5 	.word	0x00000ac5
     d94:	0000103d 	.word	0x0000103d
     d98:	00000ae7 	.word	0x00000ae7
     d9c:	00000f55 	.word	0x00000f55

00000da0 <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
     da0:	b5b0      	push	{r4, r5, r7, lr}
     da2:	b084      	sub	sp, #16
     da4:	af00      	add	r7, sp, #0
     da6:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     da8:	687b      	ldr	r3, [r7, #4]
     daa:	3b08      	subs	r3, #8
     dac:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
     dae:	68fb      	ldr	r3, [r7, #12]
     db0:	2244      	movs	r2, #68	; 0x44
     db2:	5a9a      	ldrh	r2, [r3, r2]
     db4:	68fb      	ldr	r3, [r7, #12]
     db6:	214c      	movs	r1, #76	; 0x4c
     db8:	5a5b      	ldrh	r3, [r3, r1]
     dba:	429a      	cmp	r2, r3
     dbc:	d018      	beq.n	df0 <usart_process_byte_sent+0x50>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     dbe:	68fb      	ldr	r3, [r7, #12]
     dc0:	3308      	adds	r3, #8
     dc2:	001c      	movs	r4, r3
     dc4:	68fb      	ldr	r3, [r7, #12]
     dc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
     dc8:	68fb      	ldr	r3, [r7, #12]
     dca:	2144      	movs	r1, #68	; 0x44
     dcc:	5a5b      	ldrh	r3, [r3, r1]
     dce:	1c59      	adds	r1, r3, #1
     dd0:	b28d      	uxth	r5, r1
     dd2:	68f9      	ldr	r1, [r7, #12]
     dd4:	2044      	movs	r0, #68	; 0x44
     dd6:	520d      	strh	r5, [r1, r0]
     dd8:	18d3      	adds	r3, r2, r3
     dda:	781b      	ldrb	r3, [r3, #0]
     ddc:	0019      	movs	r1, r3
     dde:	0020      	movs	r0, r4
     de0:	4b08      	ldr	r3, [pc, #32]	; (e04 <usart_process_byte_sent+0x64>)
     de2:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     de4:	68fb      	ldr	r3, [r7, #12]
     de6:	3308      	adds	r3, #8
     de8:	0018      	movs	r0, r3
     dea:	4b07      	ldr	r3, [pc, #28]	; (e08 <usart_process_byte_sent+0x68>)
     dec:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
     dee:	e004      	b.n	dfa <usart_process_byte_sent+0x5a>
		_usart_async_enable_tx_done_irq(&descr->device);
     df0:	68fb      	ldr	r3, [r7, #12]
     df2:	3308      	adds	r3, #8
     df4:	0018      	movs	r0, r3
     df6:	4b05      	ldr	r3, [pc, #20]	; (e0c <usart_process_byte_sent+0x6c>)
     df8:	4798      	blx	r3
}
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	46bd      	mov	sp, r7
     dfe:	b004      	add	sp, #16
     e00:	bdb0      	pop	{r4, r5, r7, pc}
     e02:	46c0      	nop			; (mov r8, r8)
     e04:	00001b4d 	.word	0x00001b4d
     e08:	00001b79 	.word	0x00001b79
     e0c:	00001b99 	.word	0x00001b99

00000e10 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     e10:	b580      	push	{r7, lr}
     e12:	b084      	sub	sp, #16
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     e18:	687b      	ldr	r3, [r7, #4]
     e1a:	3b08      	subs	r3, #8
     e1c:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
     e1e:	68fb      	ldr	r3, [r7, #12]
     e20:	2200      	movs	r2, #0
     e22:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     e24:	68fb      	ldr	r3, [r7, #12]
     e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     e28:	2b00      	cmp	r3, #0
     e2a:	d004      	beq.n	e36 <usart_transmission_complete+0x26>
		descr->usart_cb.tx_done(descr);
     e2c:	68fb      	ldr	r3, [r7, #12]
     e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     e30:	68fa      	ldr	r2, [r7, #12]
     e32:	0010      	movs	r0, r2
     e34:	4798      	blx	r3
	}
}
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	46bd      	mov	sp, r7
     e3a:	b004      	add	sp, #16
     e3c:	bd80      	pop	{r7, pc}
	...

00000e40 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
     e40:	b580      	push	{r7, lr}
     e42:	b084      	sub	sp, #16
     e44:	af00      	add	r7, sp, #0
     e46:	6078      	str	r0, [r7, #4]
     e48:	000a      	movs	r2, r1
     e4a:	1cfb      	adds	r3, r7, #3
     e4c:	701a      	strb	r2, [r3, #0]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	3b08      	subs	r3, #8
     e52:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
     e54:	68fb      	ldr	r3, [r7, #12]
     e56:	3334      	adds	r3, #52	; 0x34
     e58:	001a      	movs	r2, r3
     e5a:	1cfb      	adds	r3, r7, #3
     e5c:	781b      	ldrb	r3, [r3, #0]
     e5e:	0019      	movs	r1, r3
     e60:	0010      	movs	r0, r2
     e62:	4b07      	ldr	r3, [pc, #28]	; (e80 <usart_fill_rx_buffer+0x40>)
     e64:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
     e66:	68fb      	ldr	r3, [r7, #12]
     e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e6a:	2b00      	cmp	r3, #0
     e6c:	d004      	beq.n	e78 <usart_fill_rx_buffer+0x38>
		descr->usart_cb.rx_done(descr);
     e6e:	68fb      	ldr	r3, [r7, #12]
     e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e72:	68fa      	ldr	r2, [r7, #12]
     e74:	0010      	movs	r0, r2
     e76:	4798      	blx	r3
	}
}
     e78:	46c0      	nop			; (mov r8, r8)
     e7a:	46bd      	mov	sp, r7
     e7c:	b004      	add	sp, #16
     e7e:	bd80      	pop	{r7, pc}
     e80:	00000fc9 	.word	0x00000fc9

00000e84 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     e84:	b580      	push	{r7, lr}
     e86:	b084      	sub	sp, #16
     e88:	af00      	add	r7, sp, #0
     e8a:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     e8c:	687b      	ldr	r3, [r7, #4]
     e8e:	3b08      	subs	r3, #8
     e90:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
     e92:	68fb      	ldr	r3, [r7, #12]
     e94:	2200      	movs	r2, #0
     e96:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
     e98:	68fb      	ldr	r3, [r7, #12]
     e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     e9c:	2b00      	cmp	r3, #0
     e9e:	d004      	beq.n	eaa <usart_error+0x26>
		descr->usart_cb.error(descr);
     ea0:	68fb      	ldr	r3, [r7, #12]
     ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ea4:	68fa      	ldr	r2, [r7, #12]
     ea6:	0010      	movs	r0, r2
     ea8:	4798      	blx	r3
	}
}
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	46bd      	mov	sp, r7
     eae:	b004      	add	sp, #16
     eb0:	bd80      	pop	{r7, pc}

00000eb2 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
     eb2:	b580      	push	{r7, lr}
     eb4:	b084      	sub	sp, #16
     eb6:	af00      	add	r7, sp, #0
     eb8:	60b9      	str	r1, [r7, #8]
     eba:	607a      	str	r2, [r7, #4]
     ebc:	230f      	movs	r3, #15
     ebe:	18fb      	adds	r3, r7, r3
     ec0:	1c02      	adds	r2, r0, #0
     ec2:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
     ec4:	230f      	movs	r3, #15
     ec6:	18fb      	adds	r3, r7, r3
     ec8:	781b      	ldrb	r3, [r3, #0]
     eca:	2201      	movs	r2, #1
     ecc:	4053      	eors	r3, r2
     ece:	b2db      	uxtb	r3, r3
     ed0:	2b00      	cmp	r3, #0
     ed2:	d000      	beq.n	ed6 <assert+0x24>
		__asm("BKPT #0");
     ed4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	46bd      	mov	sp, r7
     eda:	b004      	add	sp, #16
     edc:	bd80      	pop	{r7, pc}
	...

00000ee0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     ee0:	b580      	push	{r7, lr}
     ee2:	b084      	sub	sp, #16
     ee4:	af00      	add	r7, sp, #0
     ee6:	60f8      	str	r0, [r7, #12]
     ee8:	60b9      	str	r1, [r7, #8]
     eea:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
     eec:	68fb      	ldr	r3, [r7, #12]
     eee:	2b00      	cmp	r3, #0
     ef0:	d007      	beq.n	f02 <ringbuffer_init+0x22>
     ef2:	68bb      	ldr	r3, [r7, #8]
     ef4:	2b00      	cmp	r3, #0
     ef6:	d004      	beq.n	f02 <ringbuffer_init+0x22>
     ef8:	687b      	ldr	r3, [r7, #4]
     efa:	2b00      	cmp	r3, #0
     efc:	d001      	beq.n	f02 <ringbuffer_init+0x22>
     efe:	2301      	movs	r3, #1
     f00:	e000      	b.n	f04 <ringbuffer_init+0x24>
     f02:	2300      	movs	r3, #0
     f04:	1c1a      	adds	r2, r3, #0
     f06:	2301      	movs	r3, #1
     f08:	4013      	ands	r3, r2
     f0a:	b2db      	uxtb	r3, r3
     f0c:	490f      	ldr	r1, [pc, #60]	; (f4c <ringbuffer_init+0x6c>)
     f0e:	2228      	movs	r2, #40	; 0x28
     f10:	0018      	movs	r0, r3
     f12:	4b0f      	ldr	r3, [pc, #60]	; (f50 <ringbuffer_init+0x70>)
     f14:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	3b01      	subs	r3, #1
     f1a:	687a      	ldr	r2, [r7, #4]
     f1c:	4013      	ands	r3, r2
     f1e:	d002      	beq.n	f26 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
     f20:	230d      	movs	r3, #13
     f22:	425b      	negs	r3, r3
     f24:	e00e      	b.n	f44 <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     f26:	687b      	ldr	r3, [r7, #4]
     f28:	1e5a      	subs	r2, r3, #1
     f2a:	68fb      	ldr	r3, [r7, #12]
     f2c:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
     f2e:	68fb      	ldr	r3, [r7, #12]
     f30:	2200      	movs	r2, #0
     f32:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
     f34:	68fb      	ldr	r3, [r7, #12]
     f36:	689a      	ldr	r2, [r3, #8]
     f38:	68fb      	ldr	r3, [r7, #12]
     f3a:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
     f3c:	68fb      	ldr	r3, [r7, #12]
     f3e:	68ba      	ldr	r2, [r7, #8]
     f40:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     f42:	2300      	movs	r3, #0
}
     f44:	0018      	movs	r0, r3
     f46:	46bd      	mov	sp, r7
     f48:	b004      	add	sp, #16
     f4a:	bd80      	pop	{r7, pc}
     f4c:	000021d4 	.word	0x000021d4
     f50:	00000eb3 	.word	0x00000eb3

00000f54 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     f54:	b580      	push	{r7, lr}
     f56:	b082      	sub	sp, #8
     f58:	af00      	add	r7, sp, #0
     f5a:	6078      	str	r0, [r7, #4]
     f5c:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
     f5e:	687b      	ldr	r3, [r7, #4]
     f60:	2b00      	cmp	r3, #0
     f62:	d004      	beq.n	f6e <ringbuffer_get+0x1a>
     f64:	683b      	ldr	r3, [r7, #0]
     f66:	2b00      	cmp	r3, #0
     f68:	d001      	beq.n	f6e <ringbuffer_get+0x1a>
     f6a:	2301      	movs	r3, #1
     f6c:	e000      	b.n	f70 <ringbuffer_get+0x1c>
     f6e:	2300      	movs	r3, #0
     f70:	1c1a      	adds	r2, r3, #0
     f72:	2301      	movs	r3, #1
     f74:	4013      	ands	r3, r2
     f76:	b2db      	uxtb	r3, r3
     f78:	4911      	ldr	r1, [pc, #68]	; (fc0 <ringbuffer_get+0x6c>)
     f7a:	2240      	movs	r2, #64	; 0x40
     f7c:	0018      	movs	r0, r3
     f7e:	4b11      	ldr	r3, [pc, #68]	; (fc4 <ringbuffer_get+0x70>)
     f80:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     f82:	687b      	ldr	r3, [r7, #4]
     f84:	68da      	ldr	r2, [r3, #12]
     f86:	687b      	ldr	r3, [r7, #4]
     f88:	689b      	ldr	r3, [r3, #8]
     f8a:	429a      	cmp	r2, r3
     f8c:	d011      	beq.n	fb2 <ringbuffer_get+0x5e>
		*data = rb->buf[rb->read_index & rb->size];
     f8e:	687b      	ldr	r3, [r7, #4]
     f90:	681a      	ldr	r2, [r3, #0]
     f92:	687b      	ldr	r3, [r7, #4]
     f94:	6899      	ldr	r1, [r3, #8]
     f96:	687b      	ldr	r3, [r7, #4]
     f98:	685b      	ldr	r3, [r3, #4]
     f9a:	400b      	ands	r3, r1
     f9c:	18d3      	adds	r3, r2, r3
     f9e:	781a      	ldrb	r2, [r3, #0]
     fa0:	683b      	ldr	r3, [r7, #0]
     fa2:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
     fa4:	687b      	ldr	r3, [r7, #4]
     fa6:	689b      	ldr	r3, [r3, #8]
     fa8:	1c5a      	adds	r2, r3, #1
     faa:	687b      	ldr	r3, [r7, #4]
     fac:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
     fae:	2300      	movs	r3, #0
     fb0:	e001      	b.n	fb6 <ringbuffer_get+0x62>
	}

	return ERR_NOT_FOUND;
     fb2:	230a      	movs	r3, #10
     fb4:	425b      	negs	r3, r3
}
     fb6:	0018      	movs	r0, r3
     fb8:	46bd      	mov	sp, r7
     fba:	b002      	add	sp, #8
     fbc:	bd80      	pop	{r7, pc}
     fbe:	46c0      	nop			; (mov r8, r8)
     fc0:	000021d4 	.word	0x000021d4
     fc4:	00000eb3 	.word	0x00000eb3

00000fc8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     fc8:	b580      	push	{r7, lr}
     fca:	b082      	sub	sp, #8
     fcc:	af00      	add	r7, sp, #0
     fce:	6078      	str	r0, [r7, #4]
     fd0:	000a      	movs	r2, r1
     fd2:	1cfb      	adds	r3, r7, #3
     fd4:	701a      	strb	r2, [r3, #0]
	ASSERT(rb);
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	1e5a      	subs	r2, r3, #1
     fda:	4193      	sbcs	r3, r2
     fdc:	b2db      	uxtb	r3, r3
     fde:	4915      	ldr	r1, [pc, #84]	; (1034 <ringbuffer_put+0x6c>)
     fe0:	2251      	movs	r2, #81	; 0x51
     fe2:	0018      	movs	r0, r3
     fe4:	4b14      	ldr	r3, [pc, #80]	; (1038 <ringbuffer_put+0x70>)
     fe6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     fe8:	687b      	ldr	r3, [r7, #4]
     fea:	681a      	ldr	r2, [r3, #0]
     fec:	687b      	ldr	r3, [r7, #4]
     fee:	68d9      	ldr	r1, [r3, #12]
     ff0:	687b      	ldr	r3, [r7, #4]
     ff2:	685b      	ldr	r3, [r3, #4]
     ff4:	400b      	ands	r3, r1
     ff6:	18d3      	adds	r3, r2, r3
     ff8:	1cfa      	adds	r2, r7, #3
     ffa:	7812      	ldrb	r2, [r2, #0]
     ffc:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     ffe:	687b      	ldr	r3, [r7, #4]
    1000:	68da      	ldr	r2, [r3, #12]
    1002:	687b      	ldr	r3, [r7, #4]
    1004:	689b      	ldr	r3, [r3, #8]
    1006:	1ad2      	subs	r2, r2, r3
    1008:	687b      	ldr	r3, [r7, #4]
    100a:	685b      	ldr	r3, [r3, #4]
    100c:	429a      	cmp	r2, r3
    100e:	d906      	bls.n	101e <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
    1010:	687b      	ldr	r3, [r7, #4]
    1012:	68da      	ldr	r2, [r3, #12]
    1014:	687b      	ldr	r3, [r7, #4]
    1016:	685b      	ldr	r3, [r3, #4]
    1018:	1ad2      	subs	r2, r2, r3
    101a:	687b      	ldr	r3, [r7, #4]
    101c:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	68db      	ldr	r3, [r3, #12]
    1022:	1c5a      	adds	r2, r3, #1
    1024:	687b      	ldr	r3, [r7, #4]
    1026:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1028:	2300      	movs	r3, #0
}
    102a:	0018      	movs	r0, r3
    102c:	46bd      	mov	sp, r7
    102e:	b002      	add	sp, #8
    1030:	bd80      	pop	{r7, pc}
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	000021d4 	.word	0x000021d4
    1038:	00000eb3 	.word	0x00000eb3

0000103c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    103c:	b580      	push	{r7, lr}
    103e:	b082      	sub	sp, #8
    1040:	af00      	add	r7, sp, #0
    1042:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
    1044:	687b      	ldr	r3, [r7, #4]
    1046:	1e5a      	subs	r2, r3, #1
    1048:	4193      	sbcs	r3, r2
    104a:	b2db      	uxtb	r3, r3
    104c:	4906      	ldr	r1, [pc, #24]	; (1068 <ringbuffer_num+0x2c>)
    104e:	2267      	movs	r2, #103	; 0x67
    1050:	0018      	movs	r0, r3
    1052:	4b06      	ldr	r3, [pc, #24]	; (106c <ringbuffer_num+0x30>)
    1054:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1056:	687b      	ldr	r3, [r7, #4]
    1058:	68da      	ldr	r2, [r3, #12]
    105a:	687b      	ldr	r3, [r7, #4]
    105c:	689b      	ldr	r3, [r3, #8]
    105e:	1ad3      	subs	r3, r2, r3
}
    1060:	0018      	movs	r0, r3
    1062:	46bd      	mov	sp, r7
    1064:	b002      	add	sp, #8
    1066:	bd80      	pop	{r7, pc}
    1068:	000021d4 	.word	0x000021d4
    106c:	00000eb3 	.word	0x00000eb3

00001070 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    1070:	b590      	push	{r4, r7, lr}
    1072:	b083      	sub	sp, #12
    1074:	af00      	add	r7, sp, #0
    1076:	6039      	str	r1, [r7, #0]
    1078:	0011      	movs	r1, r2
    107a:	1dbb      	adds	r3, r7, #6
    107c:	1c02      	adds	r2, r0, #0
    107e:	801a      	strh	r2, [r3, #0]
    1080:	1d7b      	adds	r3, r7, #5
    1082:	1c0a      	adds	r2, r1, #0
    1084:	701a      	strb	r2, [r3, #0]
	switch (power) {
    1086:	1d7b      	adds	r3, r7, #5
    1088:	781b      	ldrb	r3, [r3, #0]
    108a:	3b04      	subs	r3, #4
    108c:	2b04      	cmp	r3, #4
    108e:	d859      	bhi.n	1144 <_get_cycles_for_us_internal+0xd4>
    1090:	009a      	lsls	r2, r3, #2
    1092:	4b34      	ldr	r3, [pc, #208]	; (1164 <_get_cycles_for_us_internal+0xf4>)
    1094:	18d3      	adds	r3, r2, r3
    1096:	681b      	ldr	r3, [r3, #0]
    1098:	469f      	mov	pc, r3
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    109a:	1dbb      	adds	r3, r7, #6
    109c:	881c      	ldrh	r4, [r3, #0]
    109e:	683a      	ldr	r2, [r7, #0]
    10a0:	4b31      	ldr	r3, [pc, #196]	; (1168 <_get_cycles_for_us_internal+0xf8>)
    10a2:	4932      	ldr	r1, [pc, #200]	; (116c <_get_cycles_for_us_internal+0xfc>)
    10a4:	0010      	movs	r0, r2
    10a6:	4798      	blx	r3
    10a8:	0003      	movs	r3, r0
    10aa:	4363      	muls	r3, r4
    10ac:	1e5a      	subs	r2, r3, #1
    10ae:	4b2e      	ldr	r3, [pc, #184]	; (1168 <_get_cycles_for_us_internal+0xf8>)
    10b0:	210a      	movs	r1, #10
    10b2:	0010      	movs	r0, r2
    10b4:	4798      	blx	r3
    10b6:	0003      	movs	r3, r0
    10b8:	3301      	adds	r3, #1
    10ba:	e04e      	b.n	115a <_get_cycles_for_us_internal+0xea>
	case 7:
		return (us * (freq / 10000) - 1) / 100 + 1;
    10bc:	1dbb      	adds	r3, r7, #6
    10be:	881c      	ldrh	r4, [r3, #0]
    10c0:	683a      	ldr	r2, [r7, #0]
    10c2:	4b29      	ldr	r3, [pc, #164]	; (1168 <_get_cycles_for_us_internal+0xf8>)
    10c4:	492a      	ldr	r1, [pc, #168]	; (1170 <_get_cycles_for_us_internal+0x100>)
    10c6:	0010      	movs	r0, r2
    10c8:	4798      	blx	r3
    10ca:	0003      	movs	r3, r0
    10cc:	4363      	muls	r3, r4
    10ce:	1e5a      	subs	r2, r3, #1
    10d0:	4b25      	ldr	r3, [pc, #148]	; (1168 <_get_cycles_for_us_internal+0xf8>)
    10d2:	2164      	movs	r1, #100	; 0x64
    10d4:	0010      	movs	r0, r2
    10d6:	4798      	blx	r3
    10d8:	0003      	movs	r3, r0
    10da:	3301      	adds	r3, #1
    10dc:	e03d      	b.n	115a <_get_cycles_for_us_internal+0xea>
	case 6:
		return (us * (freq / 1000) - 1) / 1000 + 1;
    10de:	1dbb      	adds	r3, r7, #6
    10e0:	881c      	ldrh	r4, [r3, #0]
    10e2:	6838      	ldr	r0, [r7, #0]
    10e4:	4b20      	ldr	r3, [pc, #128]	; (1168 <_get_cycles_for_us_internal+0xf8>)
    10e6:	22fa      	movs	r2, #250	; 0xfa
    10e8:	0091      	lsls	r1, r2, #2
    10ea:	4798      	blx	r3
    10ec:	0003      	movs	r3, r0
    10ee:	4363      	muls	r3, r4
    10f0:	1e58      	subs	r0, r3, #1
    10f2:	4b1d      	ldr	r3, [pc, #116]	; (1168 <_get_cycles_for_us_internal+0xf8>)
    10f4:	22fa      	movs	r2, #250	; 0xfa
    10f6:	0091      	lsls	r1, r2, #2
    10f8:	4798      	blx	r3
    10fa:	0003      	movs	r3, r0
    10fc:	3301      	adds	r3, #1
    10fe:	e02c      	b.n	115a <_get_cycles_for_us_internal+0xea>
	case 5:
		return (us * (freq / 100) - 1) / 10000 + 1;
    1100:	1dbb      	adds	r3, r7, #6
    1102:	881c      	ldrh	r4, [r3, #0]
    1104:	683a      	ldr	r2, [r7, #0]
    1106:	4b18      	ldr	r3, [pc, #96]	; (1168 <_get_cycles_for_us_internal+0xf8>)
    1108:	2164      	movs	r1, #100	; 0x64
    110a:	0010      	movs	r0, r2
    110c:	4798      	blx	r3
    110e:	0003      	movs	r3, r0
    1110:	4363      	muls	r3, r4
    1112:	1e5a      	subs	r2, r3, #1
    1114:	4b14      	ldr	r3, [pc, #80]	; (1168 <_get_cycles_for_us_internal+0xf8>)
    1116:	4916      	ldr	r1, [pc, #88]	; (1170 <_get_cycles_for_us_internal+0x100>)
    1118:	0010      	movs	r0, r2
    111a:	4798      	blx	r3
    111c:	0003      	movs	r3, r0
    111e:	3301      	adds	r3, #1
    1120:	e01b      	b.n	115a <_get_cycles_for_us_internal+0xea>
	case 4:
		return (us * (freq / 10) - 1) / 100000 + 1;
    1122:	1dbb      	adds	r3, r7, #6
    1124:	881c      	ldrh	r4, [r3, #0]
    1126:	683a      	ldr	r2, [r7, #0]
    1128:	4b0f      	ldr	r3, [pc, #60]	; (1168 <_get_cycles_for_us_internal+0xf8>)
    112a:	210a      	movs	r1, #10
    112c:	0010      	movs	r0, r2
    112e:	4798      	blx	r3
    1130:	0003      	movs	r3, r0
    1132:	4363      	muls	r3, r4
    1134:	1e5a      	subs	r2, r3, #1
    1136:	4b0c      	ldr	r3, [pc, #48]	; (1168 <_get_cycles_for_us_internal+0xf8>)
    1138:	490c      	ldr	r1, [pc, #48]	; (116c <_get_cycles_for_us_internal+0xfc>)
    113a:	0010      	movs	r0, r2
    113c:	4798      	blx	r3
    113e:	0003      	movs	r3, r0
    1140:	3301      	adds	r3, #1
    1142:	e00a      	b.n	115a <_get_cycles_for_us_internal+0xea>
	default:
		return (us * freq - 1) / 1000000 + 1;
    1144:	1dbb      	adds	r3, r7, #6
    1146:	881b      	ldrh	r3, [r3, #0]
    1148:	683a      	ldr	r2, [r7, #0]
    114a:	4353      	muls	r3, r2
    114c:	1e5a      	subs	r2, r3, #1
    114e:	4b06      	ldr	r3, [pc, #24]	; (1168 <_get_cycles_for_us_internal+0xf8>)
    1150:	4908      	ldr	r1, [pc, #32]	; (1174 <_get_cycles_for_us_internal+0x104>)
    1152:	0010      	movs	r0, r2
    1154:	4798      	blx	r3
    1156:	0003      	movs	r3, r0
    1158:	3301      	adds	r3, #1
	}
}
    115a:	0018      	movs	r0, r3
    115c:	46bd      	mov	sp, r7
    115e:	b003      	add	sp, #12
    1160:	bd90      	pop	{r4, r7, pc}
    1162:	46c0      	nop			; (mov r8, r8)
    1164:	0000221c 	.word	0x0000221c
    1168:	000013d1 	.word	0x000013d1
    116c:	000186a0 	.word	0x000186a0
    1170:	00002710 	.word	0x00002710
    1174:	000f4240 	.word	0x000f4240

00001178 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    1178:	b590      	push	{r4, r7, lr}
    117a:	b083      	sub	sp, #12
    117c:	af00      	add	r7, sp, #0
    117e:	6039      	str	r1, [r7, #0]
    1180:	0011      	movs	r1, r2
    1182:	1dbb      	adds	r3, r7, #6
    1184:	1c02      	adds	r2, r0, #0
    1186:	801a      	strh	r2, [r3, #0]
    1188:	1d7b      	adds	r3, r7, #5
    118a:	1c0a      	adds	r2, r1, #0
    118c:	701a      	strb	r2, [r3, #0]
	switch (power) {
    118e:	1d7b      	adds	r3, r7, #5
    1190:	781b      	ldrb	r3, [r3, #0]
    1192:	3b04      	subs	r3, #4
    1194:	2b04      	cmp	r3, #4
    1196:	d84b      	bhi.n	1230 <_get_cycles_for_ms_internal+0xb8>
    1198:	009a      	lsls	r2, r3, #2
    119a:	4b2d      	ldr	r3, [pc, #180]	; (1250 <_get_cycles_for_ms_internal+0xd8>)
    119c:	18d3      	adds	r3, r2, r3
    119e:	681b      	ldr	r3, [r3, #0]
    11a0:	469f      	mov	pc, r3
	case 8:
		return (ms * (freq / 100000)) * 100;
    11a2:	1dbb      	adds	r3, r7, #6
    11a4:	881c      	ldrh	r4, [r3, #0]
    11a6:	683a      	ldr	r2, [r7, #0]
    11a8:	4b2a      	ldr	r3, [pc, #168]	; (1254 <_get_cycles_for_ms_internal+0xdc>)
    11aa:	492b      	ldr	r1, [pc, #172]	; (1258 <_get_cycles_for_ms_internal+0xe0>)
    11ac:	0010      	movs	r0, r2
    11ae:	4798      	blx	r3
    11b0:	0003      	movs	r3, r0
    11b2:	4363      	muls	r3, r4
    11b4:	2264      	movs	r2, #100	; 0x64
    11b6:	4353      	muls	r3, r2
    11b8:	e045      	b.n	1246 <_get_cycles_for_ms_internal+0xce>
	case 7:
		return (ms * (freq / 10000)) * 10;
    11ba:	1dbb      	adds	r3, r7, #6
    11bc:	881c      	ldrh	r4, [r3, #0]
    11be:	683a      	ldr	r2, [r7, #0]
    11c0:	4b24      	ldr	r3, [pc, #144]	; (1254 <_get_cycles_for_ms_internal+0xdc>)
    11c2:	4926      	ldr	r1, [pc, #152]	; (125c <_get_cycles_for_ms_internal+0xe4>)
    11c4:	0010      	movs	r0, r2
    11c6:	4798      	blx	r3
    11c8:	0003      	movs	r3, r0
    11ca:	4363      	muls	r3, r4
    11cc:	001a      	movs	r2, r3
    11ce:	0013      	movs	r3, r2
    11d0:	009b      	lsls	r3, r3, #2
    11d2:	189b      	adds	r3, r3, r2
    11d4:	005b      	lsls	r3, r3, #1
    11d6:	e036      	b.n	1246 <_get_cycles_for_ms_internal+0xce>
	case 6:
		return (ms * (freq / 1000));
    11d8:	1dbb      	adds	r3, r7, #6
    11da:	881c      	ldrh	r4, [r3, #0]
    11dc:	6838      	ldr	r0, [r7, #0]
    11de:	4b1d      	ldr	r3, [pc, #116]	; (1254 <_get_cycles_for_ms_internal+0xdc>)
    11e0:	22fa      	movs	r2, #250	; 0xfa
    11e2:	0091      	lsls	r1, r2, #2
    11e4:	4798      	blx	r3
    11e6:	0003      	movs	r3, r0
    11e8:	4363      	muls	r3, r4
    11ea:	e02c      	b.n	1246 <_get_cycles_for_ms_internal+0xce>
	case 5:
		return (ms * (freq / 100) - 1) / 10 + 1;
    11ec:	1dbb      	adds	r3, r7, #6
    11ee:	881c      	ldrh	r4, [r3, #0]
    11f0:	683a      	ldr	r2, [r7, #0]
    11f2:	4b18      	ldr	r3, [pc, #96]	; (1254 <_get_cycles_for_ms_internal+0xdc>)
    11f4:	2164      	movs	r1, #100	; 0x64
    11f6:	0010      	movs	r0, r2
    11f8:	4798      	blx	r3
    11fa:	0003      	movs	r3, r0
    11fc:	4363      	muls	r3, r4
    11fe:	1e5a      	subs	r2, r3, #1
    1200:	4b14      	ldr	r3, [pc, #80]	; (1254 <_get_cycles_for_ms_internal+0xdc>)
    1202:	210a      	movs	r1, #10
    1204:	0010      	movs	r0, r2
    1206:	4798      	blx	r3
    1208:	0003      	movs	r3, r0
    120a:	3301      	adds	r3, #1
    120c:	e01b      	b.n	1246 <_get_cycles_for_ms_internal+0xce>
	case 4:
		return (ms * (freq / 10) - 1) / 100 + 1;
    120e:	1dbb      	adds	r3, r7, #6
    1210:	881c      	ldrh	r4, [r3, #0]
    1212:	683a      	ldr	r2, [r7, #0]
    1214:	4b0f      	ldr	r3, [pc, #60]	; (1254 <_get_cycles_for_ms_internal+0xdc>)
    1216:	210a      	movs	r1, #10
    1218:	0010      	movs	r0, r2
    121a:	4798      	blx	r3
    121c:	0003      	movs	r3, r0
    121e:	4363      	muls	r3, r4
    1220:	1e5a      	subs	r2, r3, #1
    1222:	4b0c      	ldr	r3, [pc, #48]	; (1254 <_get_cycles_for_ms_internal+0xdc>)
    1224:	2164      	movs	r1, #100	; 0x64
    1226:	0010      	movs	r0, r2
    1228:	4798      	blx	r3
    122a:	0003      	movs	r3, r0
    122c:	3301      	adds	r3, #1
    122e:	e00a      	b.n	1246 <_get_cycles_for_ms_internal+0xce>
	default:
		return (ms * freq - 1) / 1000 + 1;
    1230:	1dbb      	adds	r3, r7, #6
    1232:	881b      	ldrh	r3, [r3, #0]
    1234:	683a      	ldr	r2, [r7, #0]
    1236:	4353      	muls	r3, r2
    1238:	1e58      	subs	r0, r3, #1
    123a:	4b06      	ldr	r3, [pc, #24]	; (1254 <_get_cycles_for_ms_internal+0xdc>)
    123c:	22fa      	movs	r2, #250	; 0xfa
    123e:	0091      	lsls	r1, r2, #2
    1240:	4798      	blx	r3
    1242:	0003      	movs	r3, r0
    1244:	3301      	adds	r3, #1
	}
}
    1246:	0018      	movs	r0, r3
    1248:	46bd      	mov	sp, r7
    124a:	b003      	add	sp, #12
    124c:	bd90      	pop	{r4, r7, pc}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	00002230 	.word	0x00002230
    1254:	000013d1 	.word	0x000013d1
    1258:	000186a0 	.word	0x000186a0
    125c:	00002710 	.word	0x00002710

00001260 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    1260:	b580      	push	{r7, lr}
    1262:	b082      	sub	sp, #8
    1264:	af00      	add	r7, sp, #0
    1266:	0002      	movs	r2, r0
    1268:	1dbb      	adds	r3, r7, #6
    126a:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    126c:	4905      	ldr	r1, [pc, #20]	; (1284 <_get_cycles_for_ms+0x24>)
    126e:	1dbb      	adds	r3, r7, #6
    1270:	881b      	ldrh	r3, [r3, #0]
    1272:	2208      	movs	r2, #8
    1274:	0018      	movs	r0, r3
    1276:	4b04      	ldr	r3, [pc, #16]	; (1288 <_get_cycles_for_ms+0x28>)
    1278:	4798      	blx	r3
    127a:	0003      	movs	r3, r0
}
    127c:	0018      	movs	r0, r3
    127e:	46bd      	mov	sp, r7
    1280:	b002      	add	sp, #8
    1282:	bd80      	pop	{r7, pc}
    1284:	02dc6c00 	.word	0x02dc6c00
    1288:	00001179 	.word	0x00001179

0000128c <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_MANW;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    128c:	b580      	push	{r7, lr}
    128e:	b082      	sub	sp, #8
    1290:	af00      	add	r7, sp, #0
    1292:	6078      	str	r0, [r7, #4]
    1294:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	685a      	ldr	r2, [r3, #4]
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	005b      	lsls	r3, r3, #1
    129e:	211e      	movs	r1, #30
    12a0:	400b      	ands	r3, r1
    12a2:	431a      	orrs	r2, r3
    12a4:	687b      	ldr	r3, [r7, #4]
    12a6:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    12a8:	46c0      	nop			; (mov r8, r8)
    12aa:	46bd      	mov	sp, r7
    12ac:	b002      	add	sp, #8
    12ae:	bd80      	pop	{r7, pc}

000012b0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    12b0:	b580      	push	{r7, lr}
    12b2:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    12b4:	4b0a      	ldr	r3, [pc, #40]	; (12e0 <_init_chip+0x30>)
    12b6:	2100      	movs	r1, #0
    12b8:	0018      	movs	r0, r3
    12ba:	4b0a      	ldr	r3, [pc, #40]	; (12e4 <_init_chip+0x34>)
    12bc:	4798      	blx	r3

	_osc32kctrl_init_sources();
    12be:	4b0a      	ldr	r3, [pc, #40]	; (12e8 <_init_chip+0x38>)
    12c0:	4798      	blx	r3
	_oscctrl_init_sources();
    12c2:	4b0a      	ldr	r3, [pc, #40]	; (12ec <_init_chip+0x3c>)
    12c4:	4798      	blx	r3
	_mclk_init();
    12c6:	4b0a      	ldr	r3, [pc, #40]	; (12f0 <_init_chip+0x40>)
    12c8:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    12ca:	4b0a      	ldr	r3, [pc, #40]	; (12f4 <_init_chip+0x44>)
    12cc:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    12ce:	20ff      	movs	r0, #255	; 0xff
    12d0:	4b09      	ldr	r3, [pc, #36]	; (12f8 <_init_chip+0x48>)
    12d2:	4798      	blx	r3

	_div_init();
    12d4:	4b09      	ldr	r3, [pc, #36]	; (12fc <_init_chip+0x4c>)
    12d6:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    12d8:	46c0      	nop			; (mov r8, r8)
    12da:	46bd      	mov	sp, r7
    12dc:	bd80      	pop	{r7, pc}
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	41004000 	.word	0x41004000
    12e4:	0000128d 	.word	0x0000128d
    12e8:	0000153d 	.word	0x0000153d
    12ec:	00001681 	.word	0x00001681
    12f0:	000014c5 	.word	0x000014c5
    12f4:	000016fd 	.word	0x000016fd
    12f8:	00001475 	.word	0x00001475
    12fc:	000013b5 	.word	0x000013b5

00001300 <hri_divas_write_CTRLA_DLZ_bit>:
	tmp = (tmp & DIVAS_CTRLA_DLZ) >> DIVAS_CTRLA_DLZ_Pos;
	return (bool)tmp;
}

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
    1300:	b580      	push	{r7, lr}
    1302:	b084      	sub	sp, #16
    1304:	af00      	add	r7, sp, #0
    1306:	6078      	str	r0, [r7, #4]
    1308:	000a      	movs	r2, r1
    130a:	1cfb      	adds	r3, r7, #3
    130c:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
    130e:	230f      	movs	r3, #15
    1310:	18fb      	adds	r3, r7, r3
    1312:	687a      	ldr	r2, [r7, #4]
    1314:	7812      	ldrb	r2, [r2, #0]
    1316:	701a      	strb	r2, [r3, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
    1318:	230f      	movs	r3, #15
    131a:	18fb      	adds	r3, r7, r3
    131c:	220f      	movs	r2, #15
    131e:	18ba      	adds	r2, r7, r2
    1320:	7812      	ldrb	r2, [r2, #0]
    1322:	2102      	movs	r1, #2
    1324:	438a      	bics	r2, r1
    1326:	701a      	strb	r2, [r3, #0]
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
    1328:	1cfb      	adds	r3, r7, #3
    132a:	781b      	ldrb	r3, [r3, #0]
    132c:	005b      	lsls	r3, r3, #1
    132e:	b25a      	sxtb	r2, r3
    1330:	230f      	movs	r3, #15
    1332:	18fb      	adds	r3, r7, r3
    1334:	781b      	ldrb	r3, [r3, #0]
    1336:	b25b      	sxtb	r3, r3
    1338:	4313      	orrs	r3, r2
    133a:	b25a      	sxtb	r2, r3
    133c:	230f      	movs	r3, #15
    133e:	18fb      	adds	r3, r7, r3
    1340:	701a      	strb	r2, [r3, #0]
	((Divas *)hw)->CTRLA.reg = tmp;
    1342:	687b      	ldr	r3, [r7, #4]
    1344:	220f      	movs	r2, #15
    1346:	18ba      	adds	r2, r7, r2
    1348:	7812      	ldrb	r2, [r2, #0]
    134a:	701a      	strb	r2, [r3, #0]
	DIVAS_CRITICAL_SECTION_LEAVE();
}
    134c:	46c0      	nop			; (mov r8, r8)
    134e:	46bd      	mov	sp, r7
    1350:	b004      	add	sp, #16
    1352:	bd80      	pop	{r7, pc}

00001354 <_divas_div>:
 *  \param[in] s Indicate operation mode: signed/unsigned
 *  \param[in] n The dividend
 *  \param[in] d The divisor
 */
static inline void _divas_div(const uint8_t s, const uint32_t n, const uint32_t d)
{
    1354:	b580      	push	{r7, lr}
    1356:	b084      	sub	sp, #16
    1358:	af00      	add	r7, sp, #0
    135a:	60b9      	str	r1, [r7, #8]
    135c:	607a      	str	r2, [r7, #4]
    135e:	230f      	movs	r3, #15
    1360:	18fb      	adds	r3, r7, r3
    1362:	1c02      	adds	r2, r0, #0
    1364:	701a      	strb	r2, [r3, #0]
	DIVAS->CTRLA.bit.SIGNED = s;
    1366:	2390      	movs	r3, #144	; 0x90
    1368:	05da      	lsls	r2, r3, #23
    136a:	230f      	movs	r3, #15
    136c:	18fb      	adds	r3, r7, r3
    136e:	781b      	ldrb	r3, [r3, #0]
    1370:	2101      	movs	r1, #1
    1372:	400b      	ands	r3, r1
    1374:	b2d9      	uxtb	r1, r3
    1376:	7813      	ldrb	r3, [r2, #0]
    1378:	2001      	movs	r0, #1
    137a:	4008      	ands	r0, r1
    137c:	2101      	movs	r1, #1
    137e:	438b      	bics	r3, r1
    1380:	1c19      	adds	r1, r3, #0
    1382:	1c03      	adds	r3, r0, #0
    1384:	430b      	orrs	r3, r1
    1386:	7013      	strb	r3, [r2, #0]
	DIVAS->DIVIDEND.reg     = n;
    1388:	2390      	movs	r3, #144	; 0x90
    138a:	05db      	lsls	r3, r3, #23
    138c:	68ba      	ldr	r2, [r7, #8]
    138e:	609a      	str	r2, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    1390:	2390      	movs	r3, #144	; 0x90
    1392:	05db      	lsls	r3, r3, #23
    1394:	687a      	ldr	r2, [r7, #4]
    1396:	60da      	str	r2, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    1398:	46c0      	nop			; (mov r8, r8)
    139a:	2390      	movs	r3, #144	; 0x90
    139c:	05db      	lsls	r3, r3, #23
    139e:	791b      	ldrb	r3, [r3, #4]
    13a0:	07db      	lsls	r3, r3, #31
    13a2:	0fdb      	lsrs	r3, r3, #31
    13a4:	b2db      	uxtb	r3, r3
    13a6:	2b00      	cmp	r3, #0
    13a8:	d1f7      	bne.n	139a <_divas_div+0x46>
		/* Wait the division is complete. */
	}
}
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	46bd      	mov	sp, r7
    13ae:	b004      	add	sp, #16
    13b0:	bd80      	pop	{r7, pc}
	...

000013b4 <_div_init>:

/**
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
    13b4:	b580      	push	{r7, lr}
    13b6:	af00      	add	r7, sp, #0
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
    13b8:	2390      	movs	r3, #144	; 0x90
    13ba:	05db      	lsls	r3, r3, #23
    13bc:	2100      	movs	r1, #0
    13be:	0018      	movs	r0, r3
    13c0:	4b02      	ldr	r3, [pc, #8]	; (13cc <_div_init+0x18>)
    13c2:	4798      	blx	r3
}
    13c4:	46c0      	nop			; (mov r8, r8)
    13c6:	46bd      	mov	sp, r7
    13c8:	bd80      	pop	{r7, pc}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	00001301 	.word	0x00001301

000013d0 <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
    13d0:	b580      	push	{r7, lr}
    13d2:	b086      	sub	sp, #24
    13d4:	af00      	add	r7, sp, #0
    13d6:	6078      	str	r0, [r7, #4]
    13d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    13da:	f3ef 8310 	mrs	r3, PRIMASK
    13de:	60fb      	str	r3, [r7, #12]
  return(result);
    13e0:	68fb      	ldr	r3, [r7, #12]
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
    13e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    13e4:	b672      	cpsid	i
	_divas_div(0, numerator, denominator);
    13e6:	683a      	ldr	r2, [r7, #0]
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	0019      	movs	r1, r3
    13ec:	2000      	movs	r0, #0
    13ee:	4b08      	ldr	r3, [pc, #32]	; (1410 <__aeabi_uidiv+0x40>)
    13f0:	4798      	blx	r3
	res = _divas_result32();
    13f2:	2390      	movs	r3, #144	; 0x90
    13f4:	05db      	lsls	r3, r3, #23
    13f6:	691b      	ldr	r3, [r3, #16]
    13f8:	617b      	str	r3, [r7, #20]
	_DIVAS_CRITICAL_LEAVE();
    13fa:	68bb      	ldr	r3, [r7, #8]
    13fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    13fe:	693b      	ldr	r3, [r7, #16]
    1400:	f383 8810 	msr	PRIMASK, r3
	return res;
    1404:	697b      	ldr	r3, [r7, #20]
}
    1406:	0018      	movs	r0, r3
    1408:	46bd      	mov	sp, r7
    140a:	b006      	add	sp, #24
    140c:	bd80      	pop	{r7, pc}
    140e:	46c0      	nop			; (mov r8, r8)
    1410:	00001355 	.word	0x00001355

00001414 <hri_gclk_wait_for_sync>:
{
    1414:	b580      	push	{r7, lr}
    1416:	b082      	sub	sp, #8
    1418:	af00      	add	r7, sp, #0
    141a:	6078      	str	r0, [r7, #4]
    141c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    141e:	46c0      	nop			; (mov r8, r8)
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	685b      	ldr	r3, [r3, #4]
    1424:	683a      	ldr	r2, [r7, #0]
    1426:	4013      	ands	r3, r2
    1428:	d1fa      	bne.n	1420 <hri_gclk_wait_for_sync+0xc>
}
    142a:	46c0      	nop			; (mov r8, r8)
    142c:	46bd      	mov	sp, r7
    142e:	b002      	add	sp, #8
    1430:	bd80      	pop	{r7, pc}
	...

00001434 <hri_gclk_write_GENCTRL_reg>:
{
    1434:	b580      	push	{r7, lr}
    1436:	b084      	sub	sp, #16
    1438:	af00      	add	r7, sp, #0
    143a:	60f8      	str	r0, [r7, #12]
    143c:	607a      	str	r2, [r7, #4]
    143e:	230b      	movs	r3, #11
    1440:	18fb      	adds	r3, r7, r3
    1442:	1c0a      	adds	r2, r1, #0
    1444:	701a      	strb	r2, [r3, #0]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1446:	230b      	movs	r3, #11
    1448:	18fb      	adds	r3, r7, r3
    144a:	781a      	ldrb	r2, [r3, #0]
    144c:	68fb      	ldr	r3, [r7, #12]
    144e:	3208      	adds	r2, #8
    1450:	0092      	lsls	r2, r2, #2
    1452:	6879      	ldr	r1, [r7, #4]
    1454:	50d1      	str	r1, [r2, r3]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    1456:	4a05      	ldr	r2, [pc, #20]	; (146c <hri_gclk_write_GENCTRL_reg+0x38>)
    1458:	68fb      	ldr	r3, [r7, #12]
    145a:	0011      	movs	r1, r2
    145c:	0018      	movs	r0, r3
    145e:	4b04      	ldr	r3, [pc, #16]	; (1470 <hri_gclk_write_GENCTRL_reg+0x3c>)
    1460:	4798      	blx	r3
}
    1462:	46c0      	nop			; (mov r8, r8)
    1464:	46bd      	mov	sp, r7
    1466:	b004      	add	sp, #16
    1468:	bd80      	pop	{r7, pc}
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	000007fd 	.word	0x000007fd
    1470:	00001415 	.word	0x00001415

00001474 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    1474:	b580      	push	{r7, lr}
    1476:	b082      	sub	sp, #8
    1478:	af00      	add	r7, sp, #0
    147a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    147c:	687b      	ldr	r3, [r7, #4]
    147e:	2201      	movs	r2, #1
    1480:	4013      	ands	r3, r2
    1482:	d005      	beq.n	1490 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    1484:	4a04      	ldr	r2, [pc, #16]	; (1498 <_gclk_init_generators_by_fref+0x24>)
    1486:	4b05      	ldr	r3, [pc, #20]	; (149c <_gclk_init_generators_by_fref+0x28>)
    1488:	2100      	movs	r1, #0
    148a:	0018      	movs	r0, r3
    148c:	4b04      	ldr	r3, [pc, #16]	; (14a0 <_gclk_init_generators_by_fref+0x2c>)
    148e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    1490:	46c0      	nop			; (mov r8, r8)
    1492:	46bd      	mov	sp, r7
    1494:	b002      	add	sp, #8
    1496:	bd80      	pop	{r7, pc}
    1498:	00010106 	.word	0x00010106
    149c:	40001c00 	.word	0x40001c00
    14a0:	00001435 	.word	0x00001435

000014a4 <hri_mclk_write_CPUDIV_reg>:
{
    14a4:	b580      	push	{r7, lr}
    14a6:	b082      	sub	sp, #8
    14a8:	af00      	add	r7, sp, #0
    14aa:	6078      	str	r0, [r7, #4]
    14ac:	000a      	movs	r2, r1
    14ae:	1cfb      	adds	r3, r7, #3
    14b0:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->CPUDIV.reg = data;
    14b2:	687b      	ldr	r3, [r7, #4]
    14b4:	1cfa      	adds	r2, r7, #3
    14b6:	7812      	ldrb	r2, [r2, #0]
    14b8:	711a      	strb	r2, [r3, #4]
}
    14ba:	46c0      	nop			; (mov r8, r8)
    14bc:	46bd      	mov	sp, r7
    14be:	b002      	add	sp, #8
    14c0:	bd80      	pop	{r7, pc}
	...

000014c4 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    14c4:	b580      	push	{r7, lr}
    14c6:	b082      	sub	sp, #8
    14c8:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    14ca:	4b05      	ldr	r3, [pc, #20]	; (14e0 <_mclk_init+0x1c>)
    14cc:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
    14ce:	687b      	ldr	r3, [r7, #4]
    14d0:	2101      	movs	r1, #1
    14d2:	0018      	movs	r0, r3
    14d4:	4b03      	ldr	r3, [pc, #12]	; (14e4 <_mclk_init+0x20>)
    14d6:	4798      	blx	r3
}
    14d8:	46c0      	nop			; (mov r8, r8)
    14da:	46bd      	mov	sp, r7
    14dc:	b002      	add	sp, #8
    14de:	bd80      	pop	{r7, pc}
    14e0:	40000800 	.word	0x40000800
    14e4:	000014a5 	.word	0x000014a5

000014e8 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    14e8:	b580      	push	{r7, lr}
    14ea:	b082      	sub	sp, #8
    14ec:	af00      	add	r7, sp, #0
    14ee:	6078      	str	r0, [r7, #4]
    14f0:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    14f2:	687b      	ldr	r3, [r7, #4]
    14f4:	683a      	ldr	r2, [r7, #0]
    14f6:	611a      	str	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    14f8:	46c0      	nop			; (mov r8, r8)
    14fa:	46bd      	mov	sp, r7
    14fc:	b002      	add	sp, #8
    14fe:	bd80      	pop	{r7, pc}

00001500 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    1500:	b580      	push	{r7, lr}
    1502:	b084      	sub	sp, #16
    1504:	af00      	add	r7, sp, #0
    1506:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	69db      	ldr	r3, [r3, #28]
    150c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    150e:	68fb      	ldr	r3, [r7, #12]
    1510:	0a1b      	lsrs	r3, r3, #8
    1512:	221f      	movs	r2, #31
    1514:	4013      	ands	r3, r2
    1516:	60fb      	str	r3, [r7, #12]
	return tmp;
    1518:	68fb      	ldr	r3, [r7, #12]
}
    151a:	0018      	movs	r0, r3
    151c:	46bd      	mov	sp, r7
    151e:	b004      	add	sp, #16
    1520:	bd80      	pop	{r7, pc}

00001522 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    1522:	b580      	push	{r7, lr}
    1524:	b082      	sub	sp, #8
    1526:	af00      	add	r7, sp, #0
    1528:	6078      	str	r0, [r7, #4]
    152a:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	683a      	ldr	r2, [r7, #0]
    1530:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	46bd      	mov	sp, r7
    1536:	b002      	add	sp, #8
    1538:	bd80      	pop	{r7, pc}
	...

0000153c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    153c:	b580      	push	{r7, lr}
    153e:	b082      	sub	sp, #8
    1540:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    1542:	4b10      	ldr	r3, [pc, #64]	; (1584 <_osc32kctrl_init_sources+0x48>)
    1544:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    1546:	1cbb      	adds	r3, r7, #2
    1548:	2200      	movs	r2, #0
    154a:	801a      	strh	r2, [r3, #0]
	        | (CONF_OSC32K_RUNSTDBY << OSC32KCTRL_OSC32K_RUNSTDBY_Pos)
	        | (CONF_OSC32K_EN1K << OSC32KCTRL_OSC32K_EN1K_Pos) | (CONF_OSC32K_EN32K << OSC32KCTRL_OSC32K_EN32K_Pos)
	        | (CONF_OSC32K_ENABLE << OSC32KCTRL_OSC32K_ENABLE_Pos));
#endif
#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    154c:	687b      	ldr	r3, [r7, #4]
    154e:	0018      	movs	r0, r3
    1550:	4b0d      	ldr	r3, [pc, #52]	; (1588 <_osc32kctrl_init_sources+0x4c>)
    1552:	4798      	blx	r3
    1554:	0002      	movs	r2, r0
    1556:	1cbb      	adds	r3, r7, #2
    1558:	801a      	strh	r2, [r3, #0]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    155a:	1cbb      	adds	r3, r7, #2
    155c:	881b      	ldrh	r3, [r3, #0]
    155e:	021b      	lsls	r3, r3, #8
    1560:	001a      	movs	r2, r3
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    1562:	23f8      	movs	r3, #248	; 0xf8
    1564:	015b      	lsls	r3, r3, #5
    1566:	401a      	ands	r2, r3
    1568:	687b      	ldr	r3, [r7, #4]
    156a:	0011      	movs	r1, r2
    156c:	0018      	movs	r0, r3
    156e:	4b07      	ldr	r3, [pc, #28]	; (158c <_osc32kctrl_init_sources+0x50>)
    1570:	4798      	blx	r3
#if CONF_OSC32K_ENABLE == 1 && CONF_OSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_OSC32KRDY_bit(hw))
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    1572:	687b      	ldr	r3, [r7, #4]
    1574:	2101      	movs	r1, #1
    1576:	0018      	movs	r0, r3
    1578:	4b05      	ldr	r3, [pc, #20]	; (1590 <_osc32kctrl_init_sources+0x54>)
    157a:	4798      	blx	r3
	(void)calib;
}
    157c:	46c0      	nop			; (mov r8, r8)
    157e:	46bd      	mov	sp, r7
    1580:	b002      	add	sp, #8
    1582:	bd80      	pop	{r7, pc}
    1584:	40001400 	.word	0x40001400
    1588:	00001501 	.word	0x00001501
    158c:	00001523 	.word	0x00001523
    1590:	000014e9 	.word	0x000014e9

00001594 <hri_oscctrl_osc48msyncbusy_wait_for_sync>:
typedef uint8_t  hri_oscctrl_osc48mctrl_reg_t;
typedef uint8_t  hri_oscctrl_osc48mdiv_reg_t;
typedef uint8_t  hri_oscctrl_osc48mstup_reg_t;

static inline void hri_oscctrl_osc48msyncbusy_wait_for_sync(const void *const hw, hri_oscctrl_osc48msyncbusy_reg_t reg)
{
    1594:	b580      	push	{r7, lr}
    1596:	b082      	sub	sp, #8
    1598:	af00      	add	r7, sp, #0
    159a:	6078      	str	r0, [r7, #4]
    159c:	6039      	str	r1, [r7, #0]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	687b      	ldr	r3, [r7, #4]
    15a2:	699b      	ldr	r3, [r3, #24]
    15a4:	683a      	ldr	r2, [r7, #0]
    15a6:	4013      	ands	r3, r2
    15a8:	d1fa      	bne.n	15a0 <hri_oscctrl_osc48msyncbusy_wait_for_sync+0xc>
	};
}
    15aa:	46c0      	nop			; (mov r8, r8)
    15ac:	46bd      	mov	sp, r7
    15ae:	b002      	add	sp, #8
    15b0:	bd80      	pop	{r7, pc}

000015b2 <hri_oscctrl_get_STATUS_OSC48MRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW) >> OSCCTRL_STATUS_XOSCCKSW_Pos;
}

static inline bool hri_oscctrl_get_STATUS_OSC48MRDY_bit(const void *const hw)
{
    15b2:	b580      	push	{r7, lr}
    15b4:	b082      	sub	sp, #8
    15b6:	af00      	add	r7, sp, #0
    15b8:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
    15ba:	687b      	ldr	r3, [r7, #4]
    15bc:	68db      	ldr	r3, [r3, #12]
    15be:	091b      	lsrs	r3, r3, #4
    15c0:	2201      	movs	r2, #1
    15c2:	4013      	ands	r3, r2
    15c4:	1e5a      	subs	r2, r3, #1
    15c6:	4193      	sbcs	r3, r2
    15c8:	b2db      	uxtb	r3, r3
}
    15ca:	0018      	movs	r0, r3
    15cc:	46bd      	mov	sp, r7
    15ce:	b002      	add	sp, #8
    15d0:	bd80      	pop	{r7, pc}

000015d2 <hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit>:
{
	return ((Oscctrl *)hw)->STATUS.reg;
}

static inline bool hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(const void *const hw)
{
    15d2:	b580      	push	{r7, lr}
    15d4:	b082      	sub	sp, #8
    15d6:	af00      	add	r7, sp, #0
    15d8:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
    15da:	687b      	ldr	r3, [r7, #4]
    15dc:	699b      	ldr	r3, [r3, #24]
	       >> OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV_Pos;
    15de:	089b      	lsrs	r3, r3, #2
    15e0:	2201      	movs	r2, #1
    15e2:	4013      	ands	r3, r2
    15e4:	1e5a      	subs	r2, r3, #1
    15e6:	4193      	sbcs	r3, r2
    15e8:	b2db      	uxtb	r3, r3
}
    15ea:	0018      	movs	r0, r3
    15ec:	46bd      	mov	sp, r7
    15ee:	b002      	add	sp, #8
    15f0:	bd80      	pop	{r7, pc}

000015f2 <hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit>:
	((Oscctrl *)hw)->OSC48MCTRL.reg ^= OSCCTRL_OSC48MCTRL_RUNSTDBY;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(const void *const hw)
{
    15f2:	b580      	push	{r7, lr}
    15f4:	b082      	sub	sp, #8
    15f6:	af00      	add	r7, sp, #0
    15f8:	6078      	str	r0, [r7, #4]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	7d1b      	ldrb	r3, [r3, #20]
    15fe:	b2db      	uxtb	r3, r3
    1600:	2280      	movs	r2, #128	; 0x80
    1602:	4252      	negs	r2, r2
    1604:	4313      	orrs	r3, r2
    1606:	b2da      	uxtb	r2, r3
    1608:	687b      	ldr	r3, [r7, #4]
    160a:	751a      	strb	r2, [r3, #20]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    160c:	46c0      	nop			; (mov r8, r8)
    160e:	46bd      	mov	sp, r7
    1610:	b002      	add	sp, #8
    1612:	bd80      	pop	{r7, pc}

00001614 <hri_oscctrl_write_OSC48MCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
    1614:	b580      	push	{r7, lr}
    1616:	b082      	sub	sp, #8
    1618:	af00      	add	r7, sp, #0
    161a:	6078      	str	r0, [r7, #4]
    161c:	000a      	movs	r2, r1
    161e:	1cfb      	adds	r3, r7, #3
    1620:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
    1622:	687b      	ldr	r3, [r7, #4]
    1624:	1cfa      	adds	r2, r7, #3
    1626:	7812      	ldrb	r2, [r2, #0]
    1628:	751a      	strb	r2, [r3, #20]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    162a:	46c0      	nop			; (mov r8, r8)
    162c:	46bd      	mov	sp, r7
    162e:	b002      	add	sp, #8
    1630:	bd80      	pop	{r7, pc}
	...

00001634 <hri_oscctrl_write_OSC48MDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
    1634:	b580      	push	{r7, lr}
    1636:	b082      	sub	sp, #8
    1638:	af00      	add	r7, sp, #0
    163a:	6078      	str	r0, [r7, #4]
    163c:	000a      	movs	r2, r1
    163e:	1cfb      	adds	r3, r7, #3
    1640:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	1cfa      	adds	r2, r7, #3
    1646:	7812      	ldrb	r2, [r2, #0]
    1648:	755a      	strb	r2, [r3, #21]
	hri_oscctrl_osc48msyncbusy_wait_for_sync(hw, OSCCTRL_OSC48MSYNCBUSY_MASK);
    164a:	687b      	ldr	r3, [r7, #4]
    164c:	2104      	movs	r1, #4
    164e:	0018      	movs	r0, r3
    1650:	4b02      	ldr	r3, [pc, #8]	; (165c <hri_oscctrl_write_OSC48MDIV_reg+0x28>)
    1652:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    1654:	46c0      	nop			; (mov r8, r8)
    1656:	46bd      	mov	sp, r7
    1658:	b002      	add	sp, #8
    165a:	bd80      	pop	{r7, pc}
    165c:	00001595 	.word	0x00001595

00001660 <hri_oscctrl_write_OSC48MSTUP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
    1660:	b580      	push	{r7, lr}
    1662:	b082      	sub	sp, #8
    1664:	af00      	add	r7, sp, #0
    1666:	6078      	str	r0, [r7, #4]
    1668:	000a      	movs	r2, r1
    166a:	1cfb      	adds	r3, r7, #3
    166c:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	1cfa      	adds	r2, r7, #3
    1672:	7812      	ldrb	r2, [r2, #0]
    1674:	759a      	strb	r2, [r3, #22]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    1676:	46c0      	nop			; (mov r8, r8)
    1678:	46bd      	mov	sp, r7
    167a:	b002      	add	sp, #8
    167c:	bd80      	pop	{r7, pc}
	...

00001680 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1680:	b580      	push	{r7, lr}
    1682:	b082      	sub	sp, #8
    1684:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    1686:	4b16      	ldr	r3, [pc, #88]	; (16e0 <_oscctrl_init_sources+0x60>)
    1688:	607b      	str	r3, [r7, #4]
	        | (CONF_XOSC_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));

	hri_oscctrl_write_EVCTRL_reg(hw, (CONF_XOSC_CFDEO << OSCCTRL_EVCTRL_CFDEO_Pos));
#endif
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	2102      	movs	r1, #2
    168e:	0018      	movs	r0, r3
    1690:	4b14      	ldr	r3, [pc, #80]	; (16e4 <_oscctrl_init_sources+0x64>)
    1692:	4798      	blx	r3
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
    1694:	687b      	ldr	r3, [r7, #4]
    1696:	2100      	movs	r1, #0
    1698:	0018      	movs	r0, r3
    169a:	4b13      	ldr	r3, [pc, #76]	; (16e8 <_oscctrl_init_sources+0x68>)
    169c:	4798      	blx	r3
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	687b      	ldr	r3, [r7, #4]
    16a2:	0018      	movs	r0, r3
    16a4:	4b11      	ldr	r3, [pc, #68]	; (16ec <_oscctrl_init_sources+0x6c>)
    16a6:	4798      	blx	r3
    16a8:	1e03      	subs	r3, r0, #0
    16aa:	d1f9      	bne.n	16a0 <_oscctrl_init_sources+0x20>
		;
	hri_oscctrl_write_OSC48MSTUP_reg(hw, OSCCTRL_OSC48MSTUP_STARTUP(CONF_OSC48M_STARTUP));
    16ac:	687b      	ldr	r3, [r7, #4]
    16ae:	2107      	movs	r1, #7
    16b0:	0018      	movs	r0, r3
    16b2:	4b0f      	ldr	r3, [pc, #60]	; (16f0 <_oscctrl_init_sources+0x70>)
    16b4:	4798      	blx	r3
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
    16b6:	46c0      	nop			; (mov r8, r8)
    16b8:	687b      	ldr	r3, [r7, #4]
    16ba:	0018      	movs	r0, r3
    16bc:	4b0d      	ldr	r3, [pc, #52]	; (16f4 <_oscctrl_init_sources+0x74>)
    16be:	4798      	blx	r3
    16c0:	0003      	movs	r3, r0
    16c2:	001a      	movs	r2, r3
    16c4:	2301      	movs	r3, #1
    16c6:	4053      	eors	r3, r2
    16c8:	b2db      	uxtb	r3, r3
    16ca:	2b00      	cmp	r3, #0
    16cc:	d1f4      	bne.n	16b8 <_oscctrl_init_sources+0x38>
		;
#endif
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	0018      	movs	r0, r3
    16d2:	4b09      	ldr	r3, [pc, #36]	; (16f8 <_oscctrl_init_sources+0x78>)
    16d4:	4798      	blx	r3
#endif
#endif
	(void)hw;
}
    16d6:	46c0      	nop			; (mov r8, r8)
    16d8:	46bd      	mov	sp, r7
    16da:	b002      	add	sp, #8
    16dc:	bd80      	pop	{r7, pc}
    16de:	46c0      	nop			; (mov r8, r8)
    16e0:	40001000 	.word	0x40001000
    16e4:	00001615 	.word	0x00001615
    16e8:	00001635 	.word	0x00001635
    16ec:	000015d3 	.word	0x000015d3
    16f0:	00001661 	.word	0x00001661
    16f4:	000015b3 	.word	0x000015b3
    16f8:	000015f3 	.word	0x000015f3

000016fc <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    16fc:	b580      	push	{r7, lr}
    16fe:	b082      	sub	sp, #8
    1700:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    1702:	4b03      	ldr	r3, [pc, #12]	; (1710 <_oscctrl_init_referenced_generators+0x14>)
    1704:	607b      	str	r3, [r7, #4]
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1706:	46c0      	nop			; (mov r8, r8)
    1708:	46bd      	mov	sp, r7
    170a:	b002      	add	sp, #8
    170c:	bd80      	pop	{r7, pc}
    170e:	46c0      	nop			; (mov r8, r8)
    1710:	40001000 	.word	0x40001000

00001714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1714:	b580      	push	{r7, lr}
    1716:	b082      	sub	sp, #8
    1718:	af00      	add	r7, sp, #0
    171a:	0002      	movs	r2, r0
    171c:	1dfb      	adds	r3, r7, #7
    171e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    1720:	1dfb      	adds	r3, r7, #7
    1722:	781b      	ldrb	r3, [r3, #0]
    1724:	2b7f      	cmp	r3, #127	; 0x7f
    1726:	d809      	bhi.n	173c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1728:	4b06      	ldr	r3, [pc, #24]	; (1744 <__NVIC_EnableIRQ+0x30>)
    172a:	1dfa      	adds	r2, r7, #7
    172c:	7812      	ldrb	r2, [r2, #0]
    172e:	0011      	movs	r1, r2
    1730:	221f      	movs	r2, #31
    1732:	400a      	ands	r2, r1
    1734:	2101      	movs	r1, #1
    1736:	4091      	lsls	r1, r2
    1738:	000a      	movs	r2, r1
    173a:	601a      	str	r2, [r3, #0]
  }
}
    173c:	46c0      	nop			; (mov r8, r8)
    173e:	46bd      	mov	sp, r7
    1740:	b002      	add	sp, #8
    1742:	bd80      	pop	{r7, pc}
    1744:	e000e100 	.word	0xe000e100

00001748 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    1748:	b580      	push	{r7, lr}
    174a:	b082      	sub	sp, #8
    174c:	af00      	add	r7, sp, #0
    174e:	0002      	movs	r2, r0
    1750:	1dfb      	adds	r3, r7, #7
    1752:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    1754:	1dfb      	adds	r3, r7, #7
    1756:	781b      	ldrb	r3, [r3, #0]
    1758:	2b7f      	cmp	r3, #127	; 0x7f
    175a:	d80e      	bhi.n	177a <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    175c:	4909      	ldr	r1, [pc, #36]	; (1784 <__NVIC_DisableIRQ+0x3c>)
    175e:	1dfb      	adds	r3, r7, #7
    1760:	781b      	ldrb	r3, [r3, #0]
    1762:	001a      	movs	r2, r3
    1764:	231f      	movs	r3, #31
    1766:	4013      	ands	r3, r2
    1768:	2201      	movs	r2, #1
    176a:	409a      	lsls	r2, r3
    176c:	0013      	movs	r3, r2
    176e:	2280      	movs	r2, #128	; 0x80
    1770:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    1772:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1776:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    177a:	46c0      	nop			; (mov r8, r8)
    177c:	46bd      	mov	sp, r7
    177e:	b002      	add	sp, #8
    1780:	bd80      	pop	{r7, pc}
    1782:	46c0      	nop			; (mov r8, r8)
    1784:	e000e100 	.word	0xe000e100

00001788 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    1788:	b580      	push	{r7, lr}
    178a:	b082      	sub	sp, #8
    178c:	af00      	add	r7, sp, #0
    178e:	0002      	movs	r2, r0
    1790:	1dfb      	adds	r3, r7, #7
    1792:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    1794:	1dfb      	adds	r3, r7, #7
    1796:	781b      	ldrb	r3, [r3, #0]
    1798:	2b7f      	cmp	r3, #127	; 0x7f
    179a:	d80a      	bhi.n	17b2 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    179c:	4907      	ldr	r1, [pc, #28]	; (17bc <__NVIC_ClearPendingIRQ+0x34>)
    179e:	1dfb      	adds	r3, r7, #7
    17a0:	781b      	ldrb	r3, [r3, #0]
    17a2:	001a      	movs	r2, r3
    17a4:	231f      	movs	r3, #31
    17a6:	4013      	ands	r3, r2
    17a8:	2201      	movs	r2, #1
    17aa:	409a      	lsls	r2, r3
    17ac:	23c0      	movs	r3, #192	; 0xc0
    17ae:	005b      	lsls	r3, r3, #1
    17b0:	50ca      	str	r2, [r1, r3]
  }
}
    17b2:	46c0      	nop			; (mov r8, r8)
    17b4:	46bd      	mov	sp, r7
    17b6:	b002      	add	sp, #8
    17b8:	bd80      	pop	{r7, pc}
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	e000e100 	.word	0xe000e100

000017c0 <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    17c0:	b580      	push	{r7, lr}
    17c2:	b082      	sub	sp, #8
    17c4:	af00      	add	r7, sp, #0
    17c6:	6078      	str	r0, [r7, #4]
    17c8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    17ca:	46c0      	nop			; (mov r8, r8)
    17cc:	687b      	ldr	r3, [r7, #4]
    17ce:	69db      	ldr	r3, [r3, #28]
    17d0:	683a      	ldr	r2, [r7, #0]
    17d2:	4013      	ands	r3, r2
    17d4:	d1fa      	bne.n	17cc <hri_sercomusart_wait_for_sync+0xc>
	};
}
    17d6:	46c0      	nop			; (mov r8, r8)
    17d8:	46bd      	mov	sp, r7
    17da:	b002      	add	sp, #8
    17dc:	bd80      	pop	{r7, pc}

000017de <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    17de:	b580      	push	{r7, lr}
    17e0:	b082      	sub	sp, #8
    17e2:	af00      	add	r7, sp, #0
    17e4:	6078      	str	r0, [r7, #4]
    17e6:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    17e8:	687b      	ldr	r3, [r7, #4]
    17ea:	69db      	ldr	r3, [r3, #28]
    17ec:	683a      	ldr	r2, [r7, #0]
    17ee:	4013      	ands	r3, r2
    17f0:	1e5a      	subs	r2, r3, #1
    17f2:	4193      	sbcs	r3, r2
    17f4:	b2db      	uxtb	r3, r3
}
    17f6:	0018      	movs	r0, r3
    17f8:	46bd      	mov	sp, r7
    17fa:	b002      	add	sp, #8
    17fc:	bd80      	pop	{r7, pc}

000017fe <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    17fe:	b580      	push	{r7, lr}
    1800:	b082      	sub	sp, #8
    1802:	af00      	add	r7, sp, #0
    1804:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1806:	687b      	ldr	r3, [r7, #4]
    1808:	7e1b      	ldrb	r3, [r3, #24]
    180a:	b2db      	uxtb	r3, r3
    180c:	001a      	movs	r2, r3
    180e:	2301      	movs	r3, #1
    1810:	4013      	ands	r3, r2
    1812:	1e5a      	subs	r2, r3, #1
    1814:	4193      	sbcs	r3, r2
    1816:	b2db      	uxtb	r3, r3
}
    1818:	0018      	movs	r0, r3
    181a:	46bd      	mov	sp, r7
    181c:	b002      	add	sp, #8
    181e:	bd80      	pop	{r7, pc}

00001820 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    1820:	b580      	push	{r7, lr}
    1822:	b082      	sub	sp, #8
    1824:	af00      	add	r7, sp, #0
    1826:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	7e1b      	ldrb	r3, [r3, #24]
    182c:	b2db      	uxtb	r3, r3
    182e:	085b      	lsrs	r3, r3, #1
    1830:	2201      	movs	r2, #1
    1832:	4013      	ands	r3, r2
    1834:	1e5a      	subs	r2, r3, #1
    1836:	4193      	sbcs	r3, r2
    1838:	b2db      	uxtb	r3, r3
}
    183a:	0018      	movs	r0, r3
    183c:	46bd      	mov	sp, r7
    183e:	b002      	add	sp, #8
    1840:	bd80      	pop	{r7, pc}

00001842 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    1842:	b580      	push	{r7, lr}
    1844:	b082      	sub	sp, #8
    1846:	af00      	add	r7, sp, #0
    1848:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    184a:	687b      	ldr	r3, [r7, #4]
    184c:	7e1b      	ldrb	r3, [r3, #24]
    184e:	b2db      	uxtb	r3, r3
    1850:	089b      	lsrs	r3, r3, #2
    1852:	2201      	movs	r2, #1
    1854:	4013      	ands	r3, r2
    1856:	1e5a      	subs	r2, r3, #1
    1858:	4193      	sbcs	r3, r2
    185a:	b2db      	uxtb	r3, r3
}
    185c:	0018      	movs	r0, r3
    185e:	46bd      	mov	sp, r7
    1860:	b002      	add	sp, #8
    1862:	bd80      	pop	{r7, pc}

00001864 <hri_sercomusart_get_interrupt_ERROR_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
}

static inline bool hri_sercomusart_get_interrupt_ERROR_bit(const void *const hw)
{
    1864:	b580      	push	{r7, lr}
    1866:	b082      	sub	sp, #8
    1868:	af00      	add	r7, sp, #0
    186a:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    186c:	687b      	ldr	r3, [r7, #4]
    186e:	7e1b      	ldrb	r3, [r3, #24]
    1870:	b2db      	uxtb	r3, r3
    1872:	09db      	lsrs	r3, r3, #7
    1874:	2201      	movs	r2, #1
    1876:	4013      	ands	r3, r2
    1878:	1e5a      	subs	r2, r3, #1
    187a:	4193      	sbcs	r3, r2
    187c:	b2db      	uxtb	r3, r3
}
    187e:	0018      	movs	r0, r3
    1880:	46bd      	mov	sp, r7
    1882:	b002      	add	sp, #8
    1884:	bd80      	pop	{r7, pc}

00001886 <hri_sercomusart_clear_interrupt_ERROR_bit>:

static inline void hri_sercomusart_clear_interrupt_ERROR_bit(const void *const hw)
{
    1886:	b580      	push	{r7, lr}
    1888:	b082      	sub	sp, #8
    188a:	af00      	add	r7, sp, #0
    188c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    188e:	687b      	ldr	r3, [r7, #4]
    1890:	2280      	movs	r2, #128	; 0x80
    1892:	761a      	strb	r2, [r3, #24]
}
    1894:	46c0      	nop			; (mov r8, r8)
    1896:	46bd      	mov	sp, r7
    1898:	b002      	add	sp, #8
    189a:	bd80      	pop	{r7, pc}

0000189c <hri_sercomusart_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->SPI.INTENCLR.reg = mask;
}

static inline void hri_sercomusart_set_INTEN_DRE_bit(const void *const hw)
{
    189c:	b580      	push	{r7, lr}
    189e:	b082      	sub	sp, #8
    18a0:	af00      	add	r7, sp, #0
    18a2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    18a4:	687b      	ldr	r3, [r7, #4]
    18a6:	2201      	movs	r2, #1
    18a8:	759a      	strb	r2, [r3, #22]
}
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	46bd      	mov	sp, r7
    18ae:	b002      	add	sp, #8
    18b0:	bd80      	pop	{r7, pc}

000018b2 <hri_sercomusart_get_INTEN_DRE_bit>:

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
    18b2:	b580      	push	{r7, lr}
    18b4:	b082      	sub	sp, #8
    18b6:	af00      	add	r7, sp, #0
    18b8:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    18ba:	687b      	ldr	r3, [r7, #4]
    18bc:	7d9b      	ldrb	r3, [r3, #22]
    18be:	b2db      	uxtb	r3, r3
    18c0:	001a      	movs	r2, r3
    18c2:	2301      	movs	r3, #1
    18c4:	4013      	ands	r3, r2
    18c6:	1e5a      	subs	r2, r3, #1
    18c8:	4193      	sbcs	r3, r2
    18ca:	b2db      	uxtb	r3, r3
}
    18cc:	0018      	movs	r0, r3
    18ce:	46bd      	mov	sp, r7
    18d0:	b002      	add	sp, #8
    18d2:	bd80      	pop	{r7, pc}

000018d4 <hri_sercomusart_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
	}
}

static inline void hri_sercomusart_clear_INTEN_DRE_bit(const void *const hw)
{
    18d4:	b580      	push	{r7, lr}
    18d6:	b082      	sub	sp, #8
    18d8:	af00      	add	r7, sp, #0
    18da:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    18dc:	687b      	ldr	r3, [r7, #4]
    18de:	2201      	movs	r2, #1
    18e0:	751a      	strb	r2, [r3, #20]
}
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	46bd      	mov	sp, r7
    18e6:	b002      	add	sp, #8
    18e8:	bd80      	pop	{r7, pc}

000018ea <hri_sercomusart_set_INTEN_TXC_bit>:

static inline void hri_sercomusart_set_INTEN_TXC_bit(const void *const hw)
{
    18ea:	b580      	push	{r7, lr}
    18ec:	b082      	sub	sp, #8
    18ee:	af00      	add	r7, sp, #0
    18f0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    18f2:	687b      	ldr	r3, [r7, #4]
    18f4:	2202      	movs	r2, #2
    18f6:	759a      	strb	r2, [r3, #22]
}
    18f8:	46c0      	nop			; (mov r8, r8)
    18fa:	46bd      	mov	sp, r7
    18fc:	b002      	add	sp, #8
    18fe:	bd80      	pop	{r7, pc}

00001900 <hri_sercomusart_get_INTEN_TXC_bit>:

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
    1900:	b580      	push	{r7, lr}
    1902:	b082      	sub	sp, #8
    1904:	af00      	add	r7, sp, #0
    1906:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1908:	687b      	ldr	r3, [r7, #4]
    190a:	7d9b      	ldrb	r3, [r3, #22]
    190c:	b2db      	uxtb	r3, r3
    190e:	085b      	lsrs	r3, r3, #1
    1910:	2201      	movs	r2, #1
    1912:	4013      	ands	r3, r2
    1914:	1e5a      	subs	r2, r3, #1
    1916:	4193      	sbcs	r3, r2
    1918:	b2db      	uxtb	r3, r3
}
    191a:	0018      	movs	r0, r3
    191c:	46bd      	mov	sp, r7
    191e:	b002      	add	sp, #8
    1920:	bd80      	pop	{r7, pc}

00001922 <hri_sercomusart_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
	}
}

static inline void hri_sercomusart_clear_INTEN_TXC_bit(const void *const hw)
{
    1922:	b580      	push	{r7, lr}
    1924:	b082      	sub	sp, #8
    1926:	af00      	add	r7, sp, #0
    1928:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    192a:	687b      	ldr	r3, [r7, #4]
    192c:	2202      	movs	r2, #2
    192e:	751a      	strb	r2, [r3, #20]
}
    1930:	46c0      	nop			; (mov r8, r8)
    1932:	46bd      	mov	sp, r7
    1934:	b002      	add	sp, #8
    1936:	bd80      	pop	{r7, pc}

00001938 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1938:	b580      	push	{r7, lr}
    193a:	b082      	sub	sp, #8
    193c:	af00      	add	r7, sp, #0
    193e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	681b      	ldr	r3, [r3, #0]
    1944:	2202      	movs	r2, #2
    1946:	4393      	bics	r3, r2
    1948:	001a      	movs	r2, r3
    194a:	687b      	ldr	r3, [r7, #4]
    194c:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    194e:	687b      	ldr	r3, [r7, #4]
    1950:	2103      	movs	r1, #3
    1952:	0018      	movs	r0, r3
    1954:	4b02      	ldr	r3, [pc, #8]	; (1960 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x28>)
    1956:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1958:	46c0      	nop			; (mov r8, r8)
    195a:	46bd      	mov	sp, r7
    195c:	b002      	add	sp, #8
    195e:	bd80      	pop	{r7, pc}
    1960:	000017c1 	.word	0x000017c1

00001964 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    1964:	b580      	push	{r7, lr}
    1966:	b084      	sub	sp, #16
    1968:	af00      	add	r7, sp, #0
    196a:	6078      	str	r0, [r7, #4]
    196c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    196e:	687b      	ldr	r3, [r7, #4]
    1970:	2103      	movs	r1, #3
    1972:	0018      	movs	r0, r3
    1974:	4b06      	ldr	r3, [pc, #24]	; (1990 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    1976:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1978:	687b      	ldr	r3, [r7, #4]
    197a:	681b      	ldr	r3, [r3, #0]
    197c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    197e:	68fb      	ldr	r3, [r7, #12]
    1980:	683a      	ldr	r2, [r7, #0]
    1982:	4013      	ands	r3, r2
    1984:	60fb      	str	r3, [r7, #12]
	return tmp;
    1986:	68fb      	ldr	r3, [r7, #12]
}
    1988:	0018      	movs	r0, r3
    198a:	46bd      	mov	sp, r7
    198c:	b004      	add	sp, #16
    198e:	bd80      	pop	{r7, pc}
    1990:	000017c1 	.word	0x000017c1

00001994 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    1994:	b580      	push	{r7, lr}
    1996:	b082      	sub	sp, #8
    1998:	af00      	add	r7, sp, #0
    199a:	6078      	str	r0, [r7, #4]
    199c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    199e:	687b      	ldr	r3, [r7, #4]
    19a0:	683a      	ldr	r2, [r7, #0]
    19a2:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	2103      	movs	r1, #3
    19a8:	0018      	movs	r0, r3
    19aa:	4b03      	ldr	r3, [pc, #12]	; (19b8 <hri_sercomusart_write_CTRLA_reg+0x24>)
    19ac:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	46bd      	mov	sp, r7
    19b2:	b002      	add	sp, #8
    19b4:	bd80      	pop	{r7, pc}
    19b6:	46c0      	nop			; (mov r8, r8)
    19b8:	000017c1 	.word	0x000017c1

000019bc <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    19bc:	b580      	push	{r7, lr}
    19be:	b082      	sub	sp, #8
    19c0:	af00      	add	r7, sp, #0
    19c2:	6078      	str	r0, [r7, #4]
    19c4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    19c6:	687b      	ldr	r3, [r7, #4]
    19c8:	683a      	ldr	r2, [r7, #0]
    19ca:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    19cc:	687b      	ldr	r3, [r7, #4]
    19ce:	2107      	movs	r1, #7
    19d0:	0018      	movs	r0, r3
    19d2:	4b03      	ldr	r3, [pc, #12]	; (19e0 <hri_sercomusart_write_CTRLB_reg+0x24>)
    19d4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19d6:	46c0      	nop			; (mov r8, r8)
    19d8:	46bd      	mov	sp, r7
    19da:	b002      	add	sp, #8
    19dc:	bd80      	pop	{r7, pc}
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	000017c1 	.word	0x000017c1

000019e4 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    19e4:	b580      	push	{r7, lr}
    19e6:	b082      	sub	sp, #8
    19e8:	af00      	add	r7, sp, #0
    19ea:	6078      	str	r0, [r7, #4]
    19ec:	000a      	movs	r2, r1
    19ee:	1cbb      	adds	r3, r7, #2
    19f0:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    19f2:	687b      	ldr	r3, [r7, #4]
    19f4:	1cba      	adds	r2, r7, #2
    19f6:	8812      	ldrh	r2, [r2, #0]
    19f8:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	46bd      	mov	sp, r7
    19fe:	b002      	add	sp, #8
    1a00:	bd80      	pop	{r7, pc}

00001a02 <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    1a02:	b580      	push	{r7, lr}
    1a04:	b082      	sub	sp, #8
    1a06:	af00      	add	r7, sp, #0
    1a08:	6078      	str	r0, [r7, #4]
    1a0a:	000a      	movs	r2, r1
    1a0c:	1cfb      	adds	r3, r7, #3
    1a0e:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1a10:	687b      	ldr	r3, [r7, #4]
    1a12:	1cfa      	adds	r2, r7, #3
    1a14:	7812      	ldrb	r2, [r2, #0]
    1a16:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a18:	46c0      	nop			; (mov r8, r8)
    1a1a:	46bd      	mov	sp, r7
    1a1c:	b002      	add	sp, #8
    1a1e:	bd80      	pop	{r7, pc}

00001a20 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    1a20:	b580      	push	{r7, lr}
    1a22:	b082      	sub	sp, #8
    1a24:	af00      	add	r7, sp, #0
    1a26:	6078      	str	r0, [r7, #4]
    1a28:	000a      	movs	r2, r1
    1a2a:	1cbb      	adds	r3, r7, #2
    1a2c:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    1a2e:	687b      	ldr	r3, [r7, #4]
    1a30:	1cba      	adds	r2, r7, #2
    1a32:	8812      	ldrh	r2, [r2, #0]
    1a34:	851a      	strh	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	46bd      	mov	sp, r7
    1a3a:	b002      	add	sp, #8
    1a3c:	bd80      	pop	{r7, pc}

00001a3e <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    1a3e:	b580      	push	{r7, lr}
    1a40:	b082      	sub	sp, #8
    1a42:	af00      	add	r7, sp, #0
    1a44:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    1a46:	687b      	ldr	r3, [r7, #4]
    1a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1a4a:	b29b      	uxth	r3, r3
}
    1a4c:	0018      	movs	r0, r3
    1a4e:	46bd      	mov	sp, r7
    1a50:	b002      	add	sp, #8
    1a52:	bd80      	pop	{r7, pc}

00001a54 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    1a54:	b580      	push	{r7, lr}
    1a56:	b082      	sub	sp, #8
    1a58:	af00      	add	r7, sp, #0
    1a5a:	6078      	str	r0, [r7, #4]
    1a5c:	000a      	movs	r2, r1
    1a5e:	1cfb      	adds	r3, r7, #3
    1a60:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	1cfa      	adds	r2, r7, #3
    1a66:	2130      	movs	r1, #48	; 0x30
    1a68:	7812      	ldrb	r2, [r2, #0]
    1a6a:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a6c:	46c0      	nop			; (mov r8, r8)
    1a6e:	46bd      	mov	sp, r7
    1a70:	b002      	add	sp, #8
    1a72:	bd80      	pop	{r7, pc}

00001a74 <hri_sercomusart_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask)
{
    1a74:	b580      	push	{r7, lr}
    1a76:	b082      	sub	sp, #8
    1a78:	af00      	add	r7, sp, #0
    1a7a:	6078      	str	r0, [r7, #4]
    1a7c:	000a      	movs	r2, r1
    1a7e:	1cbb      	adds	r3, r7, #2
    1a80:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	1cba      	adds	r2, r7, #2
    1a86:	8812      	ldrh	r2, [r2, #0]
    1a88:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	46bd      	mov	sp, r7
    1a8e:	b002      	add	sp, #8
    1a90:	bd80      	pop	{r7, pc}

00001a92 <hri_sercomusart_read_STATUS_reg>:

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
    1a92:	b580      	push	{r7, lr}
    1a94:	b082      	sub	sp, #8
    1a96:	af00      	add	r7, sp, #0
    1a98:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.STATUS.reg;
    1a9a:	687b      	ldr	r3, [r7, #4]
    1a9c:	8b5b      	ldrh	r3, [r3, #26]
    1a9e:	b29b      	uxth	r3, r3
}
    1aa0:	0018      	movs	r0, r3
    1aa2:	46bd      	mov	sp, r7
    1aa4:	b002      	add	sp, #8
    1aa6:	bd80      	pop	{r7, pc}

00001aa8 <_usart_async_init>:

/**
 * \brief Initialize asynchronous SERCOM USART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
    1aa8:	b580      	push	{r7, lr}
    1aaa:	b084      	sub	sp, #16
    1aac:	af00      	add	r7, sp, #0
    1aae:	6078      	str	r0, [r7, #4]
    1ab0:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
    1ab2:	687b      	ldr	r3, [r7, #4]
    1ab4:	1e5a      	subs	r2, r3, #1
    1ab6:	4193      	sbcs	r3, r2
    1ab8:	b2db      	uxtb	r3, r3
    1aba:	491c      	ldr	r1, [pc, #112]	; (1b2c <_usart_async_init+0x84>)
    1abc:	22c4      	movs	r2, #196	; 0xc4
    1abe:	0018      	movs	r0, r3
    1ac0:	4b1b      	ldr	r3, [pc, #108]	; (1b30 <_usart_async_init+0x88>)
    1ac2:	4798      	blx	r3

	init_status = _usart_init(hw);
    1ac4:	683b      	ldr	r3, [r7, #0]
    1ac6:	0018      	movs	r0, r3
    1ac8:	4b1a      	ldr	r3, [pc, #104]	; (1b34 <_usart_async_init+0x8c>)
    1aca:	4798      	blx	r3
    1acc:	0003      	movs	r3, r0
    1ace:	60fb      	str	r3, [r7, #12]
	if (init_status) {
    1ad0:	68fb      	ldr	r3, [r7, #12]
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	d001      	beq.n	1ada <_usart_async_init+0x32>
		return init_status;
    1ad6:	68fb      	ldr	r3, [r7, #12]
    1ad8:	e024      	b.n	1b24 <_usart_async_init+0x7c>
	}
	device->hw = hw;
    1ada:	687b      	ldr	r3, [r7, #4]
    1adc:	683a      	ldr	r2, [r7, #0]
    1ade:	619a      	str	r2, [r3, #24]
	_sercom_init_irq_param(hw, (void *)device);
    1ae0:	687a      	ldr	r2, [r7, #4]
    1ae2:	683b      	ldr	r3, [r7, #0]
    1ae4:	0011      	movs	r1, r2
    1ae6:	0018      	movs	r0, r3
    1ae8:	4b13      	ldr	r3, [pc, #76]	; (1b38 <_usart_async_init+0x90>)
    1aea:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    1aec:	683b      	ldr	r3, [r7, #0]
    1aee:	0018      	movs	r0, r3
    1af0:	4b12      	ldr	r3, [pc, #72]	; (1b3c <_usart_async_init+0x94>)
    1af2:	4798      	blx	r3
    1af4:	0003      	movs	r3, r0
    1af6:	b25b      	sxtb	r3, r3
    1af8:	0018      	movs	r0, r3
    1afa:	4b11      	ldr	r3, [pc, #68]	; (1b40 <_usart_async_init+0x98>)
    1afc:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    1afe:	683b      	ldr	r3, [r7, #0]
    1b00:	0018      	movs	r0, r3
    1b02:	4b0e      	ldr	r3, [pc, #56]	; (1b3c <_usart_async_init+0x94>)
    1b04:	4798      	blx	r3
    1b06:	0003      	movs	r3, r0
    1b08:	b25b      	sxtb	r3, r3
    1b0a:	0018      	movs	r0, r3
    1b0c:	4b0d      	ldr	r3, [pc, #52]	; (1b44 <_usart_async_init+0x9c>)
    1b0e:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    1b10:	683b      	ldr	r3, [r7, #0]
    1b12:	0018      	movs	r0, r3
    1b14:	4b09      	ldr	r3, [pc, #36]	; (1b3c <_usart_async_init+0x94>)
    1b16:	4798      	blx	r3
    1b18:	0003      	movs	r3, r0
    1b1a:	b25b      	sxtb	r3, r3
    1b1c:	0018      	movs	r0, r3
    1b1e:	4b0a      	ldr	r3, [pc, #40]	; (1b48 <_usart_async_init+0xa0>)
    1b20:	4798      	blx	r3

	return ERR_NONE;
    1b22:	2300      	movs	r3, #0
}
    1b24:	0018      	movs	r0, r3
    1b26:	46bd      	mov	sp, r7
    1b28:	b004      	add	sp, #16
    1b2a:	bd80      	pop	{r7, pc}
    1b2c:	00002244 	.word	0x00002244
    1b30:	00000eb3 	.word	0x00000eb3
    1b34:	00001da1 	.word	0x00001da1
    1b38:	00001d79 	.word	0x00001d79
    1b3c:	00001f9d 	.word	0x00001f9d
    1b40:	00001749 	.word	0x00001749
    1b44:	00001789 	.word	0x00001789
    1b48:	00001715 	.word	0x00001715

00001b4c <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
    1b4c:	b580      	push	{r7, lr}
    1b4e:	b082      	sub	sp, #8
    1b50:	af00      	add	r7, sp, #0
    1b52:	6078      	str	r0, [r7, #4]
    1b54:	000a      	movs	r2, r1
    1b56:	1cfb      	adds	r3, r7, #3
    1b58:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	699a      	ldr	r2, [r3, #24]
    1b5e:	1cfb      	adds	r3, r7, #3
    1b60:	781b      	ldrb	r3, [r3, #0]
    1b62:	b29b      	uxth	r3, r3
    1b64:	0019      	movs	r1, r3
    1b66:	0010      	movs	r0, r2
    1b68:	4b02      	ldr	r3, [pc, #8]	; (1b74 <_usart_async_write_byte+0x28>)
    1b6a:	4798      	blx	r3
}
    1b6c:	46c0      	nop			; (mov r8, r8)
    1b6e:	46bd      	mov	sp, r7
    1b70:	b002      	add	sp, #8
    1b72:	bd80      	pop	{r7, pc}
    1b74:	00001a21 	.word	0x00001a21

00001b78 <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
    1b78:	b580      	push	{r7, lr}
    1b7a:	b082      	sub	sp, #8
    1b7c:	af00      	add	r7, sp, #0
    1b7e:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	699b      	ldr	r3, [r3, #24]
    1b84:	0018      	movs	r0, r3
    1b86:	4b03      	ldr	r3, [pc, #12]	; (1b94 <_usart_async_enable_byte_sent_irq+0x1c>)
    1b88:	4798      	blx	r3
}
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	46bd      	mov	sp, r7
    1b8e:	b002      	add	sp, #8
    1b90:	bd80      	pop	{r7, pc}
    1b92:	46c0      	nop			; (mov r8, r8)
    1b94:	0000189d 	.word	0x0000189d

00001b98 <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
    1b98:	b580      	push	{r7, lr}
    1b9a:	b082      	sub	sp, #8
    1b9c:	af00      	add	r7, sp, #0
    1b9e:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1ba0:	687b      	ldr	r3, [r7, #4]
    1ba2:	699b      	ldr	r3, [r3, #24]
    1ba4:	0018      	movs	r0, r3
    1ba6:	4b03      	ldr	r3, [pc, #12]	; (1bb4 <_usart_async_enable_tx_done_irq+0x1c>)
    1ba8:	4798      	blx	r3
}
    1baa:	46c0      	nop			; (mov r8, r8)
    1bac:	46bd      	mov	sp, r7
    1bae:	b002      	add	sp, #8
    1bb0:	bd80      	pop	{r7, pc}
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	000018eb 	.word	0x000018eb

00001bb8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1bb8:	b580      	push	{r7, lr}
    1bba:	b082      	sub	sp, #8
    1bbc:	af00      	add	r7, sp, #0
    1bbe:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1bc0:	687b      	ldr	r3, [r7, #4]
    1bc2:	4a04      	ldr	r2, [pc, #16]	; (1bd4 <_sercom_get_hardware_index+0x1c>)
    1bc4:	4694      	mov	ip, r2
    1bc6:	4463      	add	r3, ip
    1bc8:	0a9b      	lsrs	r3, r3, #10
    1bca:	b2db      	uxtb	r3, r3
}
    1bcc:	0018      	movs	r0, r3
    1bce:	46bd      	mov	sp, r7
    1bd0:	b002      	add	sp, #8
    1bd2:	bd80      	pop	{r7, pc}
    1bd4:	bdfffc00 	.word	0xbdfffc00

00001bd8 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    1bd8:	b590      	push	{r4, r7, lr}
    1bda:	b085      	sub	sp, #20
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
	void *hw = device->hw;
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	699b      	ldr	r3, [r3, #24]
    1be4:	60fb      	str	r3, [r7, #12]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1be6:	68fb      	ldr	r3, [r7, #12]
    1be8:	0018      	movs	r0, r3
    1bea:	4b35      	ldr	r3, [pc, #212]	; (1cc0 <_sercom_usart_interrupt_handler+0xe8>)
    1bec:	4798      	blx	r3
    1bee:	1e03      	subs	r3, r0, #0
    1bf0:	d00f      	beq.n	1c12 <_sercom_usart_interrupt_handler+0x3a>
    1bf2:	68fb      	ldr	r3, [r7, #12]
    1bf4:	0018      	movs	r0, r3
    1bf6:	4b33      	ldr	r3, [pc, #204]	; (1cc4 <_sercom_usart_interrupt_handler+0xec>)
    1bf8:	4798      	blx	r3
    1bfa:	1e03      	subs	r3, r0, #0
    1bfc:	d009      	beq.n	1c12 <_sercom_usart_interrupt_handler+0x3a>
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
    1bfe:	68fb      	ldr	r3, [r7, #12]
    1c00:	0018      	movs	r0, r3
    1c02:	4b31      	ldr	r3, [pc, #196]	; (1cc8 <_sercom_usart_interrupt_handler+0xf0>)
    1c04:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
    1c06:	687b      	ldr	r3, [r7, #4]
    1c08:	681b      	ldr	r3, [r3, #0]
    1c0a:	687a      	ldr	r2, [r7, #4]
    1c0c:	0010      	movs	r0, r2
    1c0e:	4798      	blx	r3
    1c10:	e053      	b.n	1cba <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1c12:	68fb      	ldr	r3, [r7, #12]
    1c14:	0018      	movs	r0, r3
    1c16:	4b2d      	ldr	r3, [pc, #180]	; (1ccc <_sercom_usart_interrupt_handler+0xf4>)
    1c18:	4798      	blx	r3
    1c1a:	1e03      	subs	r3, r0, #0
    1c1c:	d00f      	beq.n	1c3e <_sercom_usart_interrupt_handler+0x66>
    1c1e:	68fb      	ldr	r3, [r7, #12]
    1c20:	0018      	movs	r0, r3
    1c22:	4b2b      	ldr	r3, [pc, #172]	; (1cd0 <_sercom_usart_interrupt_handler+0xf8>)
    1c24:	4798      	blx	r3
    1c26:	1e03      	subs	r3, r0, #0
    1c28:	d009      	beq.n	1c3e <_sercom_usart_interrupt_handler+0x66>
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
    1c2a:	68fb      	ldr	r3, [r7, #12]
    1c2c:	0018      	movs	r0, r3
    1c2e:	4b29      	ldr	r3, [pc, #164]	; (1cd4 <_sercom_usart_interrupt_handler+0xfc>)
    1c30:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	689b      	ldr	r3, [r3, #8]
    1c36:	687a      	ldr	r2, [r7, #4]
    1c38:	0010      	movs	r0, r2
    1c3a:	4798      	blx	r3
    1c3c:	e03d      	b.n	1cba <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1c3e:	68fb      	ldr	r3, [r7, #12]
    1c40:	0018      	movs	r0, r3
    1c42:	4b25      	ldr	r3, [pc, #148]	; (1cd8 <_sercom_usart_interrupt_handler+0x100>)
    1c44:	4798      	blx	r3
    1c46:	1e03      	subs	r3, r0, #0
    1c48:	d01b      	beq.n	1c82 <_sercom_usart_interrupt_handler+0xaa>
		if (hri_sercomusart_read_STATUS_reg(hw)
    1c4a:	68fb      	ldr	r3, [r7, #12]
    1c4c:	0018      	movs	r0, r3
    1c4e:	4b23      	ldr	r3, [pc, #140]	; (1cdc <_sercom_usart_interrupt_handler+0x104>)
    1c50:	4798      	blx	r3
    1c52:	0003      	movs	r3, r0
		    & (SERCOM_USART_STATUS_PERR | SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF
    1c54:	001a      	movs	r2, r3
    1c56:	2337      	movs	r3, #55	; 0x37
    1c58:	4013      	ands	r3, r2
		if (hri_sercomusart_read_STATUS_reg(hw)
    1c5a:	d005      	beq.n	1c68 <_sercom_usart_interrupt_handler+0x90>
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
    1c5c:	68fb      	ldr	r3, [r7, #12]
    1c5e:	217f      	movs	r1, #127	; 0x7f
    1c60:	0018      	movs	r0, r3
    1c62:	4b1f      	ldr	r3, [pc, #124]	; (1ce0 <_sercom_usart_interrupt_handler+0x108>)
    1c64:	4798      	blx	r3
			return;
    1c66:	e028      	b.n	1cba <_sercom_usart_interrupt_handler+0xe2>
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1c68:	687b      	ldr	r3, [r7, #4]
    1c6a:	685c      	ldr	r4, [r3, #4]
    1c6c:	68fb      	ldr	r3, [r7, #12]
    1c6e:	0018      	movs	r0, r3
    1c70:	4b1c      	ldr	r3, [pc, #112]	; (1ce4 <_sercom_usart_interrupt_handler+0x10c>)
    1c72:	4798      	blx	r3
    1c74:	0003      	movs	r3, r0
    1c76:	b2da      	uxtb	r2, r3
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	0011      	movs	r1, r2
    1c7c:	0018      	movs	r0, r3
    1c7e:	47a0      	blx	r4
    1c80:	e01b      	b.n	1cba <_sercom_usart_interrupt_handler+0xe2>
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1c82:	68fb      	ldr	r3, [r7, #12]
    1c84:	0018      	movs	r0, r3
    1c86:	4b18      	ldr	r3, [pc, #96]	; (1ce8 <_sercom_usart_interrupt_handler+0x110>)
    1c88:	4798      	blx	r3
    1c8a:	1e03      	subs	r3, r0, #0
    1c8c:	d015      	beq.n	1cba <_sercom_usart_interrupt_handler+0xe2>
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
    1c8e:	68fb      	ldr	r3, [r7, #12]
    1c90:	0018      	movs	r0, r3
    1c92:	4b16      	ldr	r3, [pc, #88]	; (1cec <_sercom_usart_interrupt_handler+0x114>)
    1c94:	4798      	blx	r3
		device->usart_cb.error_cb(device);
    1c96:	687b      	ldr	r3, [r7, #4]
    1c98:	68db      	ldr	r3, [r3, #12]
    1c9a:	687a      	ldr	r2, [r7, #4]
    1c9c:	0010      	movs	r0, r2
    1c9e:	4798      	blx	r3
		status = hri_sercomusart_read_STATUS_reg(hw);
    1ca0:	68fb      	ldr	r3, [r7, #12]
    1ca2:	0018      	movs	r0, r3
    1ca4:	4b0d      	ldr	r3, [pc, #52]	; (1cdc <_sercom_usart_interrupt_handler+0x104>)
    1ca6:	4798      	blx	r3
    1ca8:	0003      	movs	r3, r0
    1caa:	60bb      	str	r3, [r7, #8]
		hri_sercomusart_clear_STATUS_reg(hw, status);
    1cac:	68bb      	ldr	r3, [r7, #8]
    1cae:	b29a      	uxth	r2, r3
    1cb0:	68fb      	ldr	r3, [r7, #12]
    1cb2:	0011      	movs	r1, r2
    1cb4:	0018      	movs	r0, r3
    1cb6:	4b0a      	ldr	r3, [pc, #40]	; (1ce0 <_sercom_usart_interrupt_handler+0x108>)
    1cb8:	4798      	blx	r3
	}
}
    1cba:	46bd      	mov	sp, r7
    1cbc:	b005      	add	sp, #20
    1cbe:	bd90      	pop	{r4, r7, pc}
    1cc0:	000017ff 	.word	0x000017ff
    1cc4:	000018b3 	.word	0x000018b3
    1cc8:	000018d5 	.word	0x000018d5
    1ccc:	00001821 	.word	0x00001821
    1cd0:	00001901 	.word	0x00001901
    1cd4:	00001923 	.word	0x00001923
    1cd8:	00001843 	.word	0x00001843
    1cdc:	00001a93 	.word	0x00001a93
    1ce0:	00001a75 	.word	0x00001a75
    1ce4:	00001a3f 	.word	0x00001a3f
    1ce8:	00001865 	.word	0x00001865
    1cec:	00001887 	.word	0x00001887

00001cf0 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    1cf0:	b590      	push	{r4, r7, lr}
    1cf2:	b085      	sub	sp, #20
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1cf8:	230e      	movs	r3, #14
    1cfa:	18fc      	adds	r4, r7, r3
    1cfc:	687b      	ldr	r3, [r7, #4]
    1cfe:	0018      	movs	r0, r3
    1d00:	4b18      	ldr	r3, [pc, #96]	; (1d64 <_get_sercom_index+0x74>)
    1d02:	4798      	blx	r3
    1d04:	0003      	movs	r3, r0
    1d06:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1d08:	230f      	movs	r3, #15
    1d0a:	18fb      	adds	r3, r7, r3
    1d0c:	2200      	movs	r2, #0
    1d0e:	701a      	strb	r2, [r3, #0]
    1d10:	e018      	b.n	1d44 <_get_sercom_index+0x54>
		if (_usarts[i].number == sercom_offset) {
    1d12:	230f      	movs	r3, #15
    1d14:	18fb      	adds	r3, r7, r3
    1d16:	781a      	ldrb	r2, [r3, #0]
    1d18:	4913      	ldr	r1, [pc, #76]	; (1d68 <_get_sercom_index+0x78>)
    1d1a:	0013      	movs	r3, r2
    1d1c:	009b      	lsls	r3, r3, #2
    1d1e:	189b      	adds	r3, r3, r2
    1d20:	009b      	lsls	r3, r3, #2
    1d22:	5c5b      	ldrb	r3, [r3, r1]
    1d24:	220e      	movs	r2, #14
    1d26:	18ba      	adds	r2, r7, r2
    1d28:	7812      	ldrb	r2, [r2, #0]
    1d2a:	429a      	cmp	r2, r3
    1d2c:	d103      	bne.n	1d36 <_get_sercom_index+0x46>
			return i;
    1d2e:	230f      	movs	r3, #15
    1d30:	18fb      	adds	r3, r7, r3
    1d32:	781b      	ldrb	r3, [r3, #0]
    1d34:	e012      	b.n	1d5c <_get_sercom_index+0x6c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1d36:	230f      	movs	r3, #15
    1d38:	18fb      	adds	r3, r7, r3
    1d3a:	781a      	ldrb	r2, [r3, #0]
    1d3c:	230f      	movs	r3, #15
    1d3e:	18fb      	adds	r3, r7, r3
    1d40:	3201      	adds	r2, #1
    1d42:	701a      	strb	r2, [r3, #0]
    1d44:	230f      	movs	r3, #15
    1d46:	18fb      	adds	r3, r7, r3
    1d48:	781b      	ldrb	r3, [r3, #0]
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d0e1      	beq.n	1d12 <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    1d4e:	4a07      	ldr	r2, [pc, #28]	; (1d6c <_get_sercom_index+0x7c>)
    1d50:	4b07      	ldr	r3, [pc, #28]	; (1d70 <_get_sercom_index+0x80>)
    1d52:	0019      	movs	r1, r3
    1d54:	2000      	movs	r0, #0
    1d56:	4b07      	ldr	r3, [pc, #28]	; (1d74 <_get_sercom_index+0x84>)
    1d58:	4798      	blx	r3
	return 0;
    1d5a:	2300      	movs	r3, #0
}
    1d5c:	0018      	movs	r0, r3
    1d5e:	46bd      	mov	sp, r7
    1d60:	b005      	add	sp, #20
    1d62:	bd90      	pop	{r4, r7, pc}
    1d64:	00001bb9 	.word	0x00001bb9
    1d68:	20000000 	.word	0x20000000
    1d6c:	0000025e 	.word	0x0000025e
    1d70:	00002244 	.word	0x00002244
    1d74:	00000eb3 	.word	0x00000eb3

00001d78 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    1d78:	b580      	push	{r7, lr}
    1d7a:	b082      	sub	sp, #8
    1d7c:	af00      	add	r7, sp, #0
    1d7e:	6078      	str	r0, [r7, #4]
    1d80:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    1d82:	687b      	ldr	r3, [r7, #4]
    1d84:	4a04      	ldr	r2, [pc, #16]	; (1d98 <_sercom_init_irq_param+0x20>)
    1d86:	4293      	cmp	r3, r2
    1d88:	d102      	bne.n	1d90 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _usart_async_device *)dev;
    1d8a:	4b04      	ldr	r3, [pc, #16]	; (1d9c <_sercom_init_irq_param+0x24>)
    1d8c:	683a      	ldr	r2, [r7, #0]
    1d8e:	601a      	str	r2, [r3, #0]
	}
}
    1d90:	46c0      	nop			; (mov r8, r8)
    1d92:	46bd      	mov	sp, r7
    1d94:	b002      	add	sp, #8
    1d96:	bd80      	pop	{r7, pc}
    1d98:	42001400 	.word	0x42001400
    1d9c:	20000044 	.word	0x20000044

00001da0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1da0:	b590      	push	{r4, r7, lr}
    1da2:	b085      	sub	sp, #20
    1da4:	af00      	add	r7, sp, #0
    1da6:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    1da8:	230f      	movs	r3, #15
    1daa:	18fc      	adds	r4, r7, r3
    1dac:	687b      	ldr	r3, [r7, #4]
    1dae:	0018      	movs	r0, r3
    1db0:	4b6f      	ldr	r3, [pc, #444]	; (1f70 <_usart_init+0x1d0>)
    1db2:	4798      	blx	r3
    1db4:	0003      	movs	r3, r0
    1db6:	7023      	strb	r3, [r4, #0]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	2101      	movs	r1, #1
    1dbc:	0018      	movs	r0, r3
    1dbe:	4b6d      	ldr	r3, [pc, #436]	; (1f74 <_usart_init+0x1d4>)
    1dc0:	4798      	blx	r3
    1dc2:	0003      	movs	r3, r0
    1dc4:	001a      	movs	r2, r3
    1dc6:	2301      	movs	r3, #1
    1dc8:	4053      	eors	r3, r2
    1dca:	b2db      	uxtb	r3, r3
    1dcc:	2b00      	cmp	r3, #0
    1dce:	d025      	beq.n	1e1c <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1dd0:	230f      	movs	r3, #15
    1dd2:	18fb      	adds	r3, r7, r3
    1dd4:	781a      	ldrb	r2, [r3, #0]
    1dd6:	4968      	ldr	r1, [pc, #416]	; (1f78 <_usart_init+0x1d8>)
    1dd8:	0013      	movs	r3, r2
    1dda:	009b      	lsls	r3, r3, #2
    1ddc:	189b      	adds	r3, r3, r2
    1dde:	009b      	lsls	r3, r3, #2
    1de0:	18cb      	adds	r3, r1, r3
    1de2:	3304      	adds	r3, #4
    1de4:	681b      	ldr	r3, [r3, #0]
    1de6:	221c      	movs	r2, #28
    1de8:	4013      	ands	r3, r2
    1dea:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	2102      	movs	r1, #2
    1df0:	0018      	movs	r0, r3
    1df2:	4b62      	ldr	r3, [pc, #392]	; (1f7c <_usart_init+0x1dc>)
    1df4:	4798      	blx	r3
    1df6:	1e03      	subs	r3, r0, #0
    1df8:	d008      	beq.n	1e0c <_usart_init+0x6c>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    1dfa:	687b      	ldr	r3, [r7, #4]
    1dfc:	0018      	movs	r0, r3
    1dfe:	4b60      	ldr	r3, [pc, #384]	; (1f80 <_usart_init+0x1e0>)
    1e00:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    1e02:	687b      	ldr	r3, [r7, #4]
    1e04:	2102      	movs	r1, #2
    1e06:	0018      	movs	r0, r3
    1e08:	4b5e      	ldr	r3, [pc, #376]	; (1f84 <_usart_init+0x1e4>)
    1e0a:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1e0c:	68bb      	ldr	r3, [r7, #8]
    1e0e:	2201      	movs	r2, #1
    1e10:	431a      	orrs	r2, r3
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	0011      	movs	r1, r2
    1e16:	0018      	movs	r0, r3
    1e18:	4b5b      	ldr	r3, [pc, #364]	; (1f88 <_usart_init+0x1e8>)
    1e1a:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    1e1c:	687b      	ldr	r3, [r7, #4]
    1e1e:	2101      	movs	r1, #1
    1e20:	0018      	movs	r0, r3
    1e22:	4b58      	ldr	r3, [pc, #352]	; (1f84 <_usart_init+0x1e4>)
    1e24:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1e26:	230f      	movs	r3, #15
    1e28:	18fb      	adds	r3, r7, r3
    1e2a:	781a      	ldrb	r2, [r3, #0]
    1e2c:	4952      	ldr	r1, [pc, #328]	; (1f78 <_usart_init+0x1d8>)
    1e2e:	0013      	movs	r3, r2
    1e30:	009b      	lsls	r3, r3, #2
    1e32:	189b      	adds	r3, r3, r2
    1e34:	009b      	lsls	r3, r3, #2
    1e36:	18cb      	adds	r3, r1, r3
    1e38:	3304      	adds	r3, #4
    1e3a:	681a      	ldr	r2, [r3, #0]
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	0011      	movs	r1, r2
    1e40:	0018      	movs	r0, r3
    1e42:	4b51      	ldr	r3, [pc, #324]	; (1f88 <_usart_init+0x1e8>)
    1e44:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1e46:	230f      	movs	r3, #15
    1e48:	18fb      	adds	r3, r7, r3
    1e4a:	781a      	ldrb	r2, [r3, #0]
    1e4c:	494a      	ldr	r1, [pc, #296]	; (1f78 <_usart_init+0x1d8>)
    1e4e:	0013      	movs	r3, r2
    1e50:	009b      	lsls	r3, r3, #2
    1e52:	189b      	adds	r3, r3, r2
    1e54:	009b      	lsls	r3, r3, #2
    1e56:	18cb      	adds	r3, r1, r3
    1e58:	3308      	adds	r3, #8
    1e5a:	681a      	ldr	r2, [r3, #0]
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	0011      	movs	r1, r2
    1e60:	0018      	movs	r0, r3
    1e62:	4b4a      	ldr	r3, [pc, #296]	; (1f8c <_usart_init+0x1ec>)
    1e64:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1e66:	230f      	movs	r3, #15
    1e68:	18fb      	adds	r3, r7, r3
    1e6a:	781a      	ldrb	r2, [r3, #0]
    1e6c:	4942      	ldr	r1, [pc, #264]	; (1f78 <_usart_init+0x1d8>)
    1e6e:	0013      	movs	r3, r2
    1e70:	009b      	lsls	r3, r3, #2
    1e72:	189b      	adds	r3, r3, r2
    1e74:	009b      	lsls	r3, r3, #2
    1e76:	18cb      	adds	r3, r1, r3
    1e78:	3304      	adds	r3, #4
    1e7a:	681a      	ldr	r2, [r3, #0]
    1e7c:	2380      	movs	r3, #128	; 0x80
    1e7e:	019b      	lsls	r3, r3, #6
    1e80:	4013      	ands	r3, r2
    1e82:	d10e      	bne.n	1ea2 <_usart_init+0x102>
    1e84:	230f      	movs	r3, #15
    1e86:	18fb      	adds	r3, r7, r3
    1e88:	781a      	ldrb	r2, [r3, #0]
    1e8a:	493b      	ldr	r1, [pc, #236]	; (1f78 <_usart_init+0x1d8>)
    1e8c:	0013      	movs	r3, r2
    1e8e:	009b      	lsls	r3, r3, #2
    1e90:	189b      	adds	r3, r3, r2
    1e92:	009b      	lsls	r3, r3, #2
    1e94:	18cb      	adds	r3, r1, r3
    1e96:	3304      	adds	r3, #4
    1e98:	681a      	ldr	r2, [r3, #0]
    1e9a:	23c0      	movs	r3, #192	; 0xc0
    1e9c:	01db      	lsls	r3, r3, #7
    1e9e:	4013      	ands	r3, r2
    1ea0:	d030      	beq.n	1f04 <_usart_init+0x164>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1ea2:	230f      	movs	r3, #15
    1ea4:	18fb      	adds	r3, r7, r3
    1ea6:	781a      	ldrb	r2, [r3, #0]
    1ea8:	4933      	ldr	r1, [pc, #204]	; (1f78 <_usart_init+0x1d8>)
    1eaa:	0013      	movs	r3, r2
    1eac:	009b      	lsls	r3, r3, #2
    1eae:	189b      	adds	r3, r3, r2
    1eb0:	009b      	lsls	r3, r3, #2
    1eb2:	18cb      	adds	r3, r1, r3
    1eb4:	330c      	adds	r3, #12
    1eb6:	881b      	ldrh	r3, [r3, #0]
    1eb8:	04db      	lsls	r3, r3, #19
    1eba:	0cdb      	lsrs	r3, r3, #19
    1ebc:	b299      	uxth	r1, r3
    1ebe:	687a      	ldr	r2, [r7, #4]
    1ec0:	8993      	ldrh	r3, [r2, #12]
    1ec2:	04c9      	lsls	r1, r1, #19
    1ec4:	0cc8      	lsrs	r0, r1, #19
    1ec6:	0b5b      	lsrs	r3, r3, #13
    1ec8:	035b      	lsls	r3, r3, #13
    1eca:	1c19      	adds	r1, r3, #0
    1ecc:	1c03      	adds	r3, r0, #0
    1ece:	430b      	orrs	r3, r1
    1ed0:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1ed2:	230f      	movs	r3, #15
    1ed4:	18fb      	adds	r3, r7, r3
    1ed6:	781a      	ldrb	r2, [r3, #0]
    1ed8:	4927      	ldr	r1, [pc, #156]	; (1f78 <_usart_init+0x1d8>)
    1eda:	0013      	movs	r3, r2
    1edc:	009b      	lsls	r3, r3, #2
    1ede:	189b      	adds	r3, r3, r2
    1ee0:	009b      	lsls	r3, r3, #2
    1ee2:	18cb      	adds	r3, r1, r3
    1ee4:	330e      	adds	r3, #14
    1ee6:	781b      	ldrb	r3, [r3, #0]
    1ee8:	1c1a      	adds	r2, r3, #0
    1eea:	2307      	movs	r3, #7
    1eec:	4013      	ands	r3, r2
    1eee:	b2d9      	uxtb	r1, r3
    1ef0:	687a      	ldr	r2, [r7, #4]
    1ef2:	8993      	ldrh	r3, [r2, #12]
    1ef4:	0348      	lsls	r0, r1, #13
    1ef6:	04db      	lsls	r3, r3, #19
    1ef8:	0cdb      	lsrs	r3, r3, #19
    1efa:	1c19      	adds	r1, r3, #0
    1efc:	1c03      	adds	r3, r0, #0
    1efe:	430b      	orrs	r3, r1
    1f00:	8193      	strh	r3, [r2, #12]
    1f02:	e00f      	b.n	1f24 <_usart_init+0x184>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1f04:	230f      	movs	r3, #15
    1f06:	18fb      	adds	r3, r7, r3
    1f08:	781a      	ldrb	r2, [r3, #0]
    1f0a:	491b      	ldr	r1, [pc, #108]	; (1f78 <_usart_init+0x1d8>)
    1f0c:	0013      	movs	r3, r2
    1f0e:	009b      	lsls	r3, r3, #2
    1f10:	189b      	adds	r3, r3, r2
    1f12:	009b      	lsls	r3, r3, #2
    1f14:	18cb      	adds	r3, r1, r3
    1f16:	330c      	adds	r3, #12
    1f18:	881a      	ldrh	r2, [r3, #0]
    1f1a:	687b      	ldr	r3, [r7, #4]
    1f1c:	0011      	movs	r1, r2
    1f1e:	0018      	movs	r0, r3
    1f20:	4b1b      	ldr	r3, [pc, #108]	; (1f90 <_usart_init+0x1f0>)
    1f22:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1f24:	230f      	movs	r3, #15
    1f26:	18fb      	adds	r3, r7, r3
    1f28:	781a      	ldrb	r2, [r3, #0]
    1f2a:	4913      	ldr	r1, [pc, #76]	; (1f78 <_usart_init+0x1d8>)
    1f2c:	0013      	movs	r3, r2
    1f2e:	009b      	lsls	r3, r3, #2
    1f30:	189b      	adds	r3, r3, r2
    1f32:	009b      	lsls	r3, r3, #2
    1f34:	18cb      	adds	r3, r1, r3
    1f36:	330f      	adds	r3, #15
    1f38:	781a      	ldrb	r2, [r3, #0]
    1f3a:	687b      	ldr	r3, [r7, #4]
    1f3c:	0011      	movs	r1, r2
    1f3e:	0018      	movs	r0, r3
    1f40:	4b14      	ldr	r3, [pc, #80]	; (1f94 <_usart_init+0x1f4>)
    1f42:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1f44:	230f      	movs	r3, #15
    1f46:	18fb      	adds	r3, r7, r3
    1f48:	781a      	ldrb	r2, [r3, #0]
    1f4a:	490b      	ldr	r1, [pc, #44]	; (1f78 <_usart_init+0x1d8>)
    1f4c:	0013      	movs	r3, r2
    1f4e:	009b      	lsls	r3, r3, #2
    1f50:	189b      	adds	r3, r3, r2
    1f52:	009b      	lsls	r3, r3, #2
    1f54:	18cb      	adds	r3, r1, r3
    1f56:	3310      	adds	r3, #16
    1f58:	781a      	ldrb	r2, [r3, #0]
    1f5a:	687b      	ldr	r3, [r7, #4]
    1f5c:	0011      	movs	r1, r2
    1f5e:	0018      	movs	r0, r3
    1f60:	4b0d      	ldr	r3, [pc, #52]	; (1f98 <_usart_init+0x1f8>)
    1f62:	4798      	blx	r3

	return ERR_NONE;
    1f64:	2300      	movs	r3, #0
}
    1f66:	0018      	movs	r0, r3
    1f68:	46bd      	mov	sp, r7
    1f6a:	b005      	add	sp, #20
    1f6c:	bd90      	pop	{r4, r7, pc}
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	00001cf1 	.word	0x00001cf1
    1f74:	000017df 	.word	0x000017df
    1f78:	20000000 	.word	0x20000000
    1f7c:	00001965 	.word	0x00001965
    1f80:	00001939 	.word	0x00001939
    1f84:	000017c1 	.word	0x000017c1
    1f88:	00001995 	.word	0x00001995
    1f8c:	000019bd 	.word	0x000019bd
    1f90:	000019e5 	.word	0x000019e5
    1f94:	00001a03 	.word	0x00001a03
    1f98:	00001a55 	.word	0x00001a55

00001f9c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1f9c:	b580      	push	{r7, lr}
    1f9e:	b082      	sub	sp, #8
    1fa0:	af00      	add	r7, sp, #0
    1fa2:	6078      	str	r0, [r7, #4]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1fa4:	687b      	ldr	r3, [r7, #4]
    1fa6:	0018      	movs	r0, r3
    1fa8:	4b04      	ldr	r3, [pc, #16]	; (1fbc <_sercom_get_irq_num+0x20>)
    1faa:	4798      	blx	r3
    1fac:	0003      	movs	r3, r0
    1fae:	3309      	adds	r3, #9
    1fb0:	b2db      	uxtb	r3, r3
}
    1fb2:	0018      	movs	r0, r3
    1fb4:	46bd      	mov	sp, r7
    1fb6:	b002      	add	sp, #8
    1fb8:	bd80      	pop	{r7, pc}
    1fba:	46c0      	nop			; (mov r8, r8)
    1fbc:	00001bb9 	.word	0x00001bb9

00001fc0 <SERCOM4_Handler>:

	return NULL;
}

void SERCOM4_Handler(void)
{
    1fc0:	b580      	push	{r7, lr}
    1fc2:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom4_dev);
    1fc4:	4b03      	ldr	r3, [pc, #12]	; (1fd4 <SERCOM4_Handler+0x14>)
    1fc6:	681b      	ldr	r3, [r3, #0]
    1fc8:	0018      	movs	r0, r3
    1fca:	4b03      	ldr	r3, [pc, #12]	; (1fd8 <SERCOM4_Handler+0x18>)
    1fcc:	4798      	blx	r3
}
    1fce:	46c0      	nop			; (mov r8, r8)
    1fd0:	46bd      	mov	sp, r7
    1fd2:	bd80      	pop	{r7, pc}
    1fd4:	20000044 	.word	0x20000044
    1fd8:	00001bd9 	.word	0x00001bd9

00001fdc <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    1fdc:	b580      	push	{r7, lr}
    1fde:	b082      	sub	sp, #8
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1fe4:	4b04      	ldr	r3, [pc, #16]	; (1ff8 <_system_time_init+0x1c>)
    1fe6:	4a05      	ldr	r2, [pc, #20]	; (1ffc <_system_time_init+0x20>)
    1fe8:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1fea:	4b03      	ldr	r3, [pc, #12]	; (1ff8 <_system_time_init+0x1c>)
    1fec:	2205      	movs	r2, #5
    1fee:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    1ff0:	46c0      	nop			; (mov r8, r8)
    1ff2:	46bd      	mov	sp, r7
    1ff4:	b002      	add	sp, #8
    1ff6:	bd80      	pop	{r7, pc}
    1ff8:	e000e010 	.word	0xe000e010
    1ffc:	00ffffff 	.word	0x00ffffff

00002000 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    2000:	b580      	push	{r7, lr}
    2002:	b082      	sub	sp, #8
    2004:	af00      	add	r7, sp, #0
    2006:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    2008:	687b      	ldr	r3, [r7, #4]
    200a:	0018      	movs	r0, r3
    200c:	4b02      	ldr	r3, [pc, #8]	; (2018 <STACK_SIZE+0x18>)
    200e:	4798      	blx	r3
}
    2010:	46c0      	nop			; (mov r8, r8)
    2012:	46bd      	mov	sp, r7
    2014:	b002      	add	sp, #8
    2016:	bd80      	pop	{r7, pc}
    2018:	00001fdd 	.word	0x00001fdd

0000201c <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    201c:	b580      	push	{r7, lr}
    201e:	b084      	sub	sp, #16
    2020:	af00      	add	r7, sp, #0
    2022:	6078      	str	r0, [r7, #4]
    2024:	6039      	str	r1, [r7, #0]
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2026:	683b      	ldr	r3, [r7, #0]
    2028:	0e1a      	lsrs	r2, r3, #24
    202a:	230f      	movs	r3, #15
    202c:	18fb      	adds	r3, r7, r3
    202e:	701a      	strb	r2, [r3, #0]
	uint32_t buf = cycles;
    2030:	683b      	ldr	r3, [r7, #0]
    2032:	60bb      	str	r3, [r7, #8]

	while (n--) {
    2034:	e011      	b.n	205a <_delay_cycles+0x3e>
		SysTick->LOAD = 0xFFFFFF;
    2036:	4b16      	ldr	r3, [pc, #88]	; (2090 <_delay_cycles+0x74>)
    2038:	4a16      	ldr	r2, [pc, #88]	; (2094 <_delay_cycles+0x78>)
    203a:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    203c:	4b14      	ldr	r3, [pc, #80]	; (2090 <_delay_cycles+0x74>)
    203e:	4a15      	ldr	r2, [pc, #84]	; (2094 <_delay_cycles+0x78>)
    2040:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	4b12      	ldr	r3, [pc, #72]	; (2090 <_delay_cycles+0x74>)
    2046:	681a      	ldr	r2, [r3, #0]
    2048:	2380      	movs	r3, #128	; 0x80
    204a:	025b      	lsls	r3, r3, #9
    204c:	4013      	ands	r3, r2
    204e:	d0f9      	beq.n	2044 <_delay_cycles+0x28>
			;
		buf -= 0xFFFFFF;
    2050:	68bb      	ldr	r3, [r7, #8]
    2052:	4a11      	ldr	r2, [pc, #68]	; (2098 <_delay_cycles+0x7c>)
    2054:	4694      	mov	ip, r2
    2056:	4463      	add	r3, ip
    2058:	60bb      	str	r3, [r7, #8]
	while (n--) {
    205a:	230f      	movs	r3, #15
    205c:	18fb      	adds	r3, r7, r3
    205e:	781b      	ldrb	r3, [r3, #0]
    2060:	220f      	movs	r2, #15
    2062:	18ba      	adds	r2, r7, r2
    2064:	1e59      	subs	r1, r3, #1
    2066:	7011      	strb	r1, [r2, #0]
    2068:	2b00      	cmp	r3, #0
    206a:	d1e4      	bne.n	2036 <_delay_cycles+0x1a>
	}

	SysTick->LOAD = buf;
    206c:	4b08      	ldr	r3, [pc, #32]	; (2090 <_delay_cycles+0x74>)
    206e:	68ba      	ldr	r2, [r7, #8]
    2070:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = buf;
    2072:	4b07      	ldr	r3, [pc, #28]	; (2090 <_delay_cycles+0x74>)
    2074:	68ba      	ldr	r2, [r7, #8]
    2076:	609a      	str	r2, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2078:	46c0      	nop			; (mov r8, r8)
    207a:	4b05      	ldr	r3, [pc, #20]	; (2090 <_delay_cycles+0x74>)
    207c:	681a      	ldr	r2, [r3, #0]
    207e:	2380      	movs	r3, #128	; 0x80
    2080:	025b      	lsls	r3, r3, #9
    2082:	4013      	ands	r3, r2
    2084:	d0f9      	beq.n	207a <_delay_cycles+0x5e>
		;
}
    2086:	46c0      	nop			; (mov r8, r8)
    2088:	46bd      	mov	sp, r7
    208a:	b004      	add	sp, #16
    208c:	bd80      	pop	{r7, pc}
    208e:	46c0      	nop			; (mov r8, r8)
    2090:	e000e010 	.word	0xe000e010
    2094:	00ffffff 	.word	0x00ffffff
    2098:	ff000001 	.word	0xff000001

0000209c <hri_port_toggle_OUT_reg>:
{
    209c:	b580      	push	{r7, lr}
    209e:	b084      	sub	sp, #16
    20a0:	af00      	add	r7, sp, #0
    20a2:	60f8      	str	r0, [r7, #12]
    20a4:	607a      	str	r2, [r7, #4]
    20a6:	230b      	movs	r3, #11
    20a8:	18fb      	adds	r3, r7, r3
    20aa:	1c0a      	adds	r2, r1, #0
    20ac:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    20ae:	230b      	movs	r3, #11
    20b0:	18fb      	adds	r3, r7, r3
    20b2:	781b      	ldrb	r3, [r3, #0]
    20b4:	68fa      	ldr	r2, [r7, #12]
    20b6:	01db      	lsls	r3, r3, #7
    20b8:	18d3      	adds	r3, r2, r3
    20ba:	331c      	adds	r3, #28
    20bc:	687a      	ldr	r2, [r7, #4]
    20be:	601a      	str	r2, [r3, #0]
}
    20c0:	46c0      	nop			; (mov r8, r8)
    20c2:	46bd      	mov	sp, r7
    20c4:	b004      	add	sp, #16
    20c6:	bd80      	pop	{r7, pc}

000020c8 <_gpio_toggle_level>:
{
    20c8:	b580      	push	{r7, lr}
    20ca:	b082      	sub	sp, #8
    20cc:	af00      	add	r7, sp, #0
    20ce:	0002      	movs	r2, r0
    20d0:	6039      	str	r1, [r7, #0]
    20d2:	1dfb      	adds	r3, r7, #7
    20d4:	701a      	strb	r2, [r3, #0]
	hri_port_toggle_OUT_reg(PORT_IOBUS, port, mask);
    20d6:	683a      	ldr	r2, [r7, #0]
    20d8:	1dfb      	adds	r3, r7, #7
    20da:	7819      	ldrb	r1, [r3, #0]
    20dc:	23c0      	movs	r3, #192	; 0xc0
    20de:	05db      	lsls	r3, r3, #23
    20e0:	0018      	movs	r0, r3
    20e2:	4b03      	ldr	r3, [pc, #12]	; (20f0 <_gpio_toggle_level+0x28>)
    20e4:	4798      	blx	r3
}
    20e6:	46c0      	nop			; (mov r8, r8)
    20e8:	46bd      	mov	sp, r7
    20ea:	b002      	add	sp, #8
    20ec:	bd80      	pop	{r7, pc}
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	0000209d 	.word	0x0000209d

000020f4 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    20f4:	b580      	push	{r7, lr}
    20f6:	b082      	sub	sp, #8
    20f8:	af00      	add	r7, sp, #0
    20fa:	0002      	movs	r2, r0
    20fc:	1dfb      	adds	r3, r7, #7
    20fe:	701a      	strb	r2, [r3, #0]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    2100:	1dfb      	adds	r3, r7, #7
    2102:	781b      	ldrb	r3, [r3, #0]
    2104:	095b      	lsrs	r3, r3, #5
    2106:	b2d8      	uxtb	r0, r3
    2108:	1dfb      	adds	r3, r7, #7
    210a:	781b      	ldrb	r3, [r3, #0]
    210c:	221f      	movs	r2, #31
    210e:	4013      	ands	r3, r2
    2110:	2201      	movs	r2, #1
    2112:	409a      	lsls	r2, r3
    2114:	0013      	movs	r3, r2
    2116:	0019      	movs	r1, r3
    2118:	4b02      	ldr	r3, [pc, #8]	; (2124 <gpio_toggle_pin_level+0x30>)
    211a:	4798      	blx	r3
}
    211c:	46c0      	nop			; (mov r8, r8)
    211e:	46bd      	mov	sp, r7
    2120:	b002      	add	sp, #8
    2122:	bd80      	pop	{r7, pc}
    2124:	000020c9 	.word	0x000020c9

00002128 <main>:
	// Do nothing when tx interrupt is called
	
}

int main(void)
{
    2128:	b580      	push	{r7, lr}
    212a:	af00      	add	r7, sp, #0
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    212c:	4b05      	ldr	r3, [pc, #20]	; (2144 <main+0x1c>)
    212e:	4798      	blx	r3
	gpio_toggle_pin_level(LED1);
    2130:	2036      	movs	r0, #54	; 0x36
    2132:	4b05      	ldr	r3, [pc, #20]	; (2148 <main+0x20>)
    2134:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
		
		//io_write(&USART_0,"Hello World!",12);
		delay_ms(1000);
    2136:	23fa      	movs	r3, #250	; 0xfa
    2138:	009b      	lsls	r3, r3, #2
    213a:	0018      	movs	r0, r3
    213c:	4b03      	ldr	r3, [pc, #12]	; (214c <main+0x24>)
    213e:	4798      	blx	r3
    2140:	e7f9      	b.n	2136 <main+0xe>
    2142:	46c0      	nop			; (mov r8, r8)
    2144:	0000011d 	.word	0x0000011d
    2148:	000020f5 	.word	0x000020f5
    214c:	00000b31 	.word	0x00000b31

00002150 <__libc_init_array>:
    2150:	b570      	push	{r4, r5, r6, lr}
    2152:	2600      	movs	r6, #0
    2154:	4d0c      	ldr	r5, [pc, #48]	; (2188 <__libc_init_array+0x38>)
    2156:	4c0d      	ldr	r4, [pc, #52]	; (218c <__libc_init_array+0x3c>)
    2158:	1b64      	subs	r4, r4, r5
    215a:	10a4      	asrs	r4, r4, #2
    215c:	42a6      	cmp	r6, r4
    215e:	d109      	bne.n	2174 <__libc_init_array+0x24>
    2160:	2600      	movs	r6, #0
    2162:	f000 f887 	bl	2274 <_init>
    2166:	4d0a      	ldr	r5, [pc, #40]	; (2190 <__libc_init_array+0x40>)
    2168:	4c0a      	ldr	r4, [pc, #40]	; (2194 <__libc_init_array+0x44>)
    216a:	1b64      	subs	r4, r4, r5
    216c:	10a4      	asrs	r4, r4, #2
    216e:	42a6      	cmp	r6, r4
    2170:	d105      	bne.n	217e <__libc_init_array+0x2e>
    2172:	bd70      	pop	{r4, r5, r6, pc}
    2174:	00b3      	lsls	r3, r6, #2
    2176:	58eb      	ldr	r3, [r5, r3]
    2178:	4798      	blx	r3
    217a:	3601      	adds	r6, #1
    217c:	e7ee      	b.n	215c <__libc_init_array+0xc>
    217e:	00b3      	lsls	r3, r6, #2
    2180:	58eb      	ldr	r3, [r5, r3]
    2182:	4798      	blx	r3
    2184:	3601      	adds	r6, #1
    2186:	e7f2      	b.n	216e <__libc_init_array+0x1e>
    2188:	00002280 	.word	0x00002280
    218c:	00002280 	.word	0x00002280
    2190:	00002280 	.word	0x00002280
    2194:	00002284 	.word	0x00002284
    2198:	682f2e2e 	.word	0x682f2e2e
    219c:	702f6c70 	.word	0x702f6c70
    21a0:	2f74726f 	.word	0x2f74726f
    21a4:	5f6c7068 	.word	0x5f6c7068
    21a8:	6f697067 	.word	0x6f697067
    21ac:	7361625f 	.word	0x7361625f
    21b0:	00682e65 	.word	0x00682e65
    21b4:	682f2e2e 	.word	0x682f2e2e
    21b8:	732f6c61 	.word	0x732f6c61
    21bc:	682f6372 	.word	0x682f6372
    21c0:	755f6c61 	.word	0x755f6c61
    21c4:	74726173 	.word	0x74726173
    21c8:	7973615f 	.word	0x7973615f
    21cc:	632e636e 	.word	0x632e636e
    21d0:	00000000 	.word	0x00000000
    21d4:	682f2e2e 	.word	0x682f2e2e
    21d8:	752f6c61 	.word	0x752f6c61
    21dc:	736c6974 	.word	0x736c6974
    21e0:	6372732f 	.word	0x6372732f
    21e4:	6974752f 	.word	0x6974752f
    21e8:	725f736c 	.word	0x725f736c
    21ec:	62676e69 	.word	0x62676e69
    21f0:	65666675 	.word	0x65666675
    21f4:	00632e72 	.word	0x00632e72
    21f8:	682f2e2e 	.word	0x682f2e2e
    21fc:	632f6c70 	.word	0x632f6c70
    2200:	2f65726f 	.word	0x2f65726f
    2204:	5f6c7068 	.word	0x5f6c7068
    2208:	65726f63 	.word	0x65726f63
    220c:	70306d5f 	.word	0x70306d5f
    2210:	5f73756c 	.word	0x5f73756c
    2214:	65736162 	.word	0x65736162
    2218:	0000632e 	.word	0x0000632e
    221c:	00001122 	.word	0x00001122
    2220:	00001100 	.word	0x00001100
    2224:	000010de 	.word	0x000010de
    2228:	000010bc 	.word	0x000010bc
    222c:	0000109a 	.word	0x0000109a
    2230:	0000120e 	.word	0x0000120e
    2234:	000011ec 	.word	0x000011ec
    2238:	000011d8 	.word	0x000011d8
    223c:	000011ba 	.word	0x000011ba
    2240:	000011a2 	.word	0x000011a2
    2244:	682f2e2e 	.word	0x682f2e2e
    2248:	732f6c70 	.word	0x732f6c70
    224c:	6f637265 	.word	0x6f637265
    2250:	70682f6d 	.word	0x70682f6d
    2254:	65735f6c 	.word	0x65735f6c
    2258:	6d6f6372 	.word	0x6d6f6372
    225c:	0000632e 	.word	0x0000632e

00002260 <sercomspi_regs>:
	...

00002274 <_init>:
    2274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2276:	46c0      	nop			; (mov r8, r8)
    2278:	bcf8      	pop	{r3, r4, r5, r6, r7}
    227a:	bc08      	pop	{r3}
    227c:	469e      	mov	lr, r3
    227e:	4770      	bx	lr

00002280 <__init_array_start>:
    2280:	000000e5 	.word	0x000000e5

00002284 <_fini>:
    2284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2286:	46c0      	nop			; (mov r8, r8)
    2288:	bcf8      	pop	{r3, r4, r5, r6, r7}
    228a:	bc08      	pop	{r3}
    228c:	469e      	mov	lr, r3
    228e:	4770      	bx	lr

00002290 <__fini_array_start>:
    2290:	000000bd 	.word	0x000000bd
